
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009690  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009940  08009940  00019940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08009a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  24000084  08009a84  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000284  08009a84  00020284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018423  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d99  00000000  00000000  000384d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0003b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001040  00000000  00000000  0003c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031756  00000000  00000000  0003d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a375  00000000  00000000  0006eb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f304  00000000  00000000  00088ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c81f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c84  00000000  00000000  001c8248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009928 	.word	0x08009928

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	08009928 	.word	0x08009928

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b79      	ldr	r3, [pc, #484]	; (8000880 <Thrust_Init+0x1ec>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a78      	ldr	r2, [pc, #480]	; (8000880 <Thrust_Init+0x1ec>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 ff84 	bl	80055b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 80006a8:	4b76      	ldr	r3, [pc, #472]	; (8000884 <Thrust_Init+0x1f0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a75      	ldr	r2, [pc, #468]	; (8000884 <Thrust_Init+0x1f0>)
 80006ae:	6852      	ldr	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 ff7c 	bl	80055b0 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, 50);
 80006b8:	4b71      	ldr	r3, [pc, #452]	; (8000880 <Thrust_Init+0x1ec>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d105      	bne.n	80006cc <Thrust_Init+0x38>
 80006c0:	4b6f      	ldr	r3, [pc, #444]	; (8000880 <Thrust_Init+0x1ec>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2232      	movs	r2, #50	; 0x32
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ca:	e02c      	b.n	8000726 <Thrust_Init+0x92>
 80006cc:	4b6c      	ldr	r3, [pc, #432]	; (8000880 <Thrust_Init+0x1ec>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d105      	bne.n	80006e0 <Thrust_Init+0x4c>
 80006d4:	4b6a      	ldr	r3, [pc, #424]	; (8000880 <Thrust_Init+0x1ec>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	2332      	movs	r3, #50	; 0x32
 80006dc:	6393      	str	r3, [r2, #56]	; 0x38
 80006de:	e022      	b.n	8000726 <Thrust_Init+0x92>
 80006e0:	4b67      	ldr	r3, [pc, #412]	; (8000880 <Thrust_Init+0x1ec>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b08      	cmp	r3, #8
 80006e6:	d105      	bne.n	80006f4 <Thrust_Init+0x60>
 80006e8:	4b65      	ldr	r3, [pc, #404]	; (8000880 <Thrust_Init+0x1ec>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	2332      	movs	r3, #50	; 0x32
 80006f0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006f2:	e018      	b.n	8000726 <Thrust_Init+0x92>
 80006f4:	4b62      	ldr	r3, [pc, #392]	; (8000880 <Thrust_Init+0x1ec>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b0c      	cmp	r3, #12
 80006fa:	d105      	bne.n	8000708 <Thrust_Init+0x74>
 80006fc:	4b60      	ldr	r3, [pc, #384]	; (8000880 <Thrust_Init+0x1ec>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	2332      	movs	r3, #50	; 0x32
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	e00e      	b.n	8000726 <Thrust_Init+0x92>
 8000708:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <Thrust_Init+0x1ec>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	2b10      	cmp	r3, #16
 800070e:	d105      	bne.n	800071c <Thrust_Init+0x88>
 8000710:	4b5b      	ldr	r3, [pc, #364]	; (8000880 <Thrust_Init+0x1ec>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	2332      	movs	r3, #50	; 0x32
 8000718:	6593      	str	r3, [r2, #88]	; 0x58
 800071a:	e004      	b.n	8000726 <Thrust_Init+0x92>
 800071c:	4b58      	ldr	r3, [pc, #352]	; (8000880 <Thrust_Init+0x1ec>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	2332      	movs	r3, #50	; 0x32
 8000724:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, 50);
 8000726:	4b57      	ldr	r3, [pc, #348]	; (8000884 <Thrust_Init+0x1f0>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <Thrust_Init+0xa6>
 800072e:	4b55      	ldr	r3, [pc, #340]	; (8000884 <Thrust_Init+0x1f0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2232      	movs	r2, #50	; 0x32
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
 8000738:	e02c      	b.n	8000794 <Thrust_Init+0x100>
 800073a:	4b52      	ldr	r3, [pc, #328]	; (8000884 <Thrust_Init+0x1f0>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b04      	cmp	r3, #4
 8000740:	d105      	bne.n	800074e <Thrust_Init+0xba>
 8000742:	4b50      	ldr	r3, [pc, #320]	; (8000884 <Thrust_Init+0x1f0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2332      	movs	r3, #50	; 0x32
 800074a:	6393      	str	r3, [r2, #56]	; 0x38
 800074c:	e022      	b.n	8000794 <Thrust_Init+0x100>
 800074e:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <Thrust_Init+0x1f0>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	2b08      	cmp	r3, #8
 8000754:	d105      	bne.n	8000762 <Thrust_Init+0xce>
 8000756:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <Thrust_Init+0x1f0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	2332      	movs	r3, #50	; 0x32
 800075e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000760:	e018      	b.n	8000794 <Thrust_Init+0x100>
 8000762:	4b48      	ldr	r3, [pc, #288]	; (8000884 <Thrust_Init+0x1f0>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b0c      	cmp	r3, #12
 8000768:	d105      	bne.n	8000776 <Thrust_Init+0xe2>
 800076a:	4b46      	ldr	r3, [pc, #280]	; (8000884 <Thrust_Init+0x1f0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2332      	movs	r3, #50	; 0x32
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	e00e      	b.n	8000794 <Thrust_Init+0x100>
 8000776:	4b43      	ldr	r3, [pc, #268]	; (8000884 <Thrust_Init+0x1f0>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b10      	cmp	r3, #16
 800077c:	d105      	bne.n	800078a <Thrust_Init+0xf6>
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <Thrust_Init+0x1f0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	2332      	movs	r3, #50	; 0x32
 8000786:	6593      	str	r3, [r2, #88]	; 0x58
 8000788:	e004      	b.n	8000794 <Thrust_Init+0x100>
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <Thrust_Init+0x1f0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f000 ffdf 	bl	8001758 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, 100);
 800079a:	4b39      	ldr	r3, [pc, #228]	; (8000880 <Thrust_Init+0x1ec>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d105      	bne.n	80007ae <Thrust_Init+0x11a>
 80007a2:	4b37      	ldr	r3, [pc, #220]	; (8000880 <Thrust_Init+0x1ec>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2264      	movs	r2, #100	; 0x64
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
 80007ac:	e02c      	b.n	8000808 <Thrust_Init+0x174>
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <Thrust_Init+0x1ec>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d105      	bne.n	80007c2 <Thrust_Init+0x12e>
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <Thrust_Init+0x1ec>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	6393      	str	r3, [r2, #56]	; 0x38
 80007c0:	e022      	b.n	8000808 <Thrust_Init+0x174>
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <Thrust_Init+0x1ec>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b08      	cmp	r3, #8
 80007c8:	d105      	bne.n	80007d6 <Thrust_Init+0x142>
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <Thrust_Init+0x1ec>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007d4:	e018      	b.n	8000808 <Thrust_Init+0x174>
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <Thrust_Init+0x1ec>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b0c      	cmp	r3, #12
 80007dc:	d105      	bne.n	80007ea <Thrust_Init+0x156>
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <Thrust_Init+0x1ec>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	e00e      	b.n	8000808 <Thrust_Init+0x174>
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <Thrust_Init+0x1ec>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b10      	cmp	r3, #16
 80007f0:	d105      	bne.n	80007fe <Thrust_Init+0x16a>
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <Thrust_Init+0x1ec>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	6593      	str	r3, [r2, #88]	; 0x58
 80007fc:	e004      	b.n	8000808 <Thrust_Init+0x174>
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <Thrust_Init+0x1ec>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, 100);
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <Thrust_Init+0x1f0>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d105      	bne.n	800081c <Thrust_Init+0x188>
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <Thrust_Init+0x1f0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2264      	movs	r2, #100	; 0x64
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
 800081a:	e02c      	b.n	8000876 <Thrust_Init+0x1e2>
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <Thrust_Init+0x1f0>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b04      	cmp	r3, #4
 8000822:	d105      	bne.n	8000830 <Thrust_Init+0x19c>
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <Thrust_Init+0x1f0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	6393      	str	r3, [r2, #56]	; 0x38
 800082e:	e022      	b.n	8000876 <Thrust_Init+0x1e2>
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <Thrust_Init+0x1f0>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b08      	cmp	r3, #8
 8000836:	d105      	bne.n	8000844 <Thrust_Init+0x1b0>
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <Thrust_Init+0x1f0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	2364      	movs	r3, #100	; 0x64
 8000840:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000842:	e018      	b.n	8000876 <Thrust_Init+0x1e2>
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <Thrust_Init+0x1f0>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b0c      	cmp	r3, #12
 800084a:	d105      	bne.n	8000858 <Thrust_Init+0x1c4>
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <Thrust_Init+0x1f0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	e00e      	b.n	8000876 <Thrust_Init+0x1e2>
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <Thrust_Init+0x1f0>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b10      	cmp	r3, #16
 800085e:	d105      	bne.n	800086c <Thrust_Init+0x1d8>
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <Thrust_Init+0x1f0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	6593      	str	r3, [r2, #88]	; 0x58
 800086a:	e004      	b.n	8000876 <Thrust_Init+0x1e2>
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <Thrust_Init+0x1f0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f000 ff6e 	bl	8001758 <HAL_Delay>

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000000 	.word	0x24000000
 8000884:	24000008 	.word	0x24000008

08000888 <Process_Init>:
void Process_Init(void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	Thrust_Init();
 800088c:	f7ff ff02 	bl	8000694 <Thrust_Init>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <Process>:

void Process(commandMsg* message) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    AdjustThrust(&TIM_PROP_G, &message->thrust);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4619      	mov	r1, r3
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <Process+0x3c>)
 80008a4:	f000 f818 	bl	80008d8 <AdjustThrust>
    AdjustThrust(&TIM_PROP_D, &message->thrust);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4619      	mov	r1, r3
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <Process+0x40>)
 80008b0:	f000 f812 	bl	80008d8 <AdjustThrust>
    AdjustAngle(&message->thrust,&message->angle);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4619      	mov	r1, r3
 80008c0:	4610      	mov	r0, r2
 80008c2:	f000 f84d 	bl	8000960 <AdjustAngle>

    //HAL_UART_Transmit(hRPICom.huartDebug, &message->thrust, 8, 10); //receive data from data buffer interrupt mode
    //HAL_UART_Transmit(hRPICom.huartDebug, (uint8_t*)&message->angle, 16, 10);
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	24000000 	.word	0x24000000
 80008d4:	24000008 	.word	0x24000008

080008d8 <AdjustThrust>:

void AdjustThrust(struct TIM_PROP* tim_prop, uint8_t thrust) {
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL, thrust);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <AdjustThrust+0x20>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	78fa      	ldrb	r2, [r7, #3]
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008f6:	e02c      	b.n	8000952 <AdjustThrust+0x7a>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL, thrust);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d105      	bne.n	800090c <AdjustThrust+0x34>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	6393      	str	r3, [r2, #56]	; 0x38
}
 800090a:	e022      	b.n	8000952 <AdjustThrust+0x7a>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL, thrust);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d105      	bne.n	8000920 <AdjustThrust+0x48>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800091e:	e018      	b.n	8000952 <AdjustThrust+0x7a>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL, thrust);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b0c      	cmp	r3, #12
 8000926:	d105      	bne.n	8000934 <AdjustThrust+0x5c>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000932:	e00e      	b.n	8000952 <AdjustThrust+0x7a>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL, thrust);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b10      	cmp	r3, #16
 800093a:	d105      	bne.n	8000948 <AdjustThrust+0x70>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000946:	e004      	b.n	8000952 <AdjustThrust+0x7a>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL, thrust);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G;
	uint8_t thrust_D;

	if (angle<0){//On tourne a gauche
 8000970:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000974:	2b00      	cmp	r3, #0
 8000976:	da03      	bge.n	8000980 <AdjustAngle+0x20>
		thrust_G = thrust;
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>0){//On tourne a droite
 8000980:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dd03      	ble.n	8000990 <AdjustAngle+0x30>
		thrust_G = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <AdjustAngle+0x4c>)
 8000996:	f7ff ff9f 	bl	80008d8 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	4619      	mov	r1, r3
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <AdjustAngle+0x50>)
 80009a0:	f7ff ff9a 	bl	80008d8 <AdjustThrust>
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000000 	.word	0x24000000
 80009b0:	24000008 	.word	0x24000008

080009b4 <RPICom_Init>:
#include <RPICom.h>

//uint8_t uartRpiRxBuffer[UART_RPI_RX_BUFFER_SIZE];
//commandMsg binaryMessage;
RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <RPICom_Init+0x6c>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <RPICom_Init+0x6c>)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	6053      	str	r3, [r2, #4]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(commandMsg));
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <RPICom_Init+0x6c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	3308      	adds	r3, #8
 80009d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d4:	6018      	str	r0, [r3, #0]
 80009d6:	3304      	adds	r3, #4
 80009d8:	8019      	strh	r1, [r3, #0]
	hRPICom.errorNumber = 0;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <RPICom_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	739a      	strb	r2, [r3, #14]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <RPICom_Init+0x6c>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	f103 020f 	add.w	r2, r3, #15
 80009e8:	460b      	mov	r3, r1
 80009ea:	cb03      	ldmia	r3!, {r0, r1}
 80009ec:	6010      	str	r0, [r2, #0]
 80009ee:	6051      	str	r1, [r2, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	7213      	strb	r3, [r2, #8]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <RPICom_Init+0x6c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f103 0418 	add.w	r4, r3, #24
 80009fc:	4615      	mov	r5, r2
 80009fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RPICom_UartActivate(&hRPICom);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <RPICom_Init+0x6c>)
 8000a14:	f000 f806 	bl	8000a24 <RPICom_UartActivate>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a20:	240000a0 	.word	0x240000a0

08000a24 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	330f      	adds	r3, #15
 8000a34:	2209      	movs	r2, #9
 8000a36:	4619      	mov	r1, r3
 8000a38:	f005 fe74 	bl	8006724 <HAL_UART_Receive_IT>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <checkSum>:

uint8_t checkSum(void){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
	uint8_t checkSum = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	e00a      	b.n	8000a6a <checkSum+0x26>
		checkSum ^= hRPICom.RxBuffer[i];
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <checkSum+0x3c>)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	4413      	add	r3, r2
 8000a5a:	330f      	adds	r3, #15
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4053      	eors	r3, r2
 8000a62:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	ddf1      	ble.n	8000a54 <checkSum+0x10>
	}
	return checkSum;
 8000a70:	79fb      	ldrb	r3, [r7, #7]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	240000a0 	.word	0x240000a0

08000a84 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
	hRPICom.errorNumber = '0';
 8000a8a:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000a8c:	2230      	movs	r2, #48	; 0x30
 8000a8e:	739a      	strb	r2, [r3, #14]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000a90:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000a92:	7bdb      	ldrb	r3, [r3, #15]
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	d103      	bne.n	8000aa0 <RPICom_DecodeBinaryMessage+0x1c>
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000a9a:	7c1b      	ldrb	r3, [r3, #16]
 8000a9c:	2bfe      	cmp	r3, #254	; 0xfe
 8000a9e:	d002      	beq.n	8000aa6 <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumber ='1';
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000aa2:	2231      	movs	r2, #49	; 0x31
 8000aa4:	739a      	strb	r2, [r3, #14]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000aa8:	7c5b      	ldrb	r3, [r3, #17]
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	d002      	beq.n	8000ab4 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumber='2';
 8000aae:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ab0:	2232      	movs	r2, #50	; 0x32
 8000ab2:	739a      	strb	r2, [r3, #14]
	}
	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ab6:	7c9a      	ldrb	r2, [r3, #18]
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000aba:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000abe:	7cdb      	ldrb	r3, [r3, #19]
 8000ac0:	b25a      	sxtb	r2, r3
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ac4:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = ((uint16_t)hRPICom.RxBuffer[5]+(uint16_t)(hRPICom.RxBuffer[6]<<8));
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ac8:	7d1b      	ldrb	r3, [r3, #20]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ace:	7d5b      	ldrb	r3, [r3, #21]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000adc:	815a      	strh	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[7];
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ae0:	7d9a      	ldrb	r2, [r3, #22]
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ae4:	731a      	strb	r2, [r3, #12]

	//Checksum
	if(checkSum() !=  hRPICom.RxBuffer[8]){
 8000ae6:	f7ff ffad 	bl	8000a44 <checkSum>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000af0:	7ddb      	ldrb	r3, [r3, #23]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d002      	beq.n	8000afc <RPICom_DecodeBinaryMessage+0x78>
		hRPICom.errorNumber='3';
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000af8:	2233      	movs	r2, #51	; 0x33
 8000afa:	739a      	strb	r2, [r3, #14]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE, "Paquet: %u\r\nContenu: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.binaryMessage.thrust,hRPICom.errorNumber);
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000afe:	7b1b      	ldrb	r3, [r3, #12]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b04:	7a1b      	ldrb	r3, [r3, #8]
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b0a:	7b9b      	ldrb	r3, [r3, #14]
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	9200      	str	r2, [sp, #0]
 8000b10:	460b      	mov	r3, r1
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <RPICom_DecodeBinaryMessage+0xd4>)
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <RPICom_DecodeBinaryMessage+0xd8>)
 8000b18:	f008 fa84 	bl	8009024 <sniprintf>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
	hRPICom.TxBuffer[UART_RPI_TX_BUFFER_SIZE-1] = 0; //Securité de print
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.TxBuffer, stringLength, 10);
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b2a:	6858      	ldr	r0, [r3, #4]
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	230a      	movs	r3, #10
 8000b32:	490a      	ldr	r1, [pc, #40]	; (8000b5c <RPICom_DecodeBinaryMessage+0xd8>)
 8000b34:	f005 fd68 	bl	8006608 <HAL_UART_Transmit>
	RPICom_UartActivate(&hRPICom);
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b3a:	f7ff ff73 	bl	8000a24 <RPICom_UartActivate>

	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumber =='0'){
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b40:	7b9b      	ldrb	r3, [r3, #14]
 8000b42:	2b30      	cmp	r3, #48	; 0x30
 8000b44:	d102      	bne.n	8000b4c <RPICom_DecodeBinaryMessage+0xc8>
		Process(&hRPICom.binaryMessage);
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <RPICom_DecodeBinaryMessage+0xdc>)
 8000b48:	f7ff fea4 	bl	8000894 <Process>
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	240000a0 	.word	0x240000a0
 8000b58:	08009940 	.word	0x08009940
 8000b5c:	240000b8 	.word	0x240000b8
 8000b60:	240000a8 	.word	0x240000a8

08000b64 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b80      	ldr	r3, [pc, #512]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b80:	4a7e      	ldr	r2, [pc, #504]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8a:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
 8000b96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b98:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000b9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9e:	4a77      	ldr	r2, [pc, #476]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000ba0:	f043 0320 	orr.w	r3, r3, #32
 8000ba4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba8:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000baa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	4b71      	ldr	r3, [pc, #452]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000bb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bbc:	4a6f      	ldr	r2, [pc, #444]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc6:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000bc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000bd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bda:	4a68      	ldr	r2, [pc, #416]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be4:	4b65      	ldr	r3, [pc, #404]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000bf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf8:	4a60      	ldr	r2, [pc, #384]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c02:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c16:	4a59      	ldr	r2, [pc, #356]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c20:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2e:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c34:	4a51      	ldr	r2, [pc, #324]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c3e:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c52:	4a4a      	ldr	r2, [pc, #296]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c5c:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <MX_GPIO_Init+0x218>)
 8000c5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c70:	4843      	ldr	r0, [pc, #268]	; (8000d80 <MX_GPIO_Init+0x21c>)
 8000c72:	f001 fdb9 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c7c:	4841      	ldr	r0, [pc, #260]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000c7e:	f001 fdb3 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2102      	movs	r1, #2
 8000c86:	4840      	ldr	r0, [pc, #256]	; (8000d88 <MX_GPIO_Init+0x224>)
 8000c88:	f001 fdae 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	483a      	ldr	r0, [pc, #232]	; (8000d8c <MX_GPIO_Init+0x228>)
 8000ca2:	f001 fbf1 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4830      	ldr	r0, [pc, #192]	; (8000d80 <MX_GPIO_Init+0x21c>)
 8000cc0:	f001 fbe2 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cc4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4829      	ldr	r0, [pc, #164]	; (8000d84 <MX_GPIO_Init+0x220>)
 8000cde:	f001 fbd3 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4826      	ldr	r0, [pc, #152]	; (8000d90 <MX_GPIO_Init+0x22c>)
 8000cf8:	f001 fbc6 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4820      	ldr	r0, [pc, #128]	; (8000d94 <MX_GPIO_Init+0x230>)
 8000d12:	f001 fbb9 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d28:	230a      	movs	r3, #10
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4818      	ldr	r0, [pc, #96]	; (8000d94 <MX_GPIO_Init+0x230>)
 8000d34:	f001 fba8 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4810      	ldr	r0, [pc, #64]	; (8000d94 <MX_GPIO_Init+0x230>)
 8000d52:	f001 fb99 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_GPIO_Init+0x224>)
 8000d6e:	f001 fb8b 	bl	8002488 <HAL_GPIO_Init>

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58021400 	.word	0x58021400
 8000d84:	58020400 	.word	0x58020400
 8000d88:	58021000 	.word	0x58021000
 8000d8c:	58020800 	.word	0x58020800
 8000d90:	58021800 	.word	0x58021800
 8000d94:	58020000 	.word	0x58020000

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9c:	f000 fc4a 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da0:	f000 f830 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f7ff fede 	bl	8000b64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000da8:	f000 faca 	bl	8001340 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000dac:	f000 fc10 	bl	80015d0 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000db0:	f000 fa7a 	bl	80012a8 <MX_UART4_Init>
  MX_TIM2_Init();
 8000db4:	f000 f99e 	bl	80010f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "\nStarting...\r\n", 14, 10);
 8000db8:	230a      	movs	r3, #10
 8000dba:	220e      	movs	r2, #14
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <main+0x58>)
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <main+0x5c>)
 8000dc0:	f005 fc22 	bl	8006608 <HAL_UART_Transmit>
	Process_Init();
 8000dc4:	f7ff fd60 	bl	8000888 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 8000dc8:	490a      	ldr	r1, [pc, #40]	; (8000df4 <main+0x5c>)
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <main+0x60>)
 8000dcc:	f7ff fdf2 	bl	80009b4 <RPICom_Init>
	HAL_UART_Transmit(&huart3, "Init Done\r\n", 11, 10);
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	220b      	movs	r2, #11
 8000dd4:	4909      	ldr	r1, [pc, #36]	; (8000dfc <main+0x64>)
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <main+0x5c>)
 8000dd8:	f005 fc16 	bl	8006608 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <main+0x68>)
 8000de0:	f001 fd1b 	bl	800281a <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 8000de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de8:	f000 fcb6 	bl	8001758 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000dec:	e7f6      	b.n	8000ddc <main+0x44>
 8000dee:	bf00      	nop
 8000df0:	08009968 	.word	0x08009968
 8000df4:	240001dc 	.word	0x240001dc
 8000df8:	24000148 	.word	0x24000148
 8000dfc:	08009978 	.word	0x08009978
 8000e00:	58020400 	.word	0x58020400

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b09c      	sub	sp, #112	; 0x70
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	224c      	movs	r2, #76	; 0x4c
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f008 f8fe 	bl	8009014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f008 f8f8 	bl	8009014 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e24:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <SystemClock_Config+0xe4>)
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e2e:	2004      	movs	r0, #4
 8000e30:	f001 fd0e 	bl	8002850 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <SystemClock_Config+0xe8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a2b      	ldr	r2, [pc, #172]	; (8000eec <SystemClock_Config+0xe8>)
 8000e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <SystemClock_Config+0xe8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e50:	bf00      	nop
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <SystemClock_Config+0xe8>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e5e:	d1f8      	bne.n	8000e52 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e60:	2321      	movs	r3, #33	; 0x21
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e72:	2302      	movs	r3, #2
 8000e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000e7a:	2318      	movs	r3, #24
 8000e7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e82:	2304      	movs	r3, #4
 8000e84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fd32 	bl	8002904 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ea6:	f000 f823 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	233f      	movs	r3, #63	; 0x3f
 8000eac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2102      	movs	r1, #2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 f94a 	bl	8003168 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000eda:	f000 f809 	bl	8000ef0 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3770      	adds	r7, #112	; 0x70
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58024800 	.word	0x58024800

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x30>)
 8000f04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x30>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x30>)
 8000f14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	58024400 	.word	0x58024400

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 fbcc 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <UART4_IRQHandler+0x10>)
 8000f8a:	f005 fc17 	bl	80067bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	24000148 	.word	0x24000148

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f007 fffa 	bl	8008fc0 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	24100000 	.word	0x24100000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	240000f8 	.word	0x240000f8
 8001000:	24000288 	.word	0x24000288

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <SystemInit+0xd0>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <SystemInit+0xd0>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <SystemInit+0xd4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	2b02      	cmp	r3, #2
 8001022:	d807      	bhi.n	8001034 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <SystemInit+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 030f 	bic.w	r3, r3, #15
 800102c:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <SystemInit+0xd4>)
 800102e:	f043 0303 	orr.w	r3, r3, #3
 8001032:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <SystemInit+0xd8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a28      	ldr	r2, [pc, #160]	; (80010dc <SystemInit+0xd8>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <SystemInit+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <SystemInit+0xd8>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4924      	ldr	r1, [pc, #144]	; (80010dc <SystemInit+0xd8>)
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <SystemInit+0xdc>)
 800104e:	4013      	ands	r3, r2
 8001050:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <SystemInit+0xd4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <SystemInit+0xd4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 030f 	bic.w	r3, r3, #15
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <SystemInit+0xd4>)
 8001068:	f043 0303 	orr.w	r3, r3, #3
 800106c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <SystemInit+0xd8>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <SystemInit+0xd8>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <SystemInit+0xd8>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <SystemInit+0xd8>)
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <SystemInit+0xe0>)
 8001084:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <SystemInit+0xd8>)
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <SystemInit+0xe4>)
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <SystemInit+0xd8>)
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <SystemInit+0xe8>)
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <SystemInit+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <SystemInit+0xd8>)
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <SystemInit+0xe8>)
 800109c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <SystemInit+0xd8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <SystemInit+0xd8>)
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <SystemInit+0xe8>)
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <SystemInit+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <SystemInit+0xd8>)
 80010b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <SystemInit+0xd8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <SystemInit+0xec>)
 80010c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	52002000 	.word	0x52002000
 80010dc:	58024400 	.word	0x58024400
 80010e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010e4:	02020200 	.word	0x02020200
 80010e8:	01ff0000 	.word	0x01ff0000
 80010ec:	01010280 	.word	0x01010280
 80010f0:	52004000 	.word	0x52004000

080010f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <MX_TIM2_Init+0x100>)
 8001128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <MX_TIM2_Init+0x100>)
 8001130:	f240 727f 	movw	r2, #1919	; 0x77f
 8001134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <MX_TIM2_Init+0x100>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_TIM2_Init+0x100>)
 800113e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001142:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_TIM2_Init+0x100>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_TIM2_Init+0x100>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001150:	4828      	ldr	r0, [pc, #160]	; (80011f4 <MX_TIM2_Init+0x100>)
 8001152:	f004 f975 	bl	8005440 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800115c:	f7ff fec8 	bl	8000ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116a:	4619      	mov	r1, r3
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <MX_TIM2_Init+0x100>)
 800116e:	f004 fc41 	bl	80059f4 <HAL_TIM_ConfigClockSource>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001178:	f7ff feba 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800117c:	481d      	ldr	r0, [pc, #116]	; (80011f4 <MX_TIM2_Init+0x100>)
 800117e:	f004 f9b6 	bl	80054ee <HAL_TIM_PWM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001188:	f7ff feb2 	bl	8000ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <MX_TIM2_Init+0x100>)
 800119c:	f005 f956 	bl	800644c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80011a6:	f7ff fea3 	bl	8000ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	; 0x60
 80011ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_TIM2_Init+0x100>)
 80011c2:	f004 fb03 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80011cc:	f7ff fe90 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	2204      	movs	r2, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <MX_TIM2_Init+0x100>)
 80011d8:	f004 faf8 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80011e2:	f7ff fe85 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <MX_TIM2_Init+0x100>)
 80011e8:	f000 f826 	bl	8001238 <HAL_TIM_MspPostInit>

}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	; 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	240000fc 	.word	0x240000fc

080011f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001208:	d10e      	bne.n	8001228 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_TIM_Base_MspInit+0x3c>)
 800120c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001210:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_TIM_Base_MspInit+0x3c>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_TIM_Base_MspInit+0x3c>)
 800121c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	58024400 	.word	0x58024400

08001238 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d11e      	bne.n	8001298 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_TIM_MspPostInit+0x68>)
 800125c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_TIM_MspPostInit+0x68>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_TIM_MspPostInit+0x68>)
 800126c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001278:	2322      	movs	r3, #34	; 0x22
 800127a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001288:	2301      	movs	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <HAL_TIM_MspPostInit+0x6c>)
 8001294:	f001 f8f8 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58020000 	.word	0x58020000

080012a8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <MX_UART4_Init+0x90>)
 80012ae:	4a23      	ldr	r2, [pc, #140]	; (800133c <MX_UART4_Init+0x94>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <MX_UART4_Init+0x90>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <MX_UART4_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_UART4_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <MX_UART4_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_UART4_Init+0x90>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_UART4_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_UART4_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_UART4_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_UART4_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <MX_UART4_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012f0:	4811      	ldr	r0, [pc, #68]	; (8001338 <MX_UART4_Init+0x90>)
 80012f2:	f005 f939 	bl	8006568 <HAL_UART_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80012fc:	f7ff fdf8 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <MX_UART4_Init+0x90>)
 8001304:	f007 fd91 	bl	8008e2a <HAL_UARTEx_SetTxFifoThreshold>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800130e:	f7ff fdef 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001312:	2100      	movs	r1, #0
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <MX_UART4_Init+0x90>)
 8001316:	f007 fdc6 	bl	8008ea6 <HAL_UARTEx_SetRxFifoThreshold>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001320:	f7ff fde6 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_UART4_Init+0x90>)
 8001326:	f007 fd47 	bl	8008db8 <HAL_UARTEx_DisableFifoMode>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001330:	f7ff fdde 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24000148 	.word	0x24000148
 800133c:	40004c00 	.word	0x40004c00

08001340 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 8001346:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <MX_USART3_UART_Init+0x94>)
 8001348:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 800138a:	f005 f8ed 	bl	8006568 <HAL_UART_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001394:	f7ff fdac 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001398:	2100      	movs	r1, #0
 800139a:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 800139c:	f007 fd45 	bl	8008e2a <HAL_UARTEx_SetTxFifoThreshold>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013a6:	f7ff fda3 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 80013ae:	f007 fd7a 	bl	8008ea6 <HAL_UARTEx_SetRxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f7ff fd9a 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_USART3_UART_Init+0x90>)
 80013be:	f007 fcfb 	bl	8008db8 <HAL_UARTEx_DisableFifoMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f7ff fd92 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	240001dc 	.word	0x240001dc
 80013d4:	40004800 	.word	0x40004800

080013d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0be      	sub	sp, #248	; 0xf8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	22c0      	movs	r2, #192	; 0xc0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f007 fe0b 	bl	8009014 <memset>
  if(uartHandle->Instance==UART4)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a63      	ldr	r2, [pc, #396]	; (8001590 <HAL_UART_MspInit+0x1b8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d172      	bne.n	80014ee <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001408:	f04f 0202 	mov.w	r2, #2
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fa2e 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800142a:	f7ff fd61 	bl	8000ef0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800142e:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001430:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001434:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800143a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001440:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b51      	ldr	r3, [pc, #324]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 800144e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001452:	4a50      	ldr	r2, [pc, #320]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 800145e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 800146c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001470:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800147a:	4b46      	ldr	r3, [pc, #280]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 800147c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014a0:	2308      	movs	r3, #8
 80014a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014aa:	4619      	mov	r1, r3
 80014ac:	483a      	ldr	r0, [pc, #232]	; (8001598 <HAL_UART_MspInit+0x1c0>)
 80014ae:	f000 ffeb 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014ca:	2308      	movs	r3, #8
 80014cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <HAL_UART_MspInit+0x1c4>)
 80014d8:	f000 ffd6 	bl	8002488 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2034      	movs	r0, #52	; 0x34
 80014e2:	f000 fa38 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014e6:	2034      	movs	r0, #52	; 0x34
 80014e8:	f000 fa4f 	bl	800198a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014ec:	e04b      	b.n	8001586 <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a2b      	ldr	r2, [pc, #172]	; (80015a0 <HAL_UART_MspInit+0x1c8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d146      	bne.n	8001586 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014f8:	f04f 0202 	mov.w	r2, #2
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	4618      	mov	r0, r3
 8001510:	f002 f9b6 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0x146>
      Error_Handler();
 800151a:	f7ff fce9 	bl	8000ef0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001520:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001530:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 800153e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_UART_MspInit+0x1bc>)
 800154e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800155a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001574:	2307      	movs	r3, #7
 8001576:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800157e:	4619      	mov	r1, r3
 8001580:	4806      	ldr	r0, [pc, #24]	; (800159c <HAL_UART_MspInit+0x1c4>)
 8001582:	f000 ff81 	bl	8002488 <HAL_GPIO_Init>
}
 8001586:	bf00      	nop
 8001588:	37f8      	adds	r7, #248	; 0xf8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40004c00 	.word	0x40004c00
 8001594:	58024400 	.word	0x58024400
 8001598:	58020000 	.word	0x58020000
 800159c:	58020c00 	.word	0x58020c00
 80015a0:	40004800 	.word	0x40004800

080015a4 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <HAL_UART_RxCpltCallback+0x24>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d104      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 80015b6:	f7ff fa65 	bl	8000a84 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <HAL_UART_RxCpltCallback+0x28>)
 80015bc:	f7ff fa32 	bl	8000a24 <RPICom_UartActivate>
	}
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004c00 	.word	0x40004c00
 80015cc:	240000a0 	.word	0x240000a0

080015d0 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e4:	f7ff fd0e 	bl	8001004 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	; (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800160e:	f007 fcdd 	bl	8008fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fbc1 	bl	8000d98 <main>
  bx  lr
 8001616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800161c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001620:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001624:	08009a00 	.word	0x08009a00
  ldr r2, =_sbss
 8001628:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 800162c:	24000284 	.word	0x24000284

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f980 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001640:	f001 ff48 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8001644:	4602      	mov	r2, r0
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_Init+0x68>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	4913      	ldr	r1, [pc, #76]	; (80016a0 <HAL_Init+0x6c>)
 8001652:	5ccb      	ldrb	r3, [r1, r3]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_Init+0x6c>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_Init+0x70>)
 8001676:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_Init+0x74>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f814 	bl	80016ac <HAL_InitTick>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e002      	b.n	8001694 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800168e:	f7ff fc35 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58024400 	.word	0x58024400
 80016a0:	08009984 	.word	0x08009984
 80016a4:	24000014 	.word	0x24000014
 80016a8:	24000010 	.word	0x24000010

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_InitTick+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e021      	b.n	8001704 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_InitTick+0x64>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_InitTick+0x60>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f965 	bl	80019a6 <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f4:	f000 f92f 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x68>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2400001c 	.word	0x2400001c
 8001710:	24000010 	.word	0x24000010
 8001714:	24000018 	.word	0x24000018

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2400001c 	.word	0x2400001c
 800173c:	24000270 	.word	0x24000270

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	24000270 	.word	0x24000270

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2400001c 	.word	0x2400001c

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <__NVIC_SetPriorityGrouping+0x40>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x40>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00
 80017e4:	05fa0000 	.word	0x05fa0000

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff40 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff33 	bl	8001804 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa4 	bl	80018fc <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff feba 	bl	8001740 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e2dc      	b.n	8001f92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d008      	beq.n	80019f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e2cd      	b.n	8001f92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a76      	ldr	r2, [pc, #472]	; (8001bd4 <HAL_DMA_Abort+0x214>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d04a      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a74      	ldr	r2, [pc, #464]	; (8001bd8 <HAL_DMA_Abort+0x218>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d045      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a73      	ldr	r2, [pc, #460]	; (8001bdc <HAL_DMA_Abort+0x21c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d040      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a71      	ldr	r2, [pc, #452]	; (8001be0 <HAL_DMA_Abort+0x220>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d03b      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a70      	ldr	r2, [pc, #448]	; (8001be4 <HAL_DMA_Abort+0x224>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d036      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_DMA_Abort+0x228>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d031      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6d      	ldr	r2, [pc, #436]	; (8001bec <HAL_DMA_Abort+0x22c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d02c      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6b      	ldr	r2, [pc, #428]	; (8001bf0 <HAL_DMA_Abort+0x230>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d027      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_DMA_Abort+0x234>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d022      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a68      	ldr	r2, [pc, #416]	; (8001bf8 <HAL_DMA_Abort+0x238>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01d      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a67      	ldr	r2, [pc, #412]	; (8001bfc <HAL_DMA_Abort+0x23c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d018      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a65      	ldr	r2, [pc, #404]	; (8001c00 <HAL_DMA_Abort+0x240>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a64      	ldr	r2, [pc, #400]	; (8001c04 <HAL_DMA_Abort+0x244>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a62      	ldr	r2, [pc, #392]	; (8001c08 <HAL_DMA_Abort+0x248>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d009      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a61      	ldr	r2, [pc, #388]	; (8001c0c <HAL_DMA_Abort+0x24c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d004      	beq.n	8001a96 <HAL_DMA_Abort+0xd6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a5f      	ldr	r2, [pc, #380]	; (8001c10 <HAL_DMA_Abort+0x250>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_DMA_Abort+0xda>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_DMA_Abort+0xdc>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 021e 	bic.w	r2, r2, #30
 8001aae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001abe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e00a      	b.n	8001ade <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 020e 	bic.w	r2, r2, #14
 8001ad6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a3c      	ldr	r2, [pc, #240]	; (8001bd4 <HAL_DMA_Abort+0x214>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d072      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <HAL_DMA_Abort+0x218>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d06d      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <HAL_DMA_Abort+0x21c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d068      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a37      	ldr	r2, [pc, #220]	; (8001be0 <HAL_DMA_Abort+0x220>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d063      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <HAL_DMA_Abort+0x224>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d05e      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <HAL_DMA_Abort+0x228>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d059      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <HAL_DMA_Abort+0x22c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d054      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <HAL_DMA_Abort+0x230>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d04f      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <HAL_DMA_Abort+0x234>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04a      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <HAL_DMA_Abort+0x238>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d045      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <HAL_DMA_Abort+0x23c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d040      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <HAL_DMA_Abort+0x240>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d03b      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <HAL_DMA_Abort+0x244>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d036      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_DMA_Abort+0x248>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d031      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a27      	ldr	r2, [pc, #156]	; (8001c0c <HAL_DMA_Abort+0x24c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d02c      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a25      	ldr	r2, [pc, #148]	; (8001c10 <HAL_DMA_Abort+0x250>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d027      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <HAL_DMA_Abort+0x254>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_DMA_Abort+0x258>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01d      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_DMA_Abort+0x25c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d018      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_DMA_Abort+0x260>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_DMA_Abort+0x264>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00e      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_DMA_Abort+0x268>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_DMA_Abort+0x26c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_DMA_Abort+0x20e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_DMA_Abort+0x270>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d132      	bne.n	8001c34 <HAL_DMA_Abort+0x274>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e031      	b.n	8001c36 <HAL_DMA_Abort+0x276>
 8001bd2:	bf00      	nop
 8001bd4:	40020010 	.word	0x40020010
 8001bd8:	40020028 	.word	0x40020028
 8001bdc:	40020040 	.word	0x40020040
 8001be0:	40020058 	.word	0x40020058
 8001be4:	40020070 	.word	0x40020070
 8001be8:	40020088 	.word	0x40020088
 8001bec:	400200a0 	.word	0x400200a0
 8001bf0:	400200b8 	.word	0x400200b8
 8001bf4:	40020410 	.word	0x40020410
 8001bf8:	40020428 	.word	0x40020428
 8001bfc:	40020440 	.word	0x40020440
 8001c00:	40020458 	.word	0x40020458
 8001c04:	40020470 	.word	0x40020470
 8001c08:	40020488 	.word	0x40020488
 8001c0c:	400204a0 	.word	0x400204a0
 8001c10:	400204b8 	.word	0x400204b8
 8001c14:	58025408 	.word	0x58025408
 8001c18:	5802541c 	.word	0x5802541c
 8001c1c:	58025430 	.word	0x58025430
 8001c20:	58025444 	.word	0x58025444
 8001c24:	58025458 	.word	0x58025458
 8001c28:	5802546c 	.word	0x5802546c
 8001c2c:	58025480 	.word	0x58025480
 8001c30:	58025494 	.word	0x58025494
 8001c34:	2300      	movs	r3, #0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6d      	ldr	r2, [pc, #436]	; (8001e04 <HAL_DMA_Abort+0x444>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d04a      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6b      	ldr	r2, [pc, #428]	; (8001e08 <HAL_DMA_Abort+0x448>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d045      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6a      	ldr	r2, [pc, #424]	; (8001e0c <HAL_DMA_Abort+0x44c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d040      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <HAL_DMA_Abort+0x450>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d03b      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a67      	ldr	r2, [pc, #412]	; (8001e14 <HAL_DMA_Abort+0x454>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d036      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a65      	ldr	r2, [pc, #404]	; (8001e18 <HAL_DMA_Abort+0x458>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d031      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a64      	ldr	r2, [pc, #400]	; (8001e1c <HAL_DMA_Abort+0x45c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d02c      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a62      	ldr	r2, [pc, #392]	; (8001e20 <HAL_DMA_Abort+0x460>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d027      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a61      	ldr	r2, [pc, #388]	; (8001e24 <HAL_DMA_Abort+0x464>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a5f      	ldr	r2, [pc, #380]	; (8001e28 <HAL_DMA_Abort+0x468>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01d      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5e      	ldr	r2, [pc, #376]	; (8001e2c <HAL_DMA_Abort+0x46c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d018      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5c      	ldr	r2, [pc, #368]	; (8001e30 <HAL_DMA_Abort+0x470>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	; (8001e34 <HAL_DMA_Abort+0x474>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a59      	ldr	r2, [pc, #356]	; (8001e38 <HAL_DMA_Abort+0x478>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <HAL_DMA_Abort+0x47c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d004      	beq.n	8001cea <HAL_DMA_Abort+0x32a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <HAL_DMA_Abort+0x480>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d108      	bne.n	8001cfc <HAL_DMA_Abort+0x33c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e007      	b.n	8001d0c <HAL_DMA_Abort+0x34c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d0c:	e013      	b.n	8001d36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0e:	f7ff fd17 	bl	8001740 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d90c      	bls.n	8001d36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2203      	movs	r2, #3
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e12d      	b.n	8001f92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e5      	bne.n	8001d0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a2f      	ldr	r2, [pc, #188]	; (8001e04 <HAL_DMA_Abort+0x444>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d04a      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2d      	ldr	r2, [pc, #180]	; (8001e08 <HAL_DMA_Abort+0x448>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d045      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2c      	ldr	r2, [pc, #176]	; (8001e0c <HAL_DMA_Abort+0x44c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d040      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <HAL_DMA_Abort+0x450>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d03b      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_DMA_Abort+0x454>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d036      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <HAL_DMA_Abort+0x458>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d031      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <HAL_DMA_Abort+0x45c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d02c      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <HAL_DMA_Abort+0x460>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d027      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <HAL_DMA_Abort+0x464>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_DMA_Abort+0x468>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01d      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_DMA_Abort+0x46c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d018      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <HAL_DMA_Abort+0x470>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_DMA_Abort+0x474>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00e      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_DMA_Abort+0x478>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <HAL_DMA_Abort+0x47c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_DMA_Abort+0x422>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_DMA_Abort+0x480>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_DMA_Abort+0x426>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_DMA_Abort+0x428>
 8001de6:	2300      	movs	r3, #0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02b      	beq.n	8001e44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	223f      	movs	r2, #63	; 0x3f
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e02a      	b.n	8001e5a <HAL_DMA_Abort+0x49a>
 8001e04:	40020010 	.word	0x40020010
 8001e08:	40020028 	.word	0x40020028
 8001e0c:	40020040 	.word	0x40020040
 8001e10:	40020058 	.word	0x40020058
 8001e14:	40020070 	.word	0x40020070
 8001e18:	40020088 	.word	0x40020088
 8001e1c:	400200a0 	.word	0x400200a0
 8001e20:	400200b8 	.word	0x400200b8
 8001e24:	40020410 	.word	0x40020410
 8001e28:	40020428 	.word	0x40020428
 8001e2c:	40020440 	.word	0x40020440
 8001e30:	40020458 	.word	0x40020458
 8001e34:	40020470 	.word	0x40020470
 8001e38:	40020488 	.word	0x40020488
 8001e3c:	400204a0 	.word	0x400204a0
 8001e40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2201      	movs	r2, #1
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <HAL_DMA_Abort+0x5dc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d072      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a4d      	ldr	r2, [pc, #308]	; (8001fa0 <HAL_DMA_Abort+0x5e0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d06d      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <HAL_DMA_Abort+0x5e4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d068      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <HAL_DMA_Abort+0x5e8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d063      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a49      	ldr	r2, [pc, #292]	; (8001fac <HAL_DMA_Abort+0x5ec>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d05e      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <HAL_DMA_Abort+0x5f0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d059      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <HAL_DMA_Abort+0x5f4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d054      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a44      	ldr	r2, [pc, #272]	; (8001fb8 <HAL_DMA_Abort+0x5f8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d04f      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a43      	ldr	r2, [pc, #268]	; (8001fbc <HAL_DMA_Abort+0x5fc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04a      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a41      	ldr	r2, [pc, #260]	; (8001fc0 <HAL_DMA_Abort+0x600>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d045      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <HAL_DMA_Abort+0x604>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d040      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a3e      	ldr	r2, [pc, #248]	; (8001fc8 <HAL_DMA_Abort+0x608>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d03b      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a3d      	ldr	r2, [pc, #244]	; (8001fcc <HAL_DMA_Abort+0x60c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d036      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_DMA_Abort+0x610>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <HAL_DMA_Abort+0x614>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d02c      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a38      	ldr	r2, [pc, #224]	; (8001fd8 <HAL_DMA_Abort+0x618>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d027      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <HAL_DMA_Abort+0x61c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a35      	ldr	r2, [pc, #212]	; (8001fe0 <HAL_DMA_Abort+0x620>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01d      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <HAL_DMA_Abort+0x624>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d018      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <HAL_DMA_Abort+0x628>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a31      	ldr	r2, [pc, #196]	; (8001fec <HAL_DMA_Abort+0x62c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00e      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <HAL_DMA_Abort+0x630>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <HAL_DMA_Abort+0x634>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_DMA_Abort+0x58a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <HAL_DMA_Abort+0x638>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_DMA_Abort+0x58e>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_Abort+0x590>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40020010 	.word	0x40020010
 8001fa0:	40020028 	.word	0x40020028
 8001fa4:	40020040 	.word	0x40020040
 8001fa8:	40020058 	.word	0x40020058
 8001fac:	40020070 	.word	0x40020070
 8001fb0:	40020088 	.word	0x40020088
 8001fb4:	400200a0 	.word	0x400200a0
 8001fb8:	400200b8 	.word	0x400200b8
 8001fbc:	40020410 	.word	0x40020410
 8001fc0:	40020428 	.word	0x40020428
 8001fc4:	40020440 	.word	0x40020440
 8001fc8:	40020458 	.word	0x40020458
 8001fcc:	40020470 	.word	0x40020470
 8001fd0:	40020488 	.word	0x40020488
 8001fd4:	400204a0 	.word	0x400204a0
 8001fd8:	400204b8 	.word	0x400204b8
 8001fdc:	58025408 	.word	0x58025408
 8001fe0:	5802541c 	.word	0x5802541c
 8001fe4:	58025430 	.word	0x58025430
 8001fe8:	58025444 	.word	0x58025444
 8001fec:	58025458 	.word	0x58025458
 8001ff0:	5802546c 	.word	0x5802546c
 8001ff4:	58025480 	.word	0x58025480
 8001ff8:	58025494 	.word	0x58025494

08001ffc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e237      	b.n	800247e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d004      	beq.n	8002024 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e22c      	b.n	800247e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5c      	ldr	r2, [pc, #368]	; (800219c <HAL_DMA_Abort_IT+0x1a0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d04a      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5b      	ldr	r2, [pc, #364]	; (80021a0 <HAL_DMA_Abort_IT+0x1a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d045      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a59      	ldr	r2, [pc, #356]	; (80021a4 <HAL_DMA_Abort_IT+0x1a8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d040      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_DMA_Abort_IT+0x1ac>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d03b      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a56      	ldr	r2, [pc, #344]	; (80021ac <HAL_DMA_Abort_IT+0x1b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d036      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a55      	ldr	r2, [pc, #340]	; (80021b0 <HAL_DMA_Abort_IT+0x1b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d031      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a53      	ldr	r2, [pc, #332]	; (80021b4 <HAL_DMA_Abort_IT+0x1b8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02c      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_DMA_Abort_IT+0x1bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d027      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_DMA_Abort_IT+0x1c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d022      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_DMA_Abort_IT+0x1c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01d      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_DMA_Abort_IT+0x1c8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d018      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a4c      	ldr	r2, [pc, #304]	; (80021c8 <HAL_DMA_Abort_IT+0x1cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <HAL_DMA_Abort_IT+0x1d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00e      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a49      	ldr	r2, [pc, #292]	; (80021d0 <HAL_DMA_Abort_IT+0x1d4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_DMA_Abort_IT+0x1d8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <HAL_DMA_Abort_IT+0x1dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_DMA_Abort_IT+0xcc>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_DMA_Abort_IT+0xce>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8086 	beq.w	80021dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2204      	movs	r2, #4
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2f      	ldr	r2, [pc, #188]	; (800219c <HAL_DMA_Abort_IT+0x1a0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04a      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2e      	ldr	r2, [pc, #184]	; (80021a0 <HAL_DMA_Abort_IT+0x1a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d045      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2c      	ldr	r2, [pc, #176]	; (80021a4 <HAL_DMA_Abort_IT+0x1a8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d040      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2b      	ldr	r2, [pc, #172]	; (80021a8 <HAL_DMA_Abort_IT+0x1ac>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d03b      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <HAL_DMA_Abort_IT+0x1b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d036      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_DMA_Abort_IT+0x1b4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d031      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <HAL_DMA_Abort_IT+0x1b8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02c      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <HAL_DMA_Abort_IT+0x1bc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d027      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_DMA_Abort_IT+0x1c0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d022      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_DMA_Abort_IT+0x1c4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01d      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_DMA_Abort_IT+0x1c8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d018      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_DMA_Abort_IT+0x1cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_DMA_Abort_IT+0x1d0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00e      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_DMA_Abort_IT+0x1d4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_DMA_Abort_IT+0x1d8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_DMA_Abort_IT+0x17c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_DMA_Abort_IT+0x1dc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d108      	bne.n	800218a <HAL_DMA_Abort_IT+0x18e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e178      	b.n	800247c <HAL_DMA_Abort_IT+0x480>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e16f      	b.n	800247c <HAL_DMA_Abort_IT+0x480>
 800219c:	40020010 	.word	0x40020010
 80021a0:	40020028 	.word	0x40020028
 80021a4:	40020040 	.word	0x40020040
 80021a8:	40020058 	.word	0x40020058
 80021ac:	40020070 	.word	0x40020070
 80021b0:	40020088 	.word	0x40020088
 80021b4:	400200a0 	.word	0x400200a0
 80021b8:	400200b8 	.word	0x400200b8
 80021bc:	40020410 	.word	0x40020410
 80021c0:	40020428 	.word	0x40020428
 80021c4:	40020440 	.word	0x40020440
 80021c8:	40020458 	.word	0x40020458
 80021cc:	40020470 	.word	0x40020470
 80021d0:	40020488 	.word	0x40020488
 80021d4:	400204a0 	.word	0x400204a0
 80021d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 020e 	bic.w	r2, r2, #14
 80021ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6c      	ldr	r2, [pc, #432]	; (80023a4 <HAL_DMA_Abort_IT+0x3a8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d04a      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6b      	ldr	r2, [pc, #428]	; (80023a8 <HAL_DMA_Abort_IT+0x3ac>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d045      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_DMA_Abort_IT+0x3b0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d040      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a68      	ldr	r2, [pc, #416]	; (80023b0 <HAL_DMA_Abort_IT+0x3b4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d03b      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a66      	ldr	r2, [pc, #408]	; (80023b4 <HAL_DMA_Abort_IT+0x3b8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d036      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_DMA_Abort_IT+0x3bc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d031      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a63      	ldr	r2, [pc, #396]	; (80023bc <HAL_DMA_Abort_IT+0x3c0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02c      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a62      	ldr	r2, [pc, #392]	; (80023c0 <HAL_DMA_Abort_IT+0x3c4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d027      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d022      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <HAL_DMA_Abort_IT+0x3cc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d01d      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5d      	ldr	r2, [pc, #372]	; (80023cc <HAL_DMA_Abort_IT+0x3d0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d018      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5c      	ldr	r2, [pc, #368]	; (80023d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5a      	ldr	r2, [pc, #360]	; (80023d4 <HAL_DMA_Abort_IT+0x3d8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00e      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a59      	ldr	r2, [pc, #356]	; (80023d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d009      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a57      	ldr	r2, [pc, #348]	; (80023dc <HAL_DMA_Abort_IT+0x3e0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d004      	beq.n	800228c <HAL_DMA_Abort_IT+0x290>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <HAL_DMA_Abort_IT+0x3e4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <HAL_DMA_Abort_IT+0x2a2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e007      	b.n	80022ae <HAL_DMA_Abort_IT+0x2b2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3c      	ldr	r2, [pc, #240]	; (80023a4 <HAL_DMA_Abort_IT+0x3a8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d072      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_DMA_Abort_IT+0x3ac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d06d      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a39      	ldr	r2, [pc, #228]	; (80023ac <HAL_DMA_Abort_IT+0x3b0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d068      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a37      	ldr	r2, [pc, #220]	; (80023b0 <HAL_DMA_Abort_IT+0x3b4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d063      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a36      	ldr	r2, [pc, #216]	; (80023b4 <HAL_DMA_Abort_IT+0x3b8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d05e      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <HAL_DMA_Abort_IT+0x3bc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d059      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a33      	ldr	r2, [pc, #204]	; (80023bc <HAL_DMA_Abort_IT+0x3c0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d054      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_DMA_Abort_IT+0x3c4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04f      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d04a      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2e      	ldr	r2, [pc, #184]	; (80023c8 <HAL_DMA_Abort_IT+0x3cc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d045      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <HAL_DMA_Abort_IT+0x3d0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d040      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d03b      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <HAL_DMA_Abort_IT+0x3d8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d036      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d031      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_DMA_Abort_IT+0x3e0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d02c      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <HAL_DMA_Abort_IT+0x3e4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d027      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_DMA_Abort_IT+0x3e8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_DMA_Abort_IT+0x3ec>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a21      	ldr	r2, [pc, #132]	; (80023ec <HAL_DMA_Abort_IT+0x3f0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d018      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_DMA_Abort_IT+0x3f4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_DMA_Abort_IT+0x3f8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_DMA_Abort_IT+0x3fc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_DMA_Abort_IT+0x400>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_DMA_Abort_IT+0x3a2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_DMA_Abort_IT+0x404>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d132      	bne.n	8002404 <HAL_DMA_Abort_IT+0x408>
 800239e:	2301      	movs	r3, #1
 80023a0:	e031      	b.n	8002406 <HAL_DMA_Abort_IT+0x40a>
 80023a2:	bf00      	nop
 80023a4:	40020010 	.word	0x40020010
 80023a8:	40020028 	.word	0x40020028
 80023ac:	40020040 	.word	0x40020040
 80023b0:	40020058 	.word	0x40020058
 80023b4:	40020070 	.word	0x40020070
 80023b8:	40020088 	.word	0x40020088
 80023bc:	400200a0 	.word	0x400200a0
 80023c0:	400200b8 	.word	0x400200b8
 80023c4:	40020410 	.word	0x40020410
 80023c8:	40020428 	.word	0x40020428
 80023cc:	40020440 	.word	0x40020440
 80023d0:	40020458 	.word	0x40020458
 80023d4:	40020470 	.word	0x40020470
 80023d8:	40020488 	.word	0x40020488
 80023dc:	400204a0 	.word	0x400204a0
 80023e0:	400204b8 	.word	0x400204b8
 80023e4:	58025408 	.word	0x58025408
 80023e8:	5802541c 	.word	0x5802541c
 80023ec:	58025430 	.word	0x58025430
 80023f0:	58025444 	.word	0x58025444
 80023f4:	58025458 	.word	0x58025458
 80023f8:	5802546c 	.word	0x5802546c
 80023fc:	58025480 	.word	0x58025480
 8002400:	58025494 	.word	0x58025494
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002418:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2201      	movs	r2, #1
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002438:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00c      	beq.n	800245c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002450:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800245a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002496:	4b89      	ldr	r3, [pc, #548]	; (80026bc <HAL_GPIO_Init+0x234>)
 8002498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800249a:	e194      	b.n	80027c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8186 	beq.w	80027c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d005      	beq.n	80024cc <HAL_GPIO_Init+0x44>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d130      	bne.n	800252e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002502:	2201      	movs	r2, #1
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0201 	and.w	r2, r3, #1
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d017      	beq.n	800256a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d123      	bne.n	80025be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	69b9      	ldr	r1, [r7, #24]
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80e0 	beq.w	80027c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_GPIO_Init+0x238>)
 8002602:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <HAL_GPIO_Init+0x238>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_GPIO_Init+0x238>)
 8002612:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <HAL_GPIO_Init+0x23c>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <HAL_GPIO_Init+0x240>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d052      	beq.n	80026f0 <HAL_GPIO_Init+0x268>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_GPIO_Init+0x244>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d031      	beq.n	80026b6 <HAL_GPIO_Init+0x22e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <HAL_GPIO_Init+0x248>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d02b      	beq.n	80026b2 <HAL_GPIO_Init+0x22a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_GPIO_Init+0x24c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d025      	beq.n	80026ae <HAL_GPIO_Init+0x226>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_GPIO_Init+0x250>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01f      	beq.n	80026aa <HAL_GPIO_Init+0x222>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_GPIO_Init+0x254>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d019      	beq.n	80026a6 <HAL_GPIO_Init+0x21e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_GPIO_Init+0x258>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x21a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_GPIO_Init+0x25c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x216>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_GPIO_Init+0x260>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x212>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <HAL_GPIO_Init+0x264>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x20e>
 8002692:	2309      	movs	r3, #9
 8002694:	e02d      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 8002696:	230a      	movs	r3, #10
 8002698:	e02b      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 800269a:	2308      	movs	r3, #8
 800269c:	e029      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 800269e:	2307      	movs	r3, #7
 80026a0:	e027      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 80026a2:	2306      	movs	r3, #6
 80026a4:	e025      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e023      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e021      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e01f      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e01d      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e01b      	b.n	80026f2 <HAL_GPIO_Init+0x26a>
 80026ba:	bf00      	nop
 80026bc:	58000080 	.word	0x58000080
 80026c0:	58024400 	.word	0x58024400
 80026c4:	58000400 	.word	0x58000400
 80026c8:	58020000 	.word	0x58020000
 80026cc:	58020400 	.word	0x58020400
 80026d0:	58020800 	.word	0x58020800
 80026d4:	58020c00 	.word	0x58020c00
 80026d8:	58021000 	.word	0x58021000
 80026dc:	58021400 	.word	0x58021400
 80026e0:	58021800 	.word	0x58021800
 80026e4:	58021c00 	.word	0x58021c00
 80026e8:	58022000 	.word	0x58022000
 80026ec:	58022400 	.word	0x58022400
 80026f0:	2300      	movs	r3, #0
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	f002 0203 	and.w	r2, r2, #3
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	4093      	lsls	r3, r2
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002702:	4938      	ldr	r1, [pc, #224]	; (80027e4 <HAL_GPIO_Init+0x35c>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800273e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3301      	adds	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f47f ae63 	bne.w	800249c <HAL_GPIO_Init+0x14>
  }
}
 80027d6:	bf00      	nop
 80027d8:	bf00      	nop
 80027da:	3724      	adds	r7, #36	; 0x24
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	58000400 	.word	0x58000400

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800282c:	887a      	ldrh	r2, [r7, #2]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	041a      	lsls	r2, r3, #16
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43d9      	mvns	r1, r3
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	400b      	ands	r3, r1
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002858:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_PWREx_ConfigSupply+0xb0>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	2b06      	cmp	r3, #6
 8002862:	d00a      	beq.n	800287a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002864:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_PWREx_ConfigSupply+0xb0>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e040      	b.n	80028f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e03e      	b.n	80028f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_PWREx_ConfigSupply+0xb0>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002882:	491f      	ldr	r1, [pc, #124]	; (8002900 <HAL_PWREx_ConfigSupply+0xb0>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4313      	orrs	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800288a:	f7fe ff59 	bl	8001740 <HAL_GetTick>
 800288e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002890:	e009      	b.n	80028a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002892:	f7fe ff55 	bl	8001740 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a0:	d901      	bls.n	80028a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e028      	b.n	80028f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_PWREx_ConfigSupply+0xb0>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b2:	d1ee      	bne.n	8002892 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b1e      	cmp	r3, #30
 80028b8:	d008      	beq.n	80028cc <HAL_PWREx_ConfigSupply+0x7c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b2e      	cmp	r3, #46	; 0x2e
 80028be:	d005      	beq.n	80028cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b1d      	cmp	r3, #29
 80028c4:	d002      	beq.n	80028cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b2d      	cmp	r3, #45	; 0x2d
 80028ca:	d114      	bne.n	80028f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028cc:	f7fe ff38 	bl	8001740 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028d2:	e009      	b.n	80028e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028d4:	f7fe ff34 	bl	8001740 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e2:	d901      	bls.n	80028e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e007      	b.n	80028f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d1ee      	bne.n	80028d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	58024800 	.word	0x58024800

08002904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f000 bc1f 	b.w	8003156 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80b3 	beq.w	8002a8c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002926:	4b95      	ldr	r3, [pc, #596]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002930:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	2b10      	cmp	r3, #16
 800293a:	d007      	beq.n	800294c <HAL_RCC_OscConfig+0x48>
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	2b18      	cmp	r3, #24
 8002940:	d112      	bne.n	8002968 <HAL_RCC_OscConfig+0x64>
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d10d      	bne.n	8002968 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b8b      	ldr	r3, [pc, #556]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8098 	beq.w	8002a8a <HAL_RCC_OscConfig+0x186>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8093 	bne.w	8002a8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e3f6      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d106      	bne.n	8002980 <HAL_RCC_OscConfig+0x7c>
 8002972:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e058      	b.n	8002a32 <HAL_RCC_OscConfig+0x12e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d112      	bne.n	80029ae <HAL_RCC_OscConfig+0xaa>
 8002988:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a7b      	ldr	r2, [pc, #492]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a78      	ldr	r2, [pc, #480]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 800299a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a75      	ldr	r2, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e041      	b.n	8002a32 <HAL_RCC_OscConfig+0x12e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b6:	d112      	bne.n	80029de <HAL_RCC_OscConfig+0xda>
 80029b8:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a6f      	ldr	r2, [pc, #444]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6c      	ldr	r2, [pc, #432]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a69      	ldr	r2, [pc, #420]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e029      	b.n	8002a32 <HAL_RCC_OscConfig+0x12e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80029e6:	d112      	bne.n	8002a0e <HAL_RCC_OscConfig+0x10a>
 80029e8:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a63      	ldr	r2, [pc, #396]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b61      	ldr	r3, [pc, #388]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a60      	ldr	r2, [pc, #384]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 80029fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e011      	b.n	8002a32 <HAL_RCC_OscConfig+0x12e>
 8002a0e:	4b5b      	ldr	r3, [pc, #364]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b58      	ldr	r3, [pc, #352]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b55      	ldr	r3, [pc, #340]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a54      	ldr	r2, [pc, #336]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d013      	beq.n	8002a62 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fe81 	bl	8001740 <HAL_GetTick>
 8002a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a42:	f7fe fe7d 	bl	8001740 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b64      	cmp	r3, #100	; 0x64
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e380      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a54:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13e>
 8002a60:	e014      	b.n	8002a8c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe fe6d 	bl	8001740 <HAL_GetTick>
 8002a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6a:	f7fe fe69 	bl	8001740 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	; 0x64
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e36c      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x166>
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 808c 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x1bc>
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2b18      	cmp	r3, #24
 8002ab4:	d137      	bne.n	8002b26 <HAL_RCC_OscConfig+0x222>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d132      	bne.n	8002b26 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x1d4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e33e      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f023 0219 	bic.w	r2, r3, #25
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4925      	ldr	r1, [pc, #148]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fe29 	bl	8001740 <HAL_GetTick>
 8002aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fe fe25 	bl	8001740 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e328      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	4917      	ldr	r1, [pc, #92]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b24:	e045      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d028      	beq.n	8002b80 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0219 	bic.w	r2, r3, #25
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4910      	ldr	r1, [pc, #64]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fdfe 	bl	8001740 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fe fdfa 	bl	8001740 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e2fd      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	061b      	lsls	r3, r3, #24
 8002b74:	4901      	ldr	r1, [pc, #4]	; (8002b7c <HAL_RCC_OscConfig+0x278>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
 8002b7a:	e01a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2ae>
 8002b7c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b80:	4b97      	ldr	r3, [pc, #604]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a96      	ldr	r2, [pc, #600]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fdd8 	bl	8001740 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe fdd4 	bl	8001740 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e2d7      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ba6:	4b8e      	ldr	r3, [pc, #568]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06a      	beq.n	8002c94 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bc8:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d007      	beq.n	8002be4 <HAL_RCC_OscConfig+0x2e0>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b18      	cmp	r3, #24
 8002bd8:	d11b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x30e>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d116      	bne.n	8002c12 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002be4:	4b7e      	ldr	r3, [pc, #504]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2f8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e2ac      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bfc:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	4975      	ldr	r1, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c10:	e040      	b.n	8002c94 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d023      	beq.n	8002c62 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c1a:	4b71      	ldr	r3, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fd8b 	bl	8001740 <HAL_GetTick>
 8002c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fd87 	bl	8001740 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e28a      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c40:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	4961      	ldr	r1, [pc, #388]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60cb      	str	r3, [r1, #12]
 8002c60:	e018      	b.n	8002c94 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5e      	ldr	r2, [pc, #376]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fd67 	bl	8001740 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c76:	f7fe fd63 	bl	8001740 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e266      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c88:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d036      	beq.n	8002d0e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cac:	4a4c      	ldr	r2, [pc, #304]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fd44 	bl	8001740 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fd40 	bl	8001740 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e243      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cce:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x3b8>
 8002cda:	e018      	b.n	8002d0e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fd2a 	bl	8001740 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fd26 	bl	8001740 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e229      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d036      	beq.n	8002d88 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d019      	beq.n	8002d56 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fd07 	bl	8001740 <HAL_GetTick>
 8002d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d36:	f7fe fd03 	bl	8001740 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e206      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x432>
 8002d54:	e018      	b.n	8002d88 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d62:	f7fe fced 	bl	8001740 <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6a:	f7fe fce9 	bl	8001740 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1ec      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80af 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCC_OscConfig+0x4e0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <HAL_RCC_OscConfig+0x4e0>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da2:	f7fe fccd 	bl	8001740 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fe fcc9 	bl	8001740 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b64      	cmp	r3, #100	; 0x64
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1cc      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_OscConfig+0x4e0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10b      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4e4>
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a02      	ldr	r2, [pc, #8]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	e05b      	b.n	8002e96 <HAL_RCC_OscConfig+0x592>
 8002dde:	bf00      	nop
 8002de0:	58024400 	.word	0x58024400
 8002de4:	58024800 	.word	0x58024800
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d112      	bne.n	8002e16 <HAL_RCC_OscConfig+0x512>
 8002df0:	4b9d      	ldr	r3, [pc, #628]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a9c      	ldr	r2, [pc, #624]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	4b9a      	ldr	r3, [pc, #616]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a99      	ldr	r2, [pc, #612]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	4b97      	ldr	r3, [pc, #604]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	4a96      	ldr	r2, [pc, #600]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e0e:	f023 0304 	bic.w	r3, r3, #4
 8002e12:	6713      	str	r3, [r2, #112]	; 0x70
 8002e14:	e03f      	b.n	8002e96 <HAL_RCC_OscConfig+0x592>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d112      	bne.n	8002e44 <HAL_RCC_OscConfig+0x540>
 8002e1e:	4b92      	ldr	r3, [pc, #584]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a91      	ldr	r2, [pc, #580]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	4b8f      	ldr	r3, [pc, #572]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a8e      	ldr	r2, [pc, #568]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
 8002e36:	4b8c      	ldr	r3, [pc, #560]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a8b      	ldr	r2, [pc, #556]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	e028      	b.n	8002e96 <HAL_RCC_OscConfig+0x592>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b85      	cmp	r3, #133	; 0x85
 8002e4a:	d112      	bne.n	8002e72 <HAL_RCC_OscConfig+0x56e>
 8002e4c:	4b86      	ldr	r3, [pc, #536]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a85      	ldr	r2, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	4b83      	ldr	r3, [pc, #524]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a82      	ldr	r2, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	4b80      	ldr	r3, [pc, #512]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a7f      	ldr	r2, [pc, #508]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e011      	b.n	8002e96 <HAL_RCC_OscConfig+0x592>
 8002e72:	4b7d      	ldr	r3, [pc, #500]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a7c      	ldr	r2, [pc, #496]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a79      	ldr	r2, [pc, #484]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	4b77      	ldr	r3, [pc, #476]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a76      	ldr	r2, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d015      	beq.n	8002eca <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fc4f 	bl	8001740 <HAL_GetTick>
 8002ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fc4b 	bl	8001740 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e14c      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ebc:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x5a2>
 8002ec8:	e014      	b.n	8002ef4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe fc39 	bl	8001740 <HAL_GetTick>
 8002ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fc35 	bl	8001740 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e136      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ee8:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 812b 	beq.w	8003154 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002efe:	4b5a      	ldr	r3, [pc, #360]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f06:	2b18      	cmp	r3, #24
 8002f08:	f000 80bb 	beq.w	8003082 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f040 8095 	bne.w	8003040 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b54      	ldr	r3, [pc, #336]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a53      	ldr	r2, [pc, #332]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fc0d 	bl	8001740 <HAL_GetTick>
 8002f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fc09 	bl	8001740 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e10c      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f48:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_OscConfig+0x768>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	4942      	ldr	r1, [pc, #264]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	628b      	str	r3, [r1, #40]	; 0x28
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	3b01      	subs	r3, #1
 8002f72:	025b      	lsls	r3, r3, #9
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f92:	4935      	ldr	r1, [pc, #212]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	4a32      	ldr	r2, [pc, #200]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fb0:	00d2      	lsls	r2, r2, #3
 8002fb2:	492d      	ldr	r1, [pc, #180]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f023 020c 	bic.w	r2, r3, #12
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	4928      	ldr	r1, [pc, #160]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fca:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f023 0202 	bic.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4924      	ldr	r1, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8002ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fb92 	bl	8001740 <HAL_GetTick>
 800301c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fb8e 	bl	8001740 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e091      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x71c>
 800303e:	e089      	b.n	8003154 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_RCC_OscConfig+0x764>)
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fb78 	bl	8001740 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003052:	e00f      	b.n	8003074 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe fb74 	bl	8001740 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d908      	bls.n	8003074 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e077      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
 800306c:	fffffc0c 	.word	0xfffffc0c
 8003070:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e9      	bne.n	8003054 <HAL_RCC_OscConfig+0x750>
 8003080:	e068      	b.n	8003154 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b01      	cmp	r3, #1
 8003094:	d031      	beq.n	80030fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0203 	and.w	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d12a      	bne.n	80030fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d122      	bne.n	80030fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d11a      	bne.n	80030fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	0a5b      	lsrs	r3, r3, #9
 80030c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d111      	bne.n	80030fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d108      	bne.n	80030fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0e1b      	lsrs	r3, r3, #24
 80030ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e02b      	b.n	8003156 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	08db      	lsrs	r3, r3, #3
 8003104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003108:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	429a      	cmp	r2, r3
 8003112:	d01f      	beq.n	8003154 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a11      	ldr	r2, [pc, #68]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003120:	f7fe fb0e 	bl	8001740 <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003126:	bf00      	nop
 8003128:	f7fe fb0a 	bl	8001740 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	4293      	cmp	r3, r2
 8003132:	d0f9      	beq.n	8003128 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_OscConfig+0x860>)
 800313a:	4013      	ands	r3, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	4907      	ldr	r1, [pc, #28]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 8003144:	4313      	orrs	r3, r2
 8003146:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_RCC_OscConfig+0x85c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	; 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	58024400 	.word	0x58024400
 8003164:	ffff0007 	.word	0xffff0007

08003168 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e19c      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800317c:	4b8a      	ldr	r3, [pc, #552]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d910      	bls.n	80031ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b87      	ldr	r3, [pc, #540]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 020f 	bic.w	r2, r3, #15
 8003192:	4985      	ldr	r1, [pc, #532]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b83      	ldr	r3, [pc, #524]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e184      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	4b7b      	ldr	r3, [pc, #492]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d908      	bls.n	80031da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031c8:	4b78      	ldr	r3, [pc, #480]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	4975      	ldr	r1, [pc, #468]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d010      	beq.n	8003208 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	4b70      	ldr	r3, [pc, #448]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d908      	bls.n	8003208 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031f6:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	496a      	ldr	r1, [pc, #424]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003204:	4313      	orrs	r3, r2
 8003206:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	4b64      	ldr	r3, [pc, #400]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003220:	429a      	cmp	r2, r3
 8003222:	d908      	bls.n	8003236 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003224:	4b61      	ldr	r3, [pc, #388]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	495e      	ldr	r1, [pc, #376]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003232:	4313      	orrs	r3, r2
 8003234:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d010      	beq.n	8003264 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800324e:	429a      	cmp	r2, r3
 8003250:	d908      	bls.n	8003264 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003252:	4b56      	ldr	r3, [pc, #344]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4953      	ldr	r1, [pc, #332]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003260:	4313      	orrs	r3, r2
 8003262:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	429a      	cmp	r2, r3
 800327e:	d908      	bls.n	8003292 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f023 020f 	bic.w	r2, r3, #15
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4947      	ldr	r1, [pc, #284]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 800328e:	4313      	orrs	r3, r2
 8003290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d055      	beq.n	800334a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800329e:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4940      	ldr	r1, [pc, #256]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d121      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0f6      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032d0:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d115      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0ea      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0de      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0d6      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f023 0207 	bic.w	r2, r3, #7
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4925      	ldr	r1, [pc, #148]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003316:	4313      	orrs	r3, r2
 8003318:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331a:	f7fe fa11 	bl	8001740 <HAL_GetTick>
 800331e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	e00a      	b.n	8003338 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003322:	f7fe fa0d 	bl	8001740 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0be      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	429a      	cmp	r2, r3
 8003348:	d1eb      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b14      	ldr	r3, [pc, #80]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	429a      	cmp	r2, r3
 8003364:	d208      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	490e      	ldr	r1, [pc, #56]	; (80033ac <HAL_RCC_ClockConfig+0x244>)
 8003374:	4313      	orrs	r3, r2
 8003376:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d214      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 020f 	bic.w	r2, r3, #15
 800338e:	4906      	ldr	r1, [pc, #24]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_ClockConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e086      	b.n	80034b6 <HAL_RCC_ClockConfig+0x34e>
 80033a8:	52002000 	.word	0x52002000
 80033ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d208      	bcs.n	80033de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033cc:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	4939      	ldr	r1, [pc, #228]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d208      	bcs.n	800340c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033fa:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	492e      	ldr	r1, [pc, #184]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 8003408:	4313      	orrs	r3, r2
 800340a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003424:	429a      	cmp	r2, r3
 8003426:	d208      	bcs.n	800343a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	4922      	ldr	r1, [pc, #136]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 8003436:	4313      	orrs	r3, r2
 8003438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d010      	beq.n	8003468 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003452:	429a      	cmp	r2, r3
 8003454:	d208      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4917      	ldr	r1, [pc, #92]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 8003464:	4313      	orrs	r3, r2
 8003466:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003468:	f000 f834 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	4912      	ldr	r1, [pc, #72]	; (80034c4 <HAL_RCC_ClockConfig+0x35c>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_RCC_ClockConfig+0x358>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <HAL_RCC_ClockConfig+0x35c>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
 800349c:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <HAL_RCC_ClockConfig+0x360>)
 800349e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034a0:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x364>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_RCC_ClockConfig+0x368>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe f8fe 	bl	80016ac <HAL_InitTick>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	58024400 	.word	0x58024400
 80034c4:	08009984 	.word	0x08009984
 80034c8:	24000014 	.word	0x24000014
 80034cc:	24000010 	.word	0x24000010
 80034d0:	24000018 	.word	0x24000018

080034d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034da:	4bb3      	ldr	r3, [pc, #716]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e2:	2b18      	cmp	r3, #24
 80034e4:	f200 8155 	bhi.w	8003792 <HAL_RCC_GetSysClockFreq+0x2be>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003555 	.word	0x08003555
 80034f4:	08003793 	.word	0x08003793
 80034f8:	08003793 	.word	0x08003793
 80034fc:	08003793 	.word	0x08003793
 8003500:	08003793 	.word	0x08003793
 8003504:	08003793 	.word	0x08003793
 8003508:	08003793 	.word	0x08003793
 800350c:	08003793 	.word	0x08003793
 8003510:	0800357b 	.word	0x0800357b
 8003514:	08003793 	.word	0x08003793
 8003518:	08003793 	.word	0x08003793
 800351c:	08003793 	.word	0x08003793
 8003520:	08003793 	.word	0x08003793
 8003524:	08003793 	.word	0x08003793
 8003528:	08003793 	.word	0x08003793
 800352c:	08003793 	.word	0x08003793
 8003530:	08003581 	.word	0x08003581
 8003534:	08003793 	.word	0x08003793
 8003538:	08003793 	.word	0x08003793
 800353c:	08003793 	.word	0x08003793
 8003540:	08003793 	.word	0x08003793
 8003544:	08003793 	.word	0x08003793
 8003548:	08003793 	.word	0x08003793
 800354c:	08003793 	.word	0x08003793
 8003550:	08003587 	.word	0x08003587
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003554:	4b94      	ldr	r3, [pc, #592]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003560:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	4a90      	ldr	r2, [pc, #576]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003572:	e111      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003574:	4b8d      	ldr	r3, [pc, #564]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003576:	61bb      	str	r3, [r7, #24]
      break;
 8003578:	e10e      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800357a:	4b8d      	ldr	r3, [pc, #564]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800357c:	61bb      	str	r3, [r7, #24]
      break;
 800357e:	e10b      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003580:	4b8c      	ldr	r3, [pc, #560]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003582:	61bb      	str	r3, [r7, #24]
      break;
 8003584:	e108      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003590:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800359c:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035a6:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	08db      	lsrs	r3, r3, #3
 80035ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80e1 	beq.w	800378c <HAL_RCC_GetSysClockFreq+0x2b8>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	f000 8083 	beq.w	80036d8 <HAL_RCC_GetSysClockFreq+0x204>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	f200 80a1 	bhi.w	800371c <HAL_RCC_GetSysClockFreq+0x248>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x114>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d056      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035e6:	e099      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02d      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035f4:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	4a6b      	ldr	r2, [pc, #428]	; (80037ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003632:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800364e:	e087      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a02 	vldr	s12, [r7, #8]
 8003676:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003692:	e065      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a6:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036d6:	e043      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800371a:	e021      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003742:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800375e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	0a5b      	lsrs	r3, r3, #9
 8003766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376a:	3301      	adds	r3, #1
 800376c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003778:	edd7 6a07 	vldr	s13, [r7, #28]
 800377c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003784:	ee17 3a90 	vmov	r3, s15
 8003788:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800378a:	e005      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
      break;
 8003790:	e002      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003794:	61bb      	str	r3, [r7, #24]
      break;
 8003796:	bf00      	nop
  }

  return sysclockfreq;
 8003798:	69bb      	ldr	r3, [r7, #24]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	58024400 	.word	0x58024400
 80037ac:	03d09000 	.word	0x03d09000
 80037b0:	003d0900 	.word	0x003d0900
 80037b4:	007a1200 	.word	0x007a1200
 80037b8:	46000000 	.word	0x46000000
 80037bc:	4c742400 	.word	0x4c742400
 80037c0:	4a742400 	.word	0x4a742400
 80037c4:	4af42400 	.word	0x4af42400

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80037ce:	f7ff fe81 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_RCC_GetHCLKFreq+0x50>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490f      	ldr	r1, [pc, #60]	; (800381c <HAL_RCC_GetHCLKFreq+0x54>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_RCC_GetHCLKFreq+0x50>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_RCC_GetHCLKFreq+0x54>)
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <HAL_RCC_GetHCLKFreq+0x58>)
 8003804:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003806:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <HAL_RCC_GetHCLKFreq+0x58>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	58024400 	.word	0x58024400
 800381c:	08009984 	.word	0x08009984
 8003820:	24000014 	.word	0x24000014
 8003824:	24000010 	.word	0x24000010

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800382c:	f7ff ffcc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	58024400 	.word	0x58024400
 8003850:	08009984 	.word	0x08009984

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003858:	f7ff ffb6 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_RCC_GetPCLK2Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	58024400 	.word	0x58024400
 800387c:	08009984 	.word	0x08009984

08003880 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b0c8      	sub	sp, #288	; 0x120
 8003886:	af00      	add	r7, sp, #0
 8003888:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800388c:	2300      	movs	r3, #0
 800388e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003892:	2300      	movs	r3, #0
 8003894:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80038a4:	2500      	movs	r5, #0
 80038a6:	ea54 0305 	orrs.w	r3, r4, r5
 80038aa:	d049      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80038ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b6:	d02f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80038b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038bc:	d828      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c2:	d01a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c8:	d822      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d2:	d007      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038d4:	e01c      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d6:	4ba7      	ldr	r3, [pc, #668]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	4aa6      	ldr	r2, [pc, #664]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038e2:	e01a      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	3308      	adds	r3, #8
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fc43 	bl	8005178 <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038f8:	e00f      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fe:	3328      	adds	r3, #40	; 0x28
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fcea 	bl	80052dc <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800390e:	e004      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003916:	e000      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003922:	4b94      	ldr	r3, [pc, #592]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003930:	4a90      	ldr	r2, [pc, #576]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003932:	430b      	orrs	r3, r1
 8003934:	6513      	str	r3, [r2, #80]	; 0x50
 8003936:	e003      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800393c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800394c:	f04f 0900 	mov.w	r9, #0
 8003950:	ea58 0309 	orrs.w	r3, r8, r9
 8003954:	d047      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	2b04      	cmp	r3, #4
 800395e:	d82a      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	0800397d 	.word	0x0800397d
 800396c:	0800398b 	.word	0x0800398b
 8003970:	080039a1 	.word	0x080039a1
 8003974:	080039bf 	.word	0x080039bf
 8003978:	080039bf 	.word	0x080039bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397c:	4b7d      	ldr	r3, [pc, #500]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	4a7c      	ldr	r2, [pc, #496]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003988:	e01a      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800398a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800398e:	3308      	adds	r3, #8
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f001 fbf0 	bl	8005178 <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800399e:	e00f      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a4:	3328      	adds	r3, #40	; 0x28
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 fc97 	bl	80052dc <RCCEx_PLL3_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039b4:	e004      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80039be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	f023 0107 	bic.w	r1, r3, #7
 80039d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	4a67      	ldr	r2, [pc, #412]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d8:	430b      	orrs	r3, r1
 80039da:	6513      	str	r3, [r2, #80]	; 0x50
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80039e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80039f2:	f04f 0b00 	mov.w	fp, #0
 80039f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80039fa:	d054      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80039fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003a06:	d036      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003a08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003a0c:	d82f      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d032      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a18:	d829      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a1c:	d02f      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a20:	d825      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d018      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003a26:	2b80      	cmp	r3, #128	; 0x80
 8003a28:	d821      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d007      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003a32:	e01c      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003a40:	e01e      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a46:	3308      	adds	r3, #8
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fb94 	bl	8005178 <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003a56:	e013      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5c:	3328      	adds	r3, #40	; 0x28
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fc3b 	bl	80052dc <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003a6c:	e008      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	4a37      	ldr	r2, [pc, #220]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6513      	str	r3, [r2, #80]	; 0x50
 8003a9c:	e003      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003ab2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003abc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	d05c      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003acc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003ad0:	d03b      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ad2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003ad6:	d834      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003adc:	d037      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d82e      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ae4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ae8:	d033      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003aea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003aee:	d828      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af4:	d01a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afa:	d822      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b04:	d007      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003b06:	e01c      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003b14:	e01e      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fb2a 	bl	8005178 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003b2a:	e013      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b30:	3328      	adds	r3, #40	; 0x28
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fbd1 	bl	80052dc <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003b40:	e008      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b48:	e004      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b60:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	4a02      	ldr	r2, [pc, #8]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b70:	e006      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003b72:	bf00      	nop
 8003b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d03a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	2b30      	cmp	r3, #48	; 0x30
 8003ba8:	d01f      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003baa:	2b30      	cmp	r3, #48	; 0x30
 8003bac:	d819      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d00c      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d815      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d019      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d111      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbe:	4bae      	ldr	r3, [pc, #696]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	4aad      	ldr	r2, [pc, #692]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003bca:	e011      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 facf 	bl	8005178 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003be0:	e006      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003be8:	e002      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003bf8:	4b9f      	ldr	r3, [pc, #636]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	4a9c      	ldr	r2, [pc, #624]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003c22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d051      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c40:	d035      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c46:	d82e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003c48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c4c:	d031      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003c4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c52:	d828      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c58:	d01a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5e:	d822      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d007      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003c6a:	e01c      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b82      	ldr	r3, [pc, #520]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a81      	ldr	r2, [pc, #516]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c78:	e01c      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fa78 	bl	8005178 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e011      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c94:	3328      	adds	r3, #40	; 0x28
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fb1f 	bl	80052dc <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cac:	e002      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cbc:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cca:	4a6b      	ldr	r2, [pc, #428]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd0:	e003      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003cf0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	d053      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d04:	d033      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0a:	d82c      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d10:	d02f      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d16:	d826      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d1c:	d02b      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d22:	d820      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d28:	d012      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d2e:	d81a      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d022      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d115      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3e:	3308      	adds	r3, #8
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fa18 	bl	8005178 <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d4e:	e015      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d54:	3328      	adds	r3, #40	; 0x28
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f001 fabf 	bl	80052dc <RCCEx_PLL3_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d64:	e00a      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d6e:	bf00      	nop
 8003d70:	e004      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d72:	bf00      	nop
 8003d74:	e002      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d84:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d92:	4a39      	ldr	r2, [pc, #228]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6513      	str	r3, [r2, #80]	; 0x50
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003db8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	d060      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dca:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003dce:	d039      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003dd0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003dd4:	d832      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dda:	d035      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de0:	d82c      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de6:	d031      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d826      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003df2:	d02d      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003df4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003df8:	d820      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfe:	d012      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e04:	d81a      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d024      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e0e:	d115      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e14:	3308      	adds	r3, #8
 8003e16:	2101      	movs	r1, #1
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 f9ad 	bl	8005178 <RCCEx_PLL2_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e24:	e017      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2a:	3328      	adds	r3, #40	; 0x28
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fa54 	bl	80052dc <RCCEx_PLL3_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e00c      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e42:	e008      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e44:	bf00      	nop
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10e      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e6e:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6593      	str	r3, [r2, #88]	; 0x58
 8003e74:	e006      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003e76:	bf00      	nop
 8003e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	d037      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eae:	d00e      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb4:	d816      	bhi.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d018      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ebe:	d111      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4bc4      	ldr	r3, [pc, #784]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4ac3      	ldr	r2, [pc, #780]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ecc:	e00f      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 f94e 	bl	8005178 <RCCEx_PLL2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ee2:	e004      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ef6:	4bb7      	ldr	r3, [pc, #732]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f04:	4ab3      	ldr	r2, [pc, #716]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6513      	str	r3, [r2, #80]	; 0x50
 8003f0a:	e003      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d039      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d81c      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f81 	.word	0x08003f81
 8003f48:	08003f55 	.word	0x08003f55
 8003f4c:	08003f63 	.word	0x08003f63
 8003f50:	08003f81 	.word	0x08003f81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f54:	4b9f      	ldr	r3, [pc, #636]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	4a9e      	ldr	r2, [pc, #632]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f60:	e00f      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f66:	3308      	adds	r3, #8
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f904 	bl	8005178 <RCCEx_PLL2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f76:	e004      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f7e:	e000      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f8a:	4b92      	ldr	r3, [pc, #584]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f023 0103 	bic.w	r1, r3, #3
 8003f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	4a8e      	ldr	r2, [pc, #568]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fa4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f000 8099 	beq.w	80040fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fca:	4b83      	ldr	r3, [pc, #524]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a82      	ldr	r2, [pc, #520]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fd6:	f7fd fbb3 	bl	8001740 <HAL_GetTick>
 8003fda:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fd fbae 	bl	8001740 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b64      	cmp	r3, #100	; 0x64
 8003fee:	d903      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ff6:	e005      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ff8:	4b77      	ldr	r3, [pc, #476]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ed      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004004:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004008:	2b00      	cmp	r3, #0
 800400a:	d173      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800400c:	4b71      	ldr	r3, [pc, #452]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800400e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004018:	4053      	eors	r3, r2
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	2b00      	cmp	r3, #0
 8004020:	d015      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004022:	4b6c      	ldr	r3, [pc, #432]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800402e:	4b69      	ldr	r3, [pc, #420]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a68      	ldr	r2, [pc, #416]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800403a:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a65      	ldr	r2, [pc, #404]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004046:	4a63      	ldr	r2, [pc, #396]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800404e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d118      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd fb70 	bl	8001740 <HAL_GetTick>
 8004060:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004064:	e00d      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fd fb6b 	bl	8001740 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004070:	1ad2      	subs	r2, r2, r3
 8004072:	f241 3388 	movw	r3, #5000	; 0x1388
 8004076:	429a      	cmp	r2, r3
 8004078:	d903      	bls.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004080:	e005      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004082:	4b54      	ldr	r3, [pc, #336]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0eb      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800408e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004092:	2b00      	cmp	r3, #0
 8004094:	d129      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a6:	d10e      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80040a8:	4b4a      	ldr	r3, [pc, #296]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80040b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040b8:	091a      	lsrs	r2, r3, #4
 80040ba:	4b48      	ldr	r3, [pc, #288]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80040bc:	4013      	ands	r3, r2
 80040be:	4a45      	ldr	r2, [pc, #276]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6113      	str	r3, [r2, #16]
 80040c4:	e005      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80040c6:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	4a42      	ldr	r2, [pc, #264]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040d0:	6113      	str	r3, [r2, #16]
 80040d2:	4b40      	ldr	r3, [pc, #256]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e2:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
 80040e8:	e008      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 0301 	and.w	r3, r2, #1
 8004108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004112:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	f000 8090 	beq.w	800423e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800411e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004126:	2b28      	cmp	r3, #40	; 0x28
 8004128:	d870      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004215 	.word	0x08004215
 8004134:	0800420d 	.word	0x0800420d
 8004138:	0800420d 	.word	0x0800420d
 800413c:	0800420d 	.word	0x0800420d
 8004140:	0800420d 	.word	0x0800420d
 8004144:	0800420d 	.word	0x0800420d
 8004148:	0800420d 	.word	0x0800420d
 800414c:	0800420d 	.word	0x0800420d
 8004150:	080041e1 	.word	0x080041e1
 8004154:	0800420d 	.word	0x0800420d
 8004158:	0800420d 	.word	0x0800420d
 800415c:	0800420d 	.word	0x0800420d
 8004160:	0800420d 	.word	0x0800420d
 8004164:	0800420d 	.word	0x0800420d
 8004168:	0800420d 	.word	0x0800420d
 800416c:	0800420d 	.word	0x0800420d
 8004170:	080041f7 	.word	0x080041f7
 8004174:	0800420d 	.word	0x0800420d
 8004178:	0800420d 	.word	0x0800420d
 800417c:	0800420d 	.word	0x0800420d
 8004180:	0800420d 	.word	0x0800420d
 8004184:	0800420d 	.word	0x0800420d
 8004188:	0800420d 	.word	0x0800420d
 800418c:	0800420d 	.word	0x0800420d
 8004190:	08004215 	.word	0x08004215
 8004194:	0800420d 	.word	0x0800420d
 8004198:	0800420d 	.word	0x0800420d
 800419c:	0800420d 	.word	0x0800420d
 80041a0:	0800420d 	.word	0x0800420d
 80041a4:	0800420d 	.word	0x0800420d
 80041a8:	0800420d 	.word	0x0800420d
 80041ac:	0800420d 	.word	0x0800420d
 80041b0:	08004215 	.word	0x08004215
 80041b4:	0800420d 	.word	0x0800420d
 80041b8:	0800420d 	.word	0x0800420d
 80041bc:	0800420d 	.word	0x0800420d
 80041c0:	0800420d 	.word	0x0800420d
 80041c4:	0800420d 	.word	0x0800420d
 80041c8:	0800420d 	.word	0x0800420d
 80041cc:	0800420d 	.word	0x0800420d
 80041d0:	08004215 	.word	0x08004215
 80041d4:	58024400 	.word	0x58024400
 80041d8:	58024800 	.word	0x58024800
 80041dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	3308      	adds	r3, #8
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 ffc5 	bl	8005178 <RCCEx_PLL2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041f4:	e00f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fa:	3328      	adds	r3, #40	; 0x28
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f86c 	bl	80052dc <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800421e:	4bc0      	ldr	r3, [pc, #768]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422e:	4abc      	ldr	r2, [pc, #752]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6553      	str	r3, [r2, #84]	; 0x54
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800423a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f002 0302 	and.w	r3, r2, #2
 800424a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004254:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d043      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004266:	2b05      	cmp	r3, #5
 8004268:	d824      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	080042bd 	.word	0x080042bd
 8004274:	08004289 	.word	0x08004289
 8004278:	0800429f 	.word	0x0800429f
 800427c:	080042bd 	.word	0x080042bd
 8004280:	080042bd 	.word	0x080042bd
 8004284:	080042bd 	.word	0x080042bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428c:	3308      	adds	r3, #8
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 ff71 	bl	8005178 <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800429c:	e00f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a2:	3328      	adds	r3, #40	; 0x28
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 f818 	bl	80052dc <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042b2:	e004      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80042bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042c6:	4b96      	ldr	r3, [pc, #600]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f023 0107 	bic.w	r1, r3, #7
 80042ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d6:	4a92      	ldr	r2, [pc, #584]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	6553      	str	r3, [r2, #84]	; 0x54
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f002 0304 	and.w	r3, r2, #4
 80042f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d043      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800430e:	2b05      	cmp	r3, #5
 8004310:	d824      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004312:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004365 	.word	0x08004365
 800431c:	08004331 	.word	0x08004331
 8004320:	08004347 	.word	0x08004347
 8004324:	08004365 	.word	0x08004365
 8004328:	08004365 	.word	0x08004365
 800432c:	08004365 	.word	0x08004365
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004334:	3308      	adds	r3, #8
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f000 ff1d 	bl	8005178 <RCCEx_PLL2_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004344:	e00f      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434a:	3328      	adds	r3, #40	; 0x28
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f000 ffc4 	bl	80052dc <RCCEx_PLL3_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800435a:	e004      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800436e:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f023 0107 	bic.w	r1, r3, #7
 8004376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800437e:	4a68      	ldr	r2, [pc, #416]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6593      	str	r3, [r2, #88]	; 0x58
 8004384:	e003      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800438e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f002 0320 	and.w	r3, r2, #32
 800439a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d055      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80043ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ba:	d033      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80043bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c0:	d82c      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d02f      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d826      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043d2:	d02b      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80043d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043d8:	d820      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043de:	d012      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80043e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e4:	d81a      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d022      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80043ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ee:	d115      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	3308      	adds	r3, #8
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 febd 	bl	8005178 <RCCEx_PLL2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004404:	e015      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440a:	3328      	adds	r3, #40	; 0x28
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 ff64 	bl	80052dc <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800441a:	e00a      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004422:	e006      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004424:	bf00      	nop
 8004426:	e004      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004428:	bf00      	nop
 800442a:	e002      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800443a:	4b39      	ldr	r3, [pc, #228]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800444a:	4a35      	ldr	r2, [pc, #212]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800444c:	430b      	orrs	r3, r1
 800444e:	6553      	str	r3, [r2, #84]	; 0x54
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004452:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004456:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800445a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800446a:	2300      	movs	r3, #0
 800446c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004470:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d058      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800447a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004482:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004486:	d033      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004488:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800448c:	d82c      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d02f      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d826      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800449a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800449e:	d02b      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80044a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a4:	d820      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d012      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d81a      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d022      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ba:	d115      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c0:	3308      	adds	r3, #8
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fe57 	bl	8005178 <RCCEx_PLL2_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044d0:	e015      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d6:	3328      	adds	r3, #40	; 0x28
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fefe 	bl	80052dc <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044e6:	e00a      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044ee:	e006      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044f0:	bf00      	nop
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10e      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800450e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004516:	4a02      	ldr	r2, [pc, #8]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004518:	430b      	orrs	r3, r1
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800451e:	bf00      	nop
 8004520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004524:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004528:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800452c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004542:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004546:	460b      	mov	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	d055      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004550:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004554:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004558:	d033      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800455a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800455e:	d82c      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004564:	d02f      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456a:	d826      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800456c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004570:	d02b      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004572:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004576:	d820      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457c:	d012      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800457e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004582:	d81a      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d022      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d115      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800458e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004592:	3308      	adds	r3, #8
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fdee 	bl	8005178 <RCCEx_PLL2_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045a2:	e015      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a8:	3328      	adds	r3, #40	; 0x28
 80045aa:	2102      	movs	r1, #2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fe95 	bl	80052dc <RCCEx_PLL3_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045b8:	e00a      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80045c2:	bf00      	nop
 80045c4:	e004      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80045c6:	bf00      	nop
 80045c8:	e002      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80045ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045d8:	4ba1      	ldr	r3, [pc, #644]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045e8:	4a9d      	ldr	r2, [pc, #628]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045ea:	430b      	orrs	r3, r1
 80045ec:	6593      	str	r3, [r2, #88]	; 0x58
 80045ee:	e003      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f002 0308 	and.w	r3, r2, #8
 8004604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800460e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004612:	460b      	mov	r3, r1
 8004614:	4313      	orrs	r3, r2
 8004616:	d01e      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004624:	d10c      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462a:	3328      	adds	r3, #40	; 0x28
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fe54 	bl	80052dc <RCCEx_PLL3_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004640:	4b87      	ldr	r3, [pc, #540]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004650:	4a83      	ldr	r2, [pc, #524]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004652:	430b      	orrs	r3, r1
 8004654:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f002 0310 	and.w	r3, r2, #16
 8004662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800466c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004670:	460b      	mov	r3, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	d01e      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d10c      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004688:	3328      	adds	r3, #40	; 0x28
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fe25 	bl	80052dc <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800469e:	4b70      	ldr	r3, [pc, #448]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ae:	4a6c      	ldr	r2, [pc, #432]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80046c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046c4:	2300      	movs	r3, #0
 80046c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80046ce:	460b      	mov	r3, r1
 80046d0:	4313      	orrs	r3, r2
 80046d2:	d03e      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80046d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e0:	d022      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80046e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e6:	d81b      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d00b      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80046f2:	e015      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f8:	3308      	adds	r3, #8
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd3b 	bl	8005178 <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004708:	e00f      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800470a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470e:	3328      	adds	r3, #40	; 0x28
 8004710:	2102      	movs	r1, #2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fde2 	bl	80052dc <RCCEx_PLL3_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800471e:	e004      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004726:	e000      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004732:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004742:	4a47      	ldr	r2, [pc, #284]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004744:	430b      	orrs	r3, r1
 8004746:	6593      	str	r3, [r2, #88]	; 0x58
 8004748:	e003      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800474e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800475e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004760:	2300      	movs	r3, #0
 8004762:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004764:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004768:	460b      	mov	r3, r1
 800476a:	4313      	orrs	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800476e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800477a:	d01f      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800477c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004780:	d818      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004786:	d003      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800478c:	d007      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800478e:	e011      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004790:	4b33      	ldr	r3, [pc, #204]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	4a32      	ldr	r2, [pc, #200]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800479c:	e00f      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a2:	3328      	adds	r3, #40	; 0x28
 80047a4:	2101      	movs	r1, #1
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fd98 	bl	80052dc <RCCEx_PLL3_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80047bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a22      	ldr	r2, [pc, #136]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6553      	str	r3, [r2, #84]	; 0x54
 80047dc:	e003      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80047f2:	673b      	str	r3, [r7, #112]	; 0x70
 80047f4:	2300      	movs	r3, #0
 80047f6:	677b      	str	r3, [r7, #116]	; 0x74
 80047f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d034      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004810:	d007      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004812:	e011      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a11      	ldr	r2, [pc, #68]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800481a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004820:	e00e      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004826:	3308      	adds	r3, #8
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fca4 	bl	8005178 <RCCEx_PLL2_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004836:	e003      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800483e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004840:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10d      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	4a02      	ldr	r2, [pc, #8]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004858:	430b      	orrs	r3, r1
 800485a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800485c:	e006      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800485e:	bf00      	nop
 8004860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004868:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004878:	66bb      	str	r3, [r7, #104]	; 0x68
 800487a:	2300      	movs	r3, #0
 800487c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800487e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004882:	460b      	mov	r3, r1
 8004884:	4313      	orrs	r3, r2
 8004886:	d00c      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488c:	3328      	adds	r3, #40	; 0x28
 800488e:	2102      	movs	r1, #2
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fd23 	bl	80052dc <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80048ae:	663b      	str	r3, [r7, #96]	; 0x60
 80048b0:	2300      	movs	r3, #0
 80048b2:	667b      	str	r3, [r7, #100]	; 0x64
 80048b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d038      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80048be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ca:	d018      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80048cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d0:	d811      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d6:	d014      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80048d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048dc:	d80b      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d011      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	d106      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4bc3      	ldr	r3, [pc, #780]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4ac2      	ldr	r2, [pc, #776]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048fc:	e004      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004908:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004910:	4bb9      	ldr	r3, [pc, #740]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	4ab5      	ldr	r2, [pc, #724]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004922:	430b      	orrs	r3, r1
 8004924:	6553      	str	r3, [r2, #84]	; 0x54
 8004926:	e003      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800492c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800493c:	65bb      	str	r3, [r7, #88]	; 0x58
 800493e:	2300      	movs	r3, #0
 8004940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004942:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004946:	460b      	mov	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800494c:	4baa      	ldr	r3, [pc, #680]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495a:	4aa7      	ldr	r2, [pc, #668]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800496c:	653b      	str	r3, [r7, #80]	; 0x50
 800496e:	2300      	movs	r3, #0
 8004970:	657b      	str	r3, [r7, #84]	; 0x54
 8004972:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004976:	460b      	mov	r3, r1
 8004978:	4313      	orrs	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800497c:	4b9e      	ldr	r3, [pc, #632]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a9b      	ldr	r2, [pc, #620]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800498c:	430b      	orrs	r3, r1
 800498e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
 800499e:	2300      	movs	r3, #0
 80049a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d009      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80049ac:	4b92      	ldr	r3, [pc, #584]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80049b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ba:	4a8f      	ldr	r2, [pc, #572]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
 80049ce:	2300      	movs	r3, #0
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
 80049d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80049d6:	460b      	mov	r3, r1
 80049d8:	4313      	orrs	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049dc:	4b86      	ldr	r3, [pc, #536]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	4a85      	ldr	r2, [pc, #532]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049e6:	6113      	str	r3, [r2, #16]
 80049e8:	4b83      	ldr	r3, [pc, #524]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049ea:	6919      	ldr	r1, [r3, #16]
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049f4:	4a80      	ldr	r2, [pc, #512]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d009      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a16:	4b78      	ldr	r3, [pc, #480]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	4a74      	ldr	r2, [pc, #464]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a26:	430b      	orrs	r3, r1
 8004a28:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
 8004a38:	2300      	movs	r3, #0
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004a40:	460b      	mov	r3, r1
 8004a42:	4313      	orrs	r3, r2
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a46:	4b6c      	ldr	r3, [pc, #432]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a56:	4a68      	ldr	r2, [pc, #416]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	2100      	movs	r1, #0
 8004a66:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a72:	460b      	mov	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	d011      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fb79 	bl	8005178 <RCCEx_PLL2_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	6239      	str	r1, [r7, #32]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d011      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004abc:	3308      	adds	r3, #8
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fb59 	bl	8005178 <RCCEx_PLL2_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004acc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ad8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	61b9      	str	r1, [r7, #24]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d011      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afc:	3308      	adds	r3, #8
 8004afe:	2102      	movs	r1, #2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fb39 	bl	8005178 <RCCEx_PLL2_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	2100      	movs	r1, #0
 8004b26:	6139      	str	r1, [r7, #16]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b32:	460b      	mov	r3, r1
 8004b34:	4313      	orrs	r3, r2
 8004b36:	d011      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3c:	3328      	adds	r3, #40	; 0x28
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fbcb 	bl	80052dc <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004b4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	2100      	movs	r1, #0
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d011      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7c:	3328      	adds	r3, #40	; 0x28
 8004b7e:	2101      	movs	r1, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fbab 	bl	80052dc <RCCEx_PLL3_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	6039      	str	r1, [r7, #0]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d011      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbc:	3328      	adds	r3, #40	; 0x28
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fb8b 	bl	80052dc <RCCEx_PLL3_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004bdc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf6:	bf00      	nop
 8004bf8:	58024400 	.word	0x58024400

08004bfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004c00:	f7fe fde2 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4904      	ldr	r1, [pc, #16]	; (8004c24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	58024400 	.word	0x58024400
 8004c24:	08009984 	.word	0x08009984

08004c28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c30:	4ba1      	ldr	r3, [pc, #644]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c3a:	4b9f      	ldr	r3, [pc, #636]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	0b1b      	lsrs	r3, r3, #12
 8004c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c46:	4b9c      	ldr	r3, [pc, #624]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c52:	4b99      	ldr	r3, [pc, #612]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8111 	beq.w	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	f000 8083 	beq.w	8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f200 80a1 	bhi.w	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d056      	beq.n	8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c92:	e099      	b.n	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c94:	4b88      	ldr	r3, [pc, #544]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02d      	beq.n	8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca0:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	08db      	lsrs	r3, r3, #3
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	4a84      	ldr	r2, [pc, #528]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cca:	4b7b      	ldr	r3, [pc, #492]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cfa:	e087      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3e:	e065      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d82:	e043      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b48      	ldr	r3, [pc, #288]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc6:	e021      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	0a5b      	lsrs	r3, r3, #9
 8004e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e32:	ee17 2a90 	vmov	r2, s15
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	0c1b      	lsrs	r3, r3, #16
 8004e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e60:	ee17 2a90 	vmov	r2, s15
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	0e1b      	lsrs	r3, r3, #24
 8004e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8e:	ee17 2a90 	vmov	r2, s15
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
}
 8004eaa:	bf00      	nop
 8004eac:	3724      	adds	r7, #36	; 0x24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	03d09000 	.word	0x03d09000
 8004ec0:	46000000 	.word	0x46000000
 8004ec4:	4c742400 	.word	0x4c742400
 8004ec8:	4a742400 	.word	0x4a742400
 8004ecc:	4af42400 	.word	0x4af42400

08004ed0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	; 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ed8:	4ba1      	ldr	r3, [pc, #644]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ee2:	4b9f      	ldr	r3, [pc, #636]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	0d1b      	lsrs	r3, r3, #20
 8004ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004eee:	4b9c      	ldr	r3, [pc, #624]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004efa:	4b99      	ldr	r3, [pc, #612]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	08db      	lsrs	r3, r3, #3
 8004f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8111 	beq.w	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	f000 8083 	beq.w	800502c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f200 80a1 	bhi.w	8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d056      	beq.n	8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f3a:	e099      	b.n	8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f3c:	4b88      	ldr	r3, [pc, #544]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02d      	beq.n	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f48:	4b85      	ldr	r3, [pc, #532]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	4a84      	ldr	r2, [pc, #528]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f72:	4b7b      	ldr	r3, [pc, #492]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fa2:	e087      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb6:	4b6a      	ldr	r3, [pc, #424]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fe6:	e065      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffa:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500a:	ed97 6a03 	vldr	s12, [r7, #12]
 800500e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800502a:	e043      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800503a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503e:	4b48      	ldr	r3, [pc, #288]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005052:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800506e:	e021      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800507e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005092:	ed97 6a03 	vldr	s12, [r7, #12]
 8005096:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800509a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80050b4:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	0a5b      	lsrs	r3, r3, #9
 80050ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050da:	ee17 2a90 	vmov	r2, s15
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050e2:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005108:	ee17 2a90 	vmov	r2, s15
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005110:	4b13      	ldr	r3, [pc, #76]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	0e1b      	lsrs	r3, r3, #24
 8005116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512a:	edd7 6a07 	vldr	s13, [r7, #28]
 800512e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005136:	ee17 2a90 	vmov	r2, s15
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
}
 8005152:	bf00      	nop
 8005154:	3724      	adds	r7, #36	; 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	58024400 	.word	0x58024400
 8005164:	03d09000 	.word	0x03d09000
 8005168:	46000000 	.word	0x46000000
 800516c:	4c742400 	.word	0x4c742400
 8005170:	4a742400 	.word	0x4a742400
 8005174:	4af42400 	.word	0x4af42400

08005178 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005186:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d101      	bne.n	8005196 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e099      	b.n	80052ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005196:	4b4f      	ldr	r3, [pc, #316]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a4e      	ldr	r2, [pc, #312]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800519c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a2:	f7fc facd 	bl	8001740 <HAL_GetTick>
 80051a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051a8:	e008      	b.n	80051bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051aa:	f7fc fac9 	bl	8001740 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e086      	b.n	80052ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051bc:	4b45      	ldr	r3, [pc, #276]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051c8:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	493f      	ldr	r1, [pc, #252]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	628b      	str	r3, [r1, #40]	; 0x28
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	025b      	lsls	r3, r3, #9
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	041b      	lsls	r3, r3, #16
 80051fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	3b01      	subs	r3, #1
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800520c:	4931      	ldr	r1, [pc, #196]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800520e:	4313      	orrs	r3, r2
 8005210:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005212:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	492d      	ldr	r1, [pc, #180]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005224:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	f023 0220 	bic.w	r2, r3, #32
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	4928      	ldr	r1, [pc, #160]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800523c:	f023 0310 	bic.w	r3, r3, #16
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005242:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <RCCEx_PLL2_Config+0x160>)
 8005248:	4013      	ands	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	69d2      	ldr	r2, [r2, #28]
 800524e:	00d2      	lsls	r2, r2, #3
 8005250:	4920      	ldr	r1, [pc, #128]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005252:	4313      	orrs	r3, r2
 8005254:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005256:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800525c:	f043 0310 	orr.w	r3, r3, #16
 8005260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005268:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800526e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005272:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005274:	e00f      	b.n	8005296 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d106      	bne.n	800528a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005288:	e005      	b.n	8005296 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	4a11      	ldr	r2, [pc, #68]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a0e      	ldr	r2, [pc, #56]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 800529c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a2:	f7fc fa4d 	bl	8001740 <HAL_GetTick>
 80052a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052a8:	e008      	b.n	80052bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052aa:	f7fc fa49 	bl	8001740 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e006      	b.n	80052ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <RCCEx_PLL2_Config+0x15c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	58024400 	.word	0x58024400
 80052d8:	ffff0007 	.word	0xffff0007

080052dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ea:	4b53      	ldr	r3, [pc, #332]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d101      	bne.n	80052fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e099      	b.n	800542e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052fa:	4b4f      	ldr	r3, [pc, #316]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a4e      	ldr	r2, [pc, #312]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005306:	f7fc fa1b 	bl	8001740 <HAL_GetTick>
 800530a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800530c:	e008      	b.n	8005320 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800530e:	f7fc fa17 	bl	8001740 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e086      	b.n	800542e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005320:	4b45      	ldr	r3, [pc, #276]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f0      	bne.n	800530e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800532c:	4b42      	ldr	r3, [pc, #264]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	051b      	lsls	r3, r3, #20
 800533a:	493f      	ldr	r1, [pc, #252]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	628b      	str	r3, [r1, #40]	; 0x28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	3b01      	subs	r3, #1
 8005346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	3b01      	subs	r3, #1
 8005350:	025b      	lsls	r3, r3, #9
 8005352:	b29b      	uxth	r3, r3
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	3b01      	subs	r3, #1
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	3b01      	subs	r3, #1
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005370:	4931      	ldr	r1, [pc, #196]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005376:	4b30      	ldr	r3, [pc, #192]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	492d      	ldr	r1, [pc, #180]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005388:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	4928      	ldr	r1, [pc, #160]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800539a:	4b27      	ldr	r3, [pc, #156]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	4a26      	ldr	r2, [pc, #152]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053a6:	4b24      	ldr	r3, [pc, #144]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <RCCEx_PLL3_Config+0x160>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	69d2      	ldr	r2, [r2, #28]
 80053b2:	00d2      	lsls	r2, r2, #3
 80053b4:	4920      	ldr	r1, [pc, #128]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053ba:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053cc:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053d8:	e00f      	b.n	80053fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d106      	bne.n	80053ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053e0:	4b15      	ldr	r3, [pc, #84]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	4a14      	ldr	r2, [pc, #80]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053ec:	e005      	b.n	80053fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	4a11      	ldr	r2, [pc, #68]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053fa:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005406:	f7fc f99b 	bl	8001740 <HAL_GetTick>
 800540a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800540c:	e008      	b.n	8005420 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800540e:	f7fc f997 	bl	8001740 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e006      	b.n	800542e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <RCCEx_PLL3_Config+0x15c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	58024400 	.word	0x58024400
 800543c:	ffff0007 	.word	0xffff0007

08005440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e049      	b.n	80054e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fec6 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f000 fbb0 	bl	8005be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e049      	b.n	8005594 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f841 	bl	800559c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f000 fb59 	bl	8005be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_TIM_PWM_Start+0x24>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e03c      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d109      	bne.n	80055ee <HAL_TIM_PWM_Start+0x3e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e02f      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d109      	bne.n	8005608 <HAL_TIM_PWM_Start+0x58>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e022      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b0c      	cmp	r3, #12
 800560c:	d109      	bne.n	8005622 <HAL_TIM_PWM_Start+0x72>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	e015      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b10      	cmp	r3, #16
 8005626:	d109      	bne.n	800563c <HAL_TIM_PWM_Start+0x8c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e008      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	bf14      	ite	ne
 8005648:	2301      	movne	r3, #1
 800564a:	2300      	moveq	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0a1      	b.n	800579a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <HAL_TIM_PWM_Start+0xb6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005664:	e023      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d104      	bne.n	8005676 <HAL_TIM_PWM_Start+0xc6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005674:	e01b      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0xd6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005684:	e013      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0xe6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005694:	e00b      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b10      	cmp	r3, #16
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_PWM_Start+0xf6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a4:	e003      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fea2 	bl	8006400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a38      	ldr	r2, [pc, #224]	; (80057a4 <HAL_TIM_PWM_Start+0x1f4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_TIM_PWM_Start+0x13e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a37      	ldr	r2, [pc, #220]	; (80057a8 <HAL_TIM_PWM_Start+0x1f8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIM_PWM_Start+0x13e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a35      	ldr	r2, [pc, #212]	; (80057ac <HAL_TIM_PWM_Start+0x1fc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIM_PWM_Start+0x13e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a34      	ldr	r2, [pc, #208]	; (80057b0 <HAL_TIM_PWM_Start+0x200>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIM_PWM_Start+0x13e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a32      	ldr	r2, [pc, #200]	; (80057b4 <HAL_TIM_PWM_Start+0x204>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d101      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x142>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_TIM_PWM_Start+0x144>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <HAL_TIM_PWM_Start+0x1f4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d022      	beq.n	8005758 <HAL_TIM_PWM_Start+0x1a8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d01d      	beq.n	8005758 <HAL_TIM_PWM_Start+0x1a8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <HAL_TIM_PWM_Start+0x208>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_TIM_PWM_Start+0x1a8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a24      	ldr	r2, [pc, #144]	; (80057bc <HAL_TIM_PWM_Start+0x20c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <HAL_TIM_PWM_Start+0x1a8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <HAL_TIM_PWM_Start+0x210>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <HAL_TIM_PWM_Start+0x1a8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <HAL_TIM_PWM_Start+0x1f8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <HAL_TIM_PWM_Start+0x1a8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <HAL_TIM_PWM_Start+0x214>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIM_PWM_Start+0x1a8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a16      	ldr	r2, [pc, #88]	; (80057ac <HAL_TIM_PWM_Start+0x1fc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d115      	bne.n	8005784 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <HAL_TIM_PWM_Start+0x218>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b06      	cmp	r3, #6
 8005768:	d015      	beq.n	8005796 <HAL_TIM_PWM_Start+0x1e6>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d011      	beq.n	8005796 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005782:	e008      	b.n	8005796 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e000      	b.n	8005798 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400
 80057b4:	40014800 	.word	0x40014800
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40001800 	.word	0x40001800
 80057c8:	00010007 	.word	0x00010007

080057cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e0ff      	b.n	80059ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b14      	cmp	r3, #20
 80057f6:	f200 80f0 	bhi.w	80059da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005855 	.word	0x08005855
 8005804:	080059db 	.word	0x080059db
 8005808:	080059db 	.word	0x080059db
 800580c:	080059db 	.word	0x080059db
 8005810:	08005895 	.word	0x08005895
 8005814:	080059db 	.word	0x080059db
 8005818:	080059db 	.word	0x080059db
 800581c:	080059db 	.word	0x080059db
 8005820:	080058d7 	.word	0x080058d7
 8005824:	080059db 	.word	0x080059db
 8005828:	080059db 	.word	0x080059db
 800582c:	080059db 	.word	0x080059db
 8005830:	08005917 	.word	0x08005917
 8005834:	080059db 	.word	0x080059db
 8005838:	080059db 	.word	0x080059db
 800583c:	080059db 	.word	0x080059db
 8005840:	08005959 	.word	0x08005959
 8005844:	080059db 	.word	0x080059db
 8005848:	080059db 	.word	0x080059db
 800584c:	080059db 	.word	0x080059db
 8005850:	08005999 	.word	0x08005999
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fa5c 	bl	8005d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0208 	orr.w	r2, r2, #8
 800586e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0204 	bic.w	r2, r2, #4
 800587e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6999      	ldr	r1, [r3, #24]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	619a      	str	r2, [r3, #24]
      break;
 8005892:	e0a5      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 facc 	bl	8005e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6999      	ldr	r1, [r3, #24]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	021a      	lsls	r2, r3, #8
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	619a      	str	r2, [r3, #24]
      break;
 80058d4:	e084      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fb35 	bl	8005f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0208 	orr.w	r2, r2, #8
 80058f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0204 	bic.w	r2, r2, #4
 8005900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69d9      	ldr	r1, [r3, #28]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	61da      	str	r2, [r3, #28]
      break;
 8005914:	e064      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fb9d 	bl	800605c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69d9      	ldr	r1, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	021a      	lsls	r2, r3, #8
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	61da      	str	r2, [r3, #28]
      break;
 8005956:	e043      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fbe6 	bl	8006130 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0208 	orr.w	r2, r2, #8
 8005972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0204 	bic.w	r2, r2, #4
 8005982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005996:	e023      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fc2a 	bl	80061f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059d8:	e002      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	75fb      	strb	r3, [r7, #23]
      break;
 80059de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop

080059f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIM_ConfigClockSource+0x1c>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e0dc      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x1d6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	; (8005bd4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a64      	ldr	r2, [pc, #400]	; (8005bd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f000 80a9 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a4c:	4a62      	ldr	r2, [pc, #392]	; (8005bd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f200 80ae 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a54:	4a61      	ldr	r2, [pc, #388]	; (8005bdc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	f000 80a1 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a5c:	4a5f      	ldr	r2, [pc, #380]	; (8005bdc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	f200 80a6 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a64:	4a5e      	ldr	r2, [pc, #376]	; (8005be0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f000 8099 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a6c:	4a5c      	ldr	r2, [pc, #368]	; (8005be0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	f200 809e 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a78:	f000 8091 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a80:	f200 8096 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a88:	f000 8089 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a90:	f200 808e 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a98:	d03e      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0x124>
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9e:	f200 8087 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa6:	f000 8086 	beq.w	8005bb6 <HAL_TIM_ConfigClockSource+0x1c2>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	d87f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ab0:	2b70      	cmp	r3, #112	; 0x70
 8005ab2:	d01a      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0xf6>
 8005ab4:	2b70      	cmp	r3, #112	; 0x70
 8005ab6:	d87b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ab8:	2b60      	cmp	r3, #96	; 0x60
 8005aba:	d050      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x16a>
 8005abc:	2b60      	cmp	r3, #96	; 0x60
 8005abe:	d877      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ac0:	2b50      	cmp	r3, #80	; 0x50
 8005ac2:	d03c      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x14a>
 8005ac4:	2b50      	cmp	r3, #80	; 0x50
 8005ac6:	d873      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d058      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x18a>
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d86f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ad0:	2b30      	cmp	r3, #48	; 0x30
 8005ad2:	d064      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ad4:	2b30      	cmp	r3, #48	; 0x30
 8005ad6:	d86b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d060      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d867      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d05c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d05a      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1aa>
 8005ae8:	e062      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6899      	ldr	r1, [r3, #8]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f000 fc61 	bl	80063c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	609a      	str	r2, [r3, #8]
      break;
 8005b16:	e04f      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f000 fc4a 	bl	80063c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3a:	609a      	str	r2, [r3, #8]
      break;
 8005b3c:	e03c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 fbba 	bl	80062c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2150      	movs	r1, #80	; 0x50
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fc14 	bl	8006384 <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e02c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 fbd9 	bl	8006322 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2160      	movs	r1, #96	; 0x60
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fc04 	bl	8006384 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e01c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 fb9a 	bl	80062c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2140      	movs	r1, #64	; 0x40
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fbf4 	bl	8006384 <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e00c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f000 fbeb 	bl	8006384 <TIM_ITRx_SetConfig>
      break;
 8005bae:	e003      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb4:	e000      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	ffceff88 	.word	0xffceff88
 8005bd8:	00100040 	.word	0x00100040
 8005bdc:	00100030 	.word	0x00100030
 8005be0:	00100020 	.word	0x00100020

08005be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a40      	ldr	r2, [pc, #256]	; (8005cf8 <TIM_Base_SetConfig+0x114>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c02:	d00f      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3d      	ldr	r2, [pc, #244]	; (8005cfc <TIM_Base_SetConfig+0x118>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3c      	ldr	r2, [pc, #240]	; (8005d00 <TIM_Base_SetConfig+0x11c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a3b      	ldr	r2, [pc, #236]	; (8005d04 <TIM_Base_SetConfig+0x120>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3a      	ldr	r2, [pc, #232]	; (8005d08 <TIM_Base_SetConfig+0x124>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d108      	bne.n	8005c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2f      	ldr	r2, [pc, #188]	; (8005cf8 <TIM_Base_SetConfig+0x114>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01f      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d01b      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <TIM_Base_SetConfig+0x118>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d017      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <TIM_Base_SetConfig+0x11c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <TIM_Base_SetConfig+0x120>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <TIM_Base_SetConfig+0x124>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <TIM_Base_SetConfig+0x128>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a27      	ldr	r2, [pc, #156]	; (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_Base_SetConfig+0x9a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <TIM_Base_SetConfig+0x130>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a10      	ldr	r2, [pc, #64]	; (8005cf8 <TIM_Base_SetConfig+0x114>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <TIM_Base_SetConfig+0x124>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <TIM_Base_SetConfig+0x128>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a10      	ldr	r2, [pc, #64]	; (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a0f      	ldr	r2, [pc, #60]	; (8005d14 <TIM_Base_SetConfig+0x130>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	40010400 	.word	0x40010400
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800

08005d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <TIM_OC1_SetConfig+0x108>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 0302 	bic.w	r3, r3, #2
 8005d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a2d      	ldr	r2, [pc, #180]	; (8005e24 <TIM_OC1_SetConfig+0x10c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00f      	beq.n	8005d94 <TIM_OC1_SetConfig+0x7c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <TIM_OC1_SetConfig+0x110>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_OC1_SetConfig+0x7c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <TIM_OC1_SetConfig+0x114>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_OC1_SetConfig+0x7c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <TIM_OC1_SetConfig+0x118>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_OC1_SetConfig+0x7c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <TIM_OC1_SetConfig+0x11c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d10c      	bne.n	8005dae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f023 0308 	bic.w	r3, r3, #8
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <TIM_OC1_SetConfig+0x10c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00f      	beq.n	8005dd6 <TIM_OC1_SetConfig+0xbe>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <TIM_OC1_SetConfig+0x110>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_OC1_SetConfig+0xbe>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <TIM_OC1_SetConfig+0x114>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <TIM_OC1_SetConfig+0xbe>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <TIM_OC1_SetConfig+0x118>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_OC1_SetConfig+0xbe>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <TIM_OC1_SetConfig+0x11c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d111      	bne.n	8005dfa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	621a      	str	r2, [r3, #32]
}
 8005e14:	bf00      	nop
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	fffeff8f 	.word	0xfffeff8f
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40010400 	.word	0x40010400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0210 	bic.w	r2, r3, #16
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4b34      	ldr	r3, [pc, #208]	; (8005f34 <TIM_OC2_SetConfig+0xfc>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f023 0320 	bic.w	r3, r3, #32
 8005e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a29      	ldr	r2, [pc, #164]	; (8005f38 <TIM_OC2_SetConfig+0x100>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_OC2_SetConfig+0x68>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <TIM_OC2_SetConfig+0x104>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10d      	bne.n	8005ebc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	; (8005f38 <TIM_OC2_SetConfig+0x100>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_OC2_SetConfig+0xac>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	; (8005f3c <TIM_OC2_SetConfig+0x104>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_OC2_SetConfig+0xac>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <TIM_OC2_SetConfig+0x108>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_OC2_SetConfig+0xac>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <TIM_OC2_SetConfig+0x10c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC2_SetConfig+0xac>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <TIM_OC2_SetConfig+0x110>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d113      	bne.n	8005f0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	feff8fff 	.word	0xfeff8fff
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4b33      	ldr	r3, [pc, #204]	; (8006044 <TIM_OC3_SetConfig+0xf8>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <TIM_OC3_SetConfig+0xfc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_OC3_SetConfig+0x66>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a27      	ldr	r2, [pc, #156]	; (800604c <TIM_OC3_SetConfig+0x100>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10d      	bne.n	8005fce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <TIM_OC3_SetConfig+0xfc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00f      	beq.n	8005ff6 <TIM_OC3_SetConfig+0xaa>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	; (800604c <TIM_OC3_SetConfig+0x100>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <TIM_OC3_SetConfig+0xaa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <TIM_OC3_SetConfig+0x104>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <TIM_OC3_SetConfig+0xaa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <TIM_OC3_SetConfig+0x108>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC3_SetConfig+0xaa>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a19      	ldr	r2, [pc, #100]	; (8006058 <TIM_OC3_SetConfig+0x10c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d113      	bne.n	800601e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	621a      	str	r2, [r3, #32]
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	fffeff8f 	.word	0xfffeff8f
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4b24      	ldr	r3, [pc, #144]	; (8006118 <TIM_OC4_SetConfig+0xbc>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a19      	ldr	r2, [pc, #100]	; (800611c <TIM_OC4_SetConfig+0xc0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00f      	beq.n	80060dc <TIM_OC4_SetConfig+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <TIM_OC4_SetConfig+0xc4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_OC4_SetConfig+0x80>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a17      	ldr	r2, [pc, #92]	; (8006124 <TIM_OC4_SetConfig+0xc8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_OC4_SetConfig+0x80>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a16      	ldr	r2, [pc, #88]	; (8006128 <TIM_OC4_SetConfig+0xcc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC4_SetConfig+0x80>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a15      	ldr	r2, [pc, #84]	; (800612c <TIM_OC4_SetConfig+0xd0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d109      	bne.n	80060f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	019b      	lsls	r3, r3, #6
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	feff8fff 	.word	0xfeff8fff
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4b21      	ldr	r3, [pc, #132]	; (80061e0 <TIM_OC5_SetConfig+0xb0>)
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006170:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <TIM_OC5_SetConfig+0xb4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_OC5_SetConfig+0x76>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <TIM_OC5_SetConfig+0xb8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_OC5_SetConfig+0x76>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a16      	ldr	r2, [pc, #88]	; (80061ec <TIM_OC5_SetConfig+0xbc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_OC5_SetConfig+0x76>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <TIM_OC5_SetConfig+0xc0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC5_SetConfig+0x76>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a14      	ldr	r2, [pc, #80]	; (80061f4 <TIM_OC5_SetConfig+0xc4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d109      	bne.n	80061ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	621a      	str	r2, [r3, #32]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	fffeff8f 	.word	0xfffeff8f
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40014400 	.word	0x40014400
 80061f4:	40014800 	.word	0x40014800

080061f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4b22      	ldr	r3, [pc, #136]	; (80062ac <TIM_OC6_SetConfig+0xb4>)
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800623a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	051b      	lsls	r3, r3, #20
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <TIM_OC6_SetConfig+0xb8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00f      	beq.n	8006270 <TIM_OC6_SetConfig+0x78>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <TIM_OC6_SetConfig+0xbc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_OC6_SetConfig+0x78>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <TIM_OC6_SetConfig+0xc0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_OC6_SetConfig+0x78>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a16      	ldr	r2, [pc, #88]	; (80062bc <TIM_OC6_SetConfig+0xc4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_OC6_SetConfig+0x78>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <TIM_OC6_SetConfig+0xc8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d109      	bne.n	8006284 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	029b      	lsls	r3, r3, #10
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	feff8fff 	.word	0xfeff8fff
 80062b0:	40010000 	.word	0x40010000
 80062b4:	40010400 	.word	0x40010400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800

080062c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0201 	bic.w	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f023 030a 	bic.w	r3, r3, #10
 8006300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006322:	b480      	push	{r7}
 8006324:	b087      	sub	sp, #28
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0210 	bic.w	r2, r3, #16
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800634c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	031b      	lsls	r3, r3, #12
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800635e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <TIM_ITRx_SetConfig+0x38>)
 8006398:	4013      	ands	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f043 0307 	orr.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	609a      	str	r2, [r3, #8]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	ffcfff8f 	.word	0xffcfff8f

080063c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	021a      	lsls	r2, r3, #8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2201      	movs	r2, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	43db      	mvns	r3, r3
 8006422:	401a      	ands	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	431a      	orrs	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006460:	2302      	movs	r3, #2
 8006462:	e06d      	b.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a30      	ldr	r2, [pc, #192]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a2f      	ldr	r2, [pc, #188]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d108      	bne.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800649e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a20      	ldr	r2, [pc, #128]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d022      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d6:	d01d      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d018      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1a      	ldr	r2, [pc, #104]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a15      	ldr	r2, [pc, #84]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a16      	ldr	r2, [pc, #88]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a15      	ldr	r2, [pc, #84]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d10c      	bne.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	4313      	orrs	r3, r2
 8006524:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40000c00 	.word	0x40000c00
 8006560:	40001800 	.word	0x40001800
 8006564:	40014000 	.word	0x40014000

08006568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e042      	b.n	8006600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	2b00      	cmp	r3, #0
 8006582:	d106      	bne.n	8006592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fa ff23 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2224      	movs	r2, #36	; 0x24
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0201 	bic.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fce0 	bl	8006f70 <UART_SetConfig>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e022      	b.n	8006600 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fb40 	bl	8007c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fbc7 	bl	8007d8c <UART_CheckIdleState>
 80065fe:	4603      	mov	r3, r0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af02      	add	r7, sp, #8
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	2b20      	cmp	r3, #32
 8006620:	d17b      	bne.n	800671a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_UART_Transmit+0x26>
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e074      	b.n	800671c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2221      	movs	r2, #33	; 0x21
 800663e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006642:	f7fb f87d 	bl	8001740 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006660:	d108      	bne.n	8006674 <HAL_UART_Transmit+0x6c>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	e003      	b.n	800667c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800667c:	e030      	b.n	80066e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2200      	movs	r2, #0
 8006686:	2180      	movs	r1, #128	; 0x80
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f001 fc29 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e03d      	b.n	800671c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10b      	bne.n	80066be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	3302      	adds	r3, #2
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e007      	b.n	80066ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	3301      	adds	r3, #1
 80066cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1c8      	bne.n	800667e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2200      	movs	r2, #0
 80066f4:	2140      	movs	r1, #64	; 0x40
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f001 fbf2 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e006      	b.n	800671c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006738:	2b20      	cmp	r3, #32
 800673a:	d137      	bne.n	80067ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_UART_Receive_IT+0x24>
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e030      	b.n	80067ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_UART_Receive_IT+0x94>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d01f      	beq.n	800679c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d018      	beq.n	800679c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	613b      	str	r3, [r7, #16]
   return(result);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	69f9      	ldr	r1, [r7, #28]
 800678e:	6a3a      	ldr	r2, [r7, #32]
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	61bb      	str	r3, [r7, #24]
   return(result);
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	461a      	mov	r2, r3
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f001 fc04 	bl	8007fb0 <UART_Start_Receive_IT>
 80067a8:	4603      	mov	r3, r0
 80067aa:	e000      	b.n	80067ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
  }
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3728      	adds	r7, #40	; 0x28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	58000c00 	.word	0x58000c00

080067bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b0ba      	sub	sp, #232	; 0xe8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80067ea:	4013      	ands	r3, r2
 80067ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d11b      	bne.n	8006830 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d015      	beq.n	8006830 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8377 	beq.w	8006f14 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
      }
      return;
 800682e:	e371      	b.n	8006f14 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8123 	beq.w	8006a80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800683a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800683e:	4b8d      	ldr	r3, [pc, #564]	; (8006a74 <HAL_UART_IRQHandler+0x2b8>)
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800684a:	4b8b      	ldr	r3, [pc, #556]	; (8006a78 <HAL_UART_IRQHandler+0x2bc>)
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8116 	beq.w	8006a80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d011      	beq.n	8006884 <HAL_UART_IRQHandler+0xc8>
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2201      	movs	r2, #1
 8006872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	f043 0201 	orr.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d011      	beq.n	80068b4 <HAL_UART_IRQHandler+0xf8>
 8006890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2202      	movs	r2, #2
 80068a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f043 0204 	orr.w	r2, r3, #4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d011      	beq.n	80068e4 <HAL_UART_IRQHandler+0x128>
 80068c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2204      	movs	r2, #4
 80068d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f043 0202 	orr.w	r2, r3, #2
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006900:	4b5c      	ldr	r3, [pc, #368]	; (8006a74 <HAL_UART_IRQHandler+0x2b8>)
 8006902:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2208      	movs	r2, #8
 800690e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f043 0208 	orr.w	r2, r3, #8
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006928:	2b00      	cmp	r3, #0
 800692a:	d012      	beq.n	8006952 <HAL_UART_IRQHandler+0x196>
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00c      	beq.n	8006952 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 82dd 	beq.w	8006f18 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800696a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	d105      	bne.n	8006982 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800697a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d005      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d054      	beq.n	8006a60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fc1c 	bl	80081f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d146      	bne.n	8006a58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <HAL_UART_IRQHandler+0x2c0>)
 8006a28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fb fae3 	bl	8001ffc <HAL_DMA_Abort_IT>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d019      	beq.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4e:	e00f      	b.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa77 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a56:	e00b      	b.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa73 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5e:	e007      	b.n	8006a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fa6f 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a6e:	e253      	b.n	8006f18 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	bf00      	nop
    return;
 8006a72:	e251      	b.n	8006f18 <HAL_UART_IRQHandler+0x75c>
 8006a74:	10000001 	.word	0x10000001
 8006a78:	04000120 	.word	0x04000120
 8006a7c:	080082c1 	.word	0x080082c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 81e7 	bne.w	8006e58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 81e0 	beq.w	8006e58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 81d9 	beq.w	8006e58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	f040 8151 	bne.w	8006d60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a96      	ldr	r2, [pc, #600]	; (8006d20 <HAL_UART_IRQHandler+0x564>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d068      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a93      	ldr	r2, [pc, #588]	; (8006d24 <HAL_UART_IRQHandler+0x568>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d061      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a91      	ldr	r2, [pc, #580]	; (8006d28 <HAL_UART_IRQHandler+0x56c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d05a      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a8e      	ldr	r2, [pc, #568]	; (8006d2c <HAL_UART_IRQHandler+0x570>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d053      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a8c      	ldr	r2, [pc, #560]	; (8006d30 <HAL_UART_IRQHandler+0x574>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04c      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a89      	ldr	r2, [pc, #548]	; (8006d34 <HAL_UART_IRQHandler+0x578>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d045      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a87      	ldr	r2, [pc, #540]	; (8006d38 <HAL_UART_IRQHandler+0x57c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d03e      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a84      	ldr	r2, [pc, #528]	; (8006d3c <HAL_UART_IRQHandler+0x580>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d037      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a82      	ldr	r2, [pc, #520]	; (8006d40 <HAL_UART_IRQHandler+0x584>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d030      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a7f      	ldr	r2, [pc, #508]	; (8006d44 <HAL_UART_IRQHandler+0x588>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d029      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a7d      	ldr	r2, [pc, #500]	; (8006d48 <HAL_UART_IRQHandler+0x58c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <HAL_UART_IRQHandler+0x590>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01b      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a78      	ldr	r2, [pc, #480]	; (8006d50 <HAL_UART_IRQHandler+0x594>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d014      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a75      	ldr	r2, [pc, #468]	; (8006d54 <HAL_UART_IRQHandler+0x598>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00d      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a73      	ldr	r2, [pc, #460]	; (8006d58 <HAL_UART_IRQHandler+0x59c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d006      	beq.n	8006b9e <HAL_UART_IRQHandler+0x3e2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a70      	ldr	r2, [pc, #448]	; (8006d5c <HAL_UART_IRQHandler+0x5a0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d106      	bne.n	8006bac <HAL_UART_IRQHandler+0x3f0>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	e005      	b.n	8006bb8 <HAL_UART_IRQHandler+0x3fc>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 81ab 	beq.w	8006f1c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f080 81a3 	bcs.w	8006f1c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bec:	f000 8087 	beq.w	8006cfe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1da      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e1      	bne.n	8006c3a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e3      	bne.n	8006c76 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ccc:	f023 0310 	bic.w	r3, r3, #16
 8006cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e4      	bne.n	8006cbc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fa fe61 	bl	80019c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f91d 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d1e:	e0fd      	b.n	8006f1c <HAL_UART_IRQHandler+0x760>
 8006d20:	40020010 	.word	0x40020010
 8006d24:	40020028 	.word	0x40020028
 8006d28:	40020040 	.word	0x40020040
 8006d2c:	40020058 	.word	0x40020058
 8006d30:	40020070 	.word	0x40020070
 8006d34:	40020088 	.word	0x40020088
 8006d38:	400200a0 	.word	0x400200a0
 8006d3c:	400200b8 	.word	0x400200b8
 8006d40:	40020410 	.word	0x40020410
 8006d44:	40020428 	.word	0x40020428
 8006d48:	40020440 	.word	0x40020440
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40020470 	.word	0x40020470
 8006d54:	40020488 	.word	0x40020488
 8006d58:	400204a0 	.word	0x400204a0
 8006d5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80cf 	beq.w	8006f20 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80ca 	beq.w	8006f20 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dae:	647b      	str	r3, [r7, #68]	; 0x44
 8006db0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e4      	bne.n	8006d8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	4b55      	ldr	r3, [pc, #340]	; (8006f2c <HAL_UART_IRQHandler+0x770>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006de6:	633a      	str	r2, [r7, #48]	; 0x30
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e3      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0310 	bic.w	r3, r3, #16
 8006e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	69b9      	ldr	r1, [r7, #24]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e4      	bne.n	8006e0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f881 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e56:	e063      	b.n	8006f20 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00e      	beq.n	8006e82 <HAL_UART_IRQHandler+0x6c6>
 8006e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d008      	beq.n	8006e82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 ff7e 	bl	8008d7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e80:	e051      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d014      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d03a      	beq.n	8006f24 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
    }
    return;
 8006eb6:	e035      	b.n	8006f24 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x71c>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fa0b 	bl	80082ec <UART_EndTransmit_IT>
    return;
 8006ed6:	e026      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x73c>
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 ff57 	bl	8008da4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ef6:	e016      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <HAL_UART_IRQHandler+0x76a>
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da0c      	bge.n	8006f26 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 ff3f 	bl	8008d90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f12:	e008      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8006f14:	bf00      	nop
 8006f16:	e006      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
    return;
 8006f18:	bf00      	nop
 8006f1a:	e004      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
      return;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <HAL_UART_IRQHandler+0x76a>
    return;
 8006f24:	bf00      	nop
  }
}
 8006f26:	37e8      	adds	r7, #232	; 0xe8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	effffffe 	.word	0xeffffffe

08006f30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f74:	b092      	sub	sp, #72	; 0x48
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4bbe      	ldr	r3, [pc, #760]	; (8007298 <UART_SetConfig+0x328>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4ab3      	ldr	r2, [pc, #716]	; (800729c <UART_SetConfig+0x32c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	4baf      	ldr	r3, [pc, #700]	; (80072a0 <UART_SetConfig+0x330>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	f023 010f 	bic.w	r1, r3, #15
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4aa6      	ldr	r2, [pc, #664]	; (80072a4 <UART_SetConfig+0x334>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d177      	bne.n	8007100 <UART_SetConfig+0x190>
 8007010:	4ba5      	ldr	r3, [pc, #660]	; (80072a8 <UART_SetConfig+0x338>)
 8007012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007014:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007018:	2b28      	cmp	r3, #40	; 0x28
 800701a:	d86d      	bhi.n	80070f8 <UART_SetConfig+0x188>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0xb4>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	080070c9 	.word	0x080070c9
 8007028:	080070f9 	.word	0x080070f9
 800702c:	080070f9 	.word	0x080070f9
 8007030:	080070f9 	.word	0x080070f9
 8007034:	080070f9 	.word	0x080070f9
 8007038:	080070f9 	.word	0x080070f9
 800703c:	080070f9 	.word	0x080070f9
 8007040:	080070f9 	.word	0x080070f9
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070f9 	.word	0x080070f9
 800704c:	080070f9 	.word	0x080070f9
 8007050:	080070f9 	.word	0x080070f9
 8007054:	080070f9 	.word	0x080070f9
 8007058:	080070f9 	.word	0x080070f9
 800705c:	080070f9 	.word	0x080070f9
 8007060:	080070f9 	.word	0x080070f9
 8007064:	080070d9 	.word	0x080070d9
 8007068:	080070f9 	.word	0x080070f9
 800706c:	080070f9 	.word	0x080070f9
 8007070:	080070f9 	.word	0x080070f9
 8007074:	080070f9 	.word	0x080070f9
 8007078:	080070f9 	.word	0x080070f9
 800707c:	080070f9 	.word	0x080070f9
 8007080:	080070f9 	.word	0x080070f9
 8007084:	080070e1 	.word	0x080070e1
 8007088:	080070f9 	.word	0x080070f9
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080070f9 	.word	0x080070f9
 8007094:	080070f9 	.word	0x080070f9
 8007098:	080070f9 	.word	0x080070f9
 800709c:	080070f9 	.word	0x080070f9
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070f9 	.word	0x080070f9
 80070ac:	080070f9 	.word	0x080070f9
 80070b0:	080070f9 	.word	0x080070f9
 80070b4:	080070f9 	.word	0x080070f9
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	080070f9 	.word	0x080070f9
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e326      	b.n	800771e <UART_SetConfig+0x7ae>
 80070d0:	2304      	movs	r3, #4
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e322      	b.n	800771e <UART_SetConfig+0x7ae>
 80070d8:	2308      	movs	r3, #8
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e31e      	b.n	800771e <UART_SetConfig+0x7ae>
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e31a      	b.n	800771e <UART_SetConfig+0x7ae>
 80070e8:	2320      	movs	r3, #32
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e316      	b.n	800771e <UART_SetConfig+0x7ae>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f6:	e312      	b.n	800771e <UART_SetConfig+0x7ae>
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fe:	e30e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a69      	ldr	r2, [pc, #420]	; (80072ac <UART_SetConfig+0x33c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d130      	bne.n	800716c <UART_SetConfig+0x1fc>
 800710a:	4b67      	ldr	r3, [pc, #412]	; (80072a8 <UART_SetConfig+0x338>)
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	2b05      	cmp	r3, #5
 8007114:	d826      	bhi.n	8007164 <UART_SetConfig+0x1f4>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x1ac>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007135 	.word	0x08007135
 8007120:	0800713d 	.word	0x0800713d
 8007124:	08007145 	.word	0x08007145
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e2f0      	b.n	800771e <UART_SetConfig+0x7ae>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e2ec      	b.n	800771e <UART_SetConfig+0x7ae>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e2e8      	b.n	800771e <UART_SetConfig+0x7ae>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e2e4      	b.n	800771e <UART_SetConfig+0x7ae>
 8007154:	2320      	movs	r3, #32
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e2e0      	b.n	800771e <UART_SetConfig+0x7ae>
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e2dc      	b.n	800771e <UART_SetConfig+0x7ae>
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716a:	e2d8      	b.n	800771e <UART_SetConfig+0x7ae>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a4f      	ldr	r2, [pc, #316]	; (80072b0 <UART_SetConfig+0x340>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d130      	bne.n	80071d8 <UART_SetConfig+0x268>
 8007176:	4b4c      	ldr	r3, [pc, #304]	; (80072a8 <UART_SetConfig+0x338>)
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	2b05      	cmp	r3, #5
 8007180:	d826      	bhi.n	80071d0 <UART_SetConfig+0x260>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x218>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071a1 	.word	0x080071a1
 800718c:	080071a9 	.word	0x080071a9
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071c1 	.word	0x080071c1
 800719c:	080071c9 	.word	0x080071c9
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e2ba      	b.n	800771e <UART_SetConfig+0x7ae>
 80071a8:	2304      	movs	r3, #4
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e2b6      	b.n	800771e <UART_SetConfig+0x7ae>
 80071b0:	2308      	movs	r3, #8
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e2b2      	b.n	800771e <UART_SetConfig+0x7ae>
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071be:	e2ae      	b.n	800771e <UART_SetConfig+0x7ae>
 80071c0:	2320      	movs	r3, #32
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c6:	e2aa      	b.n	800771e <UART_SetConfig+0x7ae>
 80071c8:	2340      	movs	r3, #64	; 0x40
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ce:	e2a6      	b.n	800771e <UART_SetConfig+0x7ae>
 80071d0:	2380      	movs	r3, #128	; 0x80
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d6:	e2a2      	b.n	800771e <UART_SetConfig+0x7ae>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a35      	ldr	r2, [pc, #212]	; (80072b4 <UART_SetConfig+0x344>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d130      	bne.n	8007244 <UART_SetConfig+0x2d4>
 80071e2:	4b31      	ldr	r3, [pc, #196]	; (80072a8 <UART_SetConfig+0x338>)
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d826      	bhi.n	800723c <UART_SetConfig+0x2cc>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0x284>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	0800720d 	.word	0x0800720d
 80071f8:	08007215 	.word	0x08007215
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	08007225 	.word	0x08007225
 8007204:	0800722d 	.word	0x0800722d
 8007208:	08007235 	.word	0x08007235
 800720c:	2300      	movs	r3, #0
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007212:	e284      	b.n	800771e <UART_SetConfig+0x7ae>
 8007214:	2304      	movs	r3, #4
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721a:	e280      	b.n	800771e <UART_SetConfig+0x7ae>
 800721c:	2308      	movs	r3, #8
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007222:	e27c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007224:	2310      	movs	r3, #16
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722a:	e278      	b.n	800771e <UART_SetConfig+0x7ae>
 800722c:	2320      	movs	r3, #32
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007232:	e274      	b.n	800771e <UART_SetConfig+0x7ae>
 8007234:	2340      	movs	r3, #64	; 0x40
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723a:	e270      	b.n	800771e <UART_SetConfig+0x7ae>
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007242:	e26c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <UART_SetConfig+0x348>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d142      	bne.n	80072d4 <UART_SetConfig+0x364>
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <UART_SetConfig+0x338>)
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	2b05      	cmp	r3, #5
 8007258:	d838      	bhi.n	80072cc <UART_SetConfig+0x35c>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <UART_SetConfig+0x2f0>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007279 	.word	0x08007279
 8007264:	08007281 	.word	0x08007281
 8007268:	08007289 	.word	0x08007289
 800726c:	08007291 	.word	0x08007291
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072c5 	.word	0x080072c5
 8007278:	2300      	movs	r3, #0
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727e:	e24e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007280:	2304      	movs	r3, #4
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007286:	e24a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007288:	2308      	movs	r3, #8
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728e:	e246      	b.n	800771e <UART_SetConfig+0x7ae>
 8007290:	2310      	movs	r3, #16
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007296:	e242      	b.n	800771e <UART_SetConfig+0x7ae>
 8007298:	cfff69f3 	.word	0xcfff69f3
 800729c:	58000c00 	.word	0x58000c00
 80072a0:	11fff4ff 	.word	0x11fff4ff
 80072a4:	40011000 	.word	0x40011000
 80072a8:	58024400 	.word	0x58024400
 80072ac:	40004400 	.word	0x40004400
 80072b0:	40004800 	.word	0x40004800
 80072b4:	40004c00 	.word	0x40004c00
 80072b8:	40005000 	.word	0x40005000
 80072bc:	2320      	movs	r3, #32
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e22c      	b.n	800771e <UART_SetConfig+0x7ae>
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e228      	b.n	800771e <UART_SetConfig+0x7ae>
 80072cc:	2380      	movs	r3, #128	; 0x80
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e224      	b.n	800771e <UART_SetConfig+0x7ae>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4ab1      	ldr	r2, [pc, #708]	; (80075a0 <UART_SetConfig+0x630>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d176      	bne.n	80073cc <UART_SetConfig+0x45c>
 80072de:	4bb1      	ldr	r3, [pc, #708]	; (80075a4 <UART_SetConfig+0x634>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072e6:	2b28      	cmp	r3, #40	; 0x28
 80072e8:	d86c      	bhi.n	80073c4 <UART_SetConfig+0x454>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x380>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007395 	.word	0x08007395
 80072f4:	080073c5 	.word	0x080073c5
 80072f8:	080073c5 	.word	0x080073c5
 80072fc:	080073c5 	.word	0x080073c5
 8007300:	080073c5 	.word	0x080073c5
 8007304:	080073c5 	.word	0x080073c5
 8007308:	080073c5 	.word	0x080073c5
 800730c:	080073c5 	.word	0x080073c5
 8007310:	0800739d 	.word	0x0800739d
 8007314:	080073c5 	.word	0x080073c5
 8007318:	080073c5 	.word	0x080073c5
 800731c:	080073c5 	.word	0x080073c5
 8007320:	080073c5 	.word	0x080073c5
 8007324:	080073c5 	.word	0x080073c5
 8007328:	080073c5 	.word	0x080073c5
 800732c:	080073c5 	.word	0x080073c5
 8007330:	080073a5 	.word	0x080073a5
 8007334:	080073c5 	.word	0x080073c5
 8007338:	080073c5 	.word	0x080073c5
 800733c:	080073c5 	.word	0x080073c5
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073c5 	.word	0x080073c5
 8007348:	080073c5 	.word	0x080073c5
 800734c:	080073c5 	.word	0x080073c5
 8007350:	080073ad 	.word	0x080073ad
 8007354:	080073c5 	.word	0x080073c5
 8007358:	080073c5 	.word	0x080073c5
 800735c:	080073c5 	.word	0x080073c5
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073c5 	.word	0x080073c5
 8007368:	080073c5 	.word	0x080073c5
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073b5 	.word	0x080073b5
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073c5 	.word	0x080073c5
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073c5 	.word	0x080073c5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073bd 	.word	0x080073bd
 8007394:	2301      	movs	r3, #1
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e1c0      	b.n	800771e <UART_SetConfig+0x7ae>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e1bc      	b.n	800771e <UART_SetConfig+0x7ae>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e1b8      	b.n	800771e <UART_SetConfig+0x7ae>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e1b4      	b.n	800771e <UART_SetConfig+0x7ae>
 80073b4:	2320      	movs	r3, #32
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e1b0      	b.n	800771e <UART_SetConfig+0x7ae>
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c2:	e1ac      	b.n	800771e <UART_SetConfig+0x7ae>
 80073c4:	2380      	movs	r3, #128	; 0x80
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ca:	e1a8      	b.n	800771e <UART_SetConfig+0x7ae>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a75      	ldr	r2, [pc, #468]	; (80075a8 <UART_SetConfig+0x638>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d130      	bne.n	8007438 <UART_SetConfig+0x4c8>
 80073d6:	4b73      	ldr	r3, [pc, #460]	; (80075a4 <UART_SetConfig+0x634>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d826      	bhi.n	8007430 <UART_SetConfig+0x4c0>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0x478>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007401 	.word	0x08007401
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007411 	.word	0x08007411
 80073f4:	08007419 	.word	0x08007419
 80073f8:	08007421 	.word	0x08007421
 80073fc:	08007429 	.word	0x08007429
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e18a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e186      	b.n	800771e <UART_SetConfig+0x7ae>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e182      	b.n	800771e <UART_SetConfig+0x7ae>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e17e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007420:	2320      	movs	r3, #32
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e17a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742e:	e176      	b.n	800771e <UART_SetConfig+0x7ae>
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e172      	b.n	800771e <UART_SetConfig+0x7ae>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a5b      	ldr	r2, [pc, #364]	; (80075ac <UART_SetConfig+0x63c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d130      	bne.n	80074a4 <UART_SetConfig+0x534>
 8007442:	4b58      	ldr	r3, [pc, #352]	; (80075a4 <UART_SetConfig+0x634>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b05      	cmp	r3, #5
 800744c:	d826      	bhi.n	800749c <UART_SetConfig+0x52c>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x4e4>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	0800746d 	.word	0x0800746d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800747d 	.word	0x0800747d
 8007460:	08007485 	.word	0x08007485
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007495 	.word	0x08007495
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e154      	b.n	800771e <UART_SetConfig+0x7ae>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e150      	b.n	800771e <UART_SetConfig+0x7ae>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007482:	e14c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748a:	e148      	b.n	800771e <UART_SetConfig+0x7ae>
 800748c:	2320      	movs	r3, #32
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007492:	e144      	b.n	800771e <UART_SetConfig+0x7ae>
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749a:	e140      	b.n	800771e <UART_SetConfig+0x7ae>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e13c      	b.n	800771e <UART_SetConfig+0x7ae>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a41      	ldr	r2, [pc, #260]	; (80075b0 <UART_SetConfig+0x640>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	f040 8082 	bne.w	80075b4 <UART_SetConfig+0x644>
 80074b0:	4b3c      	ldr	r3, [pc, #240]	; (80075a4 <UART_SetConfig+0x634>)
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074b8:	2b28      	cmp	r3, #40	; 0x28
 80074ba:	d86d      	bhi.n	8007598 <UART_SetConfig+0x628>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x554>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007569 	.word	0x08007569
 80074c8:	08007599 	.word	0x08007599
 80074cc:	08007599 	.word	0x08007599
 80074d0:	08007599 	.word	0x08007599
 80074d4:	08007599 	.word	0x08007599
 80074d8:	08007599 	.word	0x08007599
 80074dc:	08007599 	.word	0x08007599
 80074e0:	08007599 	.word	0x08007599
 80074e4:	08007571 	.word	0x08007571
 80074e8:	08007599 	.word	0x08007599
 80074ec:	08007599 	.word	0x08007599
 80074f0:	08007599 	.word	0x08007599
 80074f4:	08007599 	.word	0x08007599
 80074f8:	08007599 	.word	0x08007599
 80074fc:	08007599 	.word	0x08007599
 8007500:	08007599 	.word	0x08007599
 8007504:	08007579 	.word	0x08007579
 8007508:	08007599 	.word	0x08007599
 800750c:	08007599 	.word	0x08007599
 8007510:	08007599 	.word	0x08007599
 8007514:	08007599 	.word	0x08007599
 8007518:	08007599 	.word	0x08007599
 800751c:	08007599 	.word	0x08007599
 8007520:	08007599 	.word	0x08007599
 8007524:	08007581 	.word	0x08007581
 8007528:	08007599 	.word	0x08007599
 800752c:	08007599 	.word	0x08007599
 8007530:	08007599 	.word	0x08007599
 8007534:	08007599 	.word	0x08007599
 8007538:	08007599 	.word	0x08007599
 800753c:	08007599 	.word	0x08007599
 8007540:	08007599 	.word	0x08007599
 8007544:	08007589 	.word	0x08007589
 8007548:	08007599 	.word	0x08007599
 800754c:	08007599 	.word	0x08007599
 8007550:	08007599 	.word	0x08007599
 8007554:	08007599 	.word	0x08007599
 8007558:	08007599 	.word	0x08007599
 800755c:	08007599 	.word	0x08007599
 8007560:	08007599 	.word	0x08007599
 8007564:	08007591 	.word	0x08007591
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e0d6      	b.n	800771e <UART_SetConfig+0x7ae>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e0d2      	b.n	800771e <UART_SetConfig+0x7ae>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e0ce      	b.n	800771e <UART_SetConfig+0x7ae>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e0ca      	b.n	800771e <UART_SetConfig+0x7ae>
 8007588:	2320      	movs	r3, #32
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e0c6      	b.n	800771e <UART_SetConfig+0x7ae>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e0c2      	b.n	800771e <UART_SetConfig+0x7ae>
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e0be      	b.n	800771e <UART_SetConfig+0x7ae>
 80075a0:	40011400 	.word	0x40011400
 80075a4:	58024400 	.word	0x58024400
 80075a8:	40007800 	.word	0x40007800
 80075ac:	40007c00 	.word	0x40007c00
 80075b0:	40011800 	.word	0x40011800
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4aad      	ldr	r2, [pc, #692]	; (8007870 <UART_SetConfig+0x900>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d176      	bne.n	80076ac <UART_SetConfig+0x73c>
 80075be:	4bad      	ldr	r3, [pc, #692]	; (8007874 <UART_SetConfig+0x904>)
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075c6:	2b28      	cmp	r3, #40	; 0x28
 80075c8:	d86c      	bhi.n	80076a4 <UART_SetConfig+0x734>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x660>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007675 	.word	0x08007675
 80075d4:	080076a5 	.word	0x080076a5
 80075d8:	080076a5 	.word	0x080076a5
 80075dc:	080076a5 	.word	0x080076a5
 80075e0:	080076a5 	.word	0x080076a5
 80075e4:	080076a5 	.word	0x080076a5
 80075e8:	080076a5 	.word	0x080076a5
 80075ec:	080076a5 	.word	0x080076a5
 80075f0:	0800767d 	.word	0x0800767d
 80075f4:	080076a5 	.word	0x080076a5
 80075f8:	080076a5 	.word	0x080076a5
 80075fc:	080076a5 	.word	0x080076a5
 8007600:	080076a5 	.word	0x080076a5
 8007604:	080076a5 	.word	0x080076a5
 8007608:	080076a5 	.word	0x080076a5
 800760c:	080076a5 	.word	0x080076a5
 8007610:	08007685 	.word	0x08007685
 8007614:	080076a5 	.word	0x080076a5
 8007618:	080076a5 	.word	0x080076a5
 800761c:	080076a5 	.word	0x080076a5
 8007620:	080076a5 	.word	0x080076a5
 8007624:	080076a5 	.word	0x080076a5
 8007628:	080076a5 	.word	0x080076a5
 800762c:	080076a5 	.word	0x080076a5
 8007630:	0800768d 	.word	0x0800768d
 8007634:	080076a5 	.word	0x080076a5
 8007638:	080076a5 	.word	0x080076a5
 800763c:	080076a5 	.word	0x080076a5
 8007640:	080076a5 	.word	0x080076a5
 8007644:	080076a5 	.word	0x080076a5
 8007648:	080076a5 	.word	0x080076a5
 800764c:	080076a5 	.word	0x080076a5
 8007650:	08007695 	.word	0x08007695
 8007654:	080076a5 	.word	0x080076a5
 8007658:	080076a5 	.word	0x080076a5
 800765c:	080076a5 	.word	0x080076a5
 8007660:	080076a5 	.word	0x080076a5
 8007664:	080076a5 	.word	0x080076a5
 8007668:	080076a5 	.word	0x080076a5
 800766c:	080076a5 	.word	0x080076a5
 8007670:	0800769d 	.word	0x0800769d
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e050      	b.n	800771e <UART_SetConfig+0x7ae>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e04c      	b.n	800771e <UART_SetConfig+0x7ae>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e048      	b.n	800771e <UART_SetConfig+0x7ae>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e044      	b.n	800771e <UART_SetConfig+0x7ae>
 8007694:	2320      	movs	r3, #32
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e040      	b.n	800771e <UART_SetConfig+0x7ae>
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e03c      	b.n	800771e <UART_SetConfig+0x7ae>
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e038      	b.n	800771e <UART_SetConfig+0x7ae>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a71      	ldr	r2, [pc, #452]	; (8007878 <UART_SetConfig+0x908>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d130      	bne.n	8007718 <UART_SetConfig+0x7a8>
 80076b6:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <UART_SetConfig+0x904>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b05      	cmp	r3, #5
 80076c0:	d826      	bhi.n	8007710 <UART_SetConfig+0x7a0>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0x758>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007701 	.word	0x08007701
 80076dc:	08007709 	.word	0x08007709
 80076e0:	2302      	movs	r3, #2
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e01a      	b.n	800771e <UART_SetConfig+0x7ae>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e016      	b.n	800771e <UART_SetConfig+0x7ae>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e012      	b.n	800771e <UART_SetConfig+0x7ae>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e00e      	b.n	800771e <UART_SetConfig+0x7ae>
 8007700:	2320      	movs	r3, #32
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e00a      	b.n	800771e <UART_SetConfig+0x7ae>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e006      	b.n	800771e <UART_SetConfig+0x7ae>
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e002      	b.n	800771e <UART_SetConfig+0x7ae>
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a55      	ldr	r2, [pc, #340]	; (8007878 <UART_SetConfig+0x908>)
 8007724:	4293      	cmp	r3, r2
 8007726:	f040 80f8 	bne.w	800791a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800772a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800772e:	2b20      	cmp	r3, #32
 8007730:	dc46      	bgt.n	80077c0 <UART_SetConfig+0x850>
 8007732:	2b02      	cmp	r3, #2
 8007734:	db75      	blt.n	8007822 <UART_SetConfig+0x8b2>
 8007736:	3b02      	subs	r3, #2
 8007738:	2b1e      	cmp	r3, #30
 800773a:	d872      	bhi.n	8007822 <UART_SetConfig+0x8b2>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <UART_SetConfig+0x7d4>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	080077c7 	.word	0x080077c7
 8007748:	08007823 	.word	0x08007823
 800774c:	080077cf 	.word	0x080077cf
 8007750:	08007823 	.word	0x08007823
 8007754:	08007823 	.word	0x08007823
 8007758:	08007823 	.word	0x08007823
 800775c:	080077df 	.word	0x080077df
 8007760:	08007823 	.word	0x08007823
 8007764:	08007823 	.word	0x08007823
 8007768:	08007823 	.word	0x08007823
 800776c:	08007823 	.word	0x08007823
 8007770:	08007823 	.word	0x08007823
 8007774:	08007823 	.word	0x08007823
 8007778:	08007823 	.word	0x08007823
 800777c:	080077ef 	.word	0x080077ef
 8007780:	08007823 	.word	0x08007823
 8007784:	08007823 	.word	0x08007823
 8007788:	08007823 	.word	0x08007823
 800778c:	08007823 	.word	0x08007823
 8007790:	08007823 	.word	0x08007823
 8007794:	08007823 	.word	0x08007823
 8007798:	08007823 	.word	0x08007823
 800779c:	08007823 	.word	0x08007823
 80077a0:	08007823 	.word	0x08007823
 80077a4:	08007823 	.word	0x08007823
 80077a8:	08007823 	.word	0x08007823
 80077ac:	08007823 	.word	0x08007823
 80077b0:	08007823 	.word	0x08007823
 80077b4:	08007823 	.word	0x08007823
 80077b8:	08007823 	.word	0x08007823
 80077bc:	08007815 	.word	0x08007815
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d02a      	beq.n	800781a <UART_SetConfig+0x8aa>
 80077c4:	e02d      	b.n	8007822 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077c6:	f7fd fa19 	bl	8004bfc <HAL_RCCEx_GetD3PCLK1Freq>
 80077ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077cc:	e02f      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fd fa28 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077dc:	e027      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077de:	f107 0318 	add.w	r3, r7, #24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd fb74 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ec:	e01f      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ee:	4b21      	ldr	r3, [pc, #132]	; (8007874 <UART_SetConfig+0x904>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077fa:	4b1e      	ldr	r3, [pc, #120]	; (8007874 <UART_SetConfig+0x904>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	08db      	lsrs	r3, r3, #3
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	4a1d      	ldr	r2, [pc, #116]	; (800787c <UART_SetConfig+0x90c>)
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800780c:	e00f      	b.n	800782e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800780e:	4b1b      	ldr	r3, [pc, #108]	; (800787c <UART_SetConfig+0x90c>)
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007812:	e00c      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007814:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <UART_SetConfig+0x910>)
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007818:	e009      	b.n	800782e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007820:	e005      	b.n	800782e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800782c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800782e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 81ee 	beq.w	8007c12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	4a12      	ldr	r2, [pc, #72]	; (8007884 <UART_SetConfig+0x914>)
 800783c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007840:	461a      	mov	r2, r3
 8007842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007844:	fbb3 f3f2 	udiv	r3, r3, r2
 8007848:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4413      	add	r3, r2
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	429a      	cmp	r2, r3
 8007858:	d305      	bcc.n	8007866 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007862:	429a      	cmp	r2, r3
 8007864:	d910      	bls.n	8007888 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800786c:	e1d1      	b.n	8007c12 <UART_SetConfig+0xca2>
 800786e:	bf00      	nop
 8007870:	40011c00 	.word	0x40011c00
 8007874:	58024400 	.word	0x58024400
 8007878:	58000c00 	.word	0x58000c00
 800787c:	03d09000 	.word	0x03d09000
 8007880:	003d0900 	.word	0x003d0900
 8007884:	08009994 	.word	0x08009994
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788a:	2200      	movs	r2, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	60fa      	str	r2, [r7, #12]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	4ac0      	ldr	r2, [pc, #768]	; (8007b98 <UART_SetConfig+0xc28>)
 8007896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800789a:	b29b      	uxth	r3, r3
 800789c:	2200      	movs	r2, #0
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078aa:	f7f8 fd71 	bl	8000390 <__aeabi_uldivmod>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	f04f 0300 	mov.w	r3, #0
 80078be:	020b      	lsls	r3, r1, #8
 80078c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078c4:	0202      	lsls	r2, r0, #8
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	6849      	ldr	r1, [r1, #4]
 80078ca:	0849      	lsrs	r1, r1, #1
 80078cc:	2000      	movs	r0, #0
 80078ce:	460c      	mov	r4, r1
 80078d0:	4605      	mov	r5, r0
 80078d2:	eb12 0804 	adds.w	r8, r2, r4
 80078d6:	eb43 0905 	adc.w	r9, r3, r5
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	469a      	mov	sl, r3
 80078e2:	4693      	mov	fp, r2
 80078e4:	4652      	mov	r2, sl
 80078e6:	465b      	mov	r3, fp
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f8 fd50 	bl	8000390 <__aeabi_uldivmod>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4613      	mov	r3, r2
 80078f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078fe:	d308      	bcc.n	8007912 <UART_SetConfig+0x9a2>
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007906:	d204      	bcs.n	8007912 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800790e:	60da      	str	r2, [r3, #12]
 8007910:	e17f      	b.n	8007c12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007918:	e17b      	b.n	8007c12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007922:	f040 80bd 	bne.w	8007aa0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007926:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800792a:	2b20      	cmp	r3, #32
 800792c:	dc48      	bgt.n	80079c0 <UART_SetConfig+0xa50>
 800792e:	2b00      	cmp	r3, #0
 8007930:	db7b      	blt.n	8007a2a <UART_SetConfig+0xaba>
 8007932:	2b20      	cmp	r3, #32
 8007934:	d879      	bhi.n	8007a2a <UART_SetConfig+0xaba>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0x9cc>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	080079c7 	.word	0x080079c7
 8007940:	080079cf 	.word	0x080079cf
 8007944:	08007a2b 	.word	0x08007a2b
 8007948:	08007a2b 	.word	0x08007a2b
 800794c:	080079d7 	.word	0x080079d7
 8007950:	08007a2b 	.word	0x08007a2b
 8007954:	08007a2b 	.word	0x08007a2b
 8007958:	08007a2b 	.word	0x08007a2b
 800795c:	080079e7 	.word	0x080079e7
 8007960:	08007a2b 	.word	0x08007a2b
 8007964:	08007a2b 	.word	0x08007a2b
 8007968:	08007a2b 	.word	0x08007a2b
 800796c:	08007a2b 	.word	0x08007a2b
 8007970:	08007a2b 	.word	0x08007a2b
 8007974:	08007a2b 	.word	0x08007a2b
 8007978:	08007a2b 	.word	0x08007a2b
 800797c:	080079f7 	.word	0x080079f7
 8007980:	08007a2b 	.word	0x08007a2b
 8007984:	08007a2b 	.word	0x08007a2b
 8007988:	08007a2b 	.word	0x08007a2b
 800798c:	08007a2b 	.word	0x08007a2b
 8007990:	08007a2b 	.word	0x08007a2b
 8007994:	08007a2b 	.word	0x08007a2b
 8007998:	08007a2b 	.word	0x08007a2b
 800799c:	08007a2b 	.word	0x08007a2b
 80079a0:	08007a2b 	.word	0x08007a2b
 80079a4:	08007a2b 	.word	0x08007a2b
 80079a8:	08007a2b 	.word	0x08007a2b
 80079ac:	08007a2b 	.word	0x08007a2b
 80079b0:	08007a2b 	.word	0x08007a2b
 80079b4:	08007a2b 	.word	0x08007a2b
 80079b8:	08007a2b 	.word	0x08007a2b
 80079bc:	08007a1d 	.word	0x08007a1d
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d02e      	beq.n	8007a22 <UART_SetConfig+0xab2>
 80079c4:	e031      	b.n	8007a2a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c6:	f7fb ff2f 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80079ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079cc:	e033      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ce:	f7fb ff41 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 80079d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d4:	e02f      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fd f924 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079e4:	e027      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e6:	f107 0318 	add.w	r3, r7, #24
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fd fa70 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f4:	e01f      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f6:	4b69      	ldr	r3, [pc, #420]	; (8007b9c <UART_SetConfig+0xc2c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a02:	4b66      	ldr	r3, [pc, #408]	; (8007b9c <UART_SetConfig+0xc2c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	4a64      	ldr	r2, [pc, #400]	; (8007ba0 <UART_SetConfig+0xc30>)
 8007a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a14:	e00f      	b.n	8007a36 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007a16:	4b62      	ldr	r3, [pc, #392]	; (8007ba0 <UART_SetConfig+0xc30>)
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a1a:	e00c      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a1c:	4b61      	ldr	r3, [pc, #388]	; (8007ba4 <UART_SetConfig+0xc34>)
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a20:	e009      	b.n	8007a36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a28:	e005      	b.n	8007a36 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80ea 	beq.w	8007c12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	4a55      	ldr	r2, [pc, #340]	; (8007b98 <UART_SetConfig+0xc28>)
 8007a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a50:	005a      	lsls	r2, r3, #1
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	441a      	add	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d916      	bls.n	8007a98 <UART_SetConfig+0xb28>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d212      	bcs.n	8007a98 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f023 030f 	bic.w	r3, r3, #15
 8007a7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	e0bc      	b.n	8007c12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a9e:	e0b8      	b.n	8007c12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aa0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	dc4b      	bgt.n	8007b40 <UART_SetConfig+0xbd0>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f2c0 8087 	blt.w	8007bbc <UART_SetConfig+0xc4c>
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	f200 8084 	bhi.w	8007bbc <UART_SetConfig+0xc4c>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <UART_SetConfig+0xb4c>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007b47 	.word	0x08007b47
 8007ac0:	08007b4f 	.word	0x08007b4f
 8007ac4:	08007bbd 	.word	0x08007bbd
 8007ac8:	08007bbd 	.word	0x08007bbd
 8007acc:	08007b57 	.word	0x08007b57
 8007ad0:	08007bbd 	.word	0x08007bbd
 8007ad4:	08007bbd 	.word	0x08007bbd
 8007ad8:	08007bbd 	.word	0x08007bbd
 8007adc:	08007b67 	.word	0x08007b67
 8007ae0:	08007bbd 	.word	0x08007bbd
 8007ae4:	08007bbd 	.word	0x08007bbd
 8007ae8:	08007bbd 	.word	0x08007bbd
 8007aec:	08007bbd 	.word	0x08007bbd
 8007af0:	08007bbd 	.word	0x08007bbd
 8007af4:	08007bbd 	.word	0x08007bbd
 8007af8:	08007bbd 	.word	0x08007bbd
 8007afc:	08007b77 	.word	0x08007b77
 8007b00:	08007bbd 	.word	0x08007bbd
 8007b04:	08007bbd 	.word	0x08007bbd
 8007b08:	08007bbd 	.word	0x08007bbd
 8007b0c:	08007bbd 	.word	0x08007bbd
 8007b10:	08007bbd 	.word	0x08007bbd
 8007b14:	08007bbd 	.word	0x08007bbd
 8007b18:	08007bbd 	.word	0x08007bbd
 8007b1c:	08007bbd 	.word	0x08007bbd
 8007b20:	08007bbd 	.word	0x08007bbd
 8007b24:	08007bbd 	.word	0x08007bbd
 8007b28:	08007bbd 	.word	0x08007bbd
 8007b2c:	08007bbd 	.word	0x08007bbd
 8007b30:	08007bbd 	.word	0x08007bbd
 8007b34:	08007bbd 	.word	0x08007bbd
 8007b38:	08007bbd 	.word	0x08007bbd
 8007b3c:	08007baf 	.word	0x08007baf
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d037      	beq.n	8007bb4 <UART_SetConfig+0xc44>
 8007b44:	e03a      	b.n	8007bbc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b46:	f7fb fe6f 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8007b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b4c:	e03c      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b4e:	f7fb fe81 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8007b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b54:	e038      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd f864 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b64:	e030      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b66:	f107 0318 	add.w	r3, r7, #24
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fd f9b0 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b74:	e028      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b76:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <UART_SetConfig+0xc2c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d012      	beq.n	8007ba8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b82:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <UART_SetConfig+0xc2c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	08db      	lsrs	r3, r3, #3
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	4a04      	ldr	r2, [pc, #16]	; (8007ba0 <UART_SetConfig+0xc30>)
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b94:	e018      	b.n	8007bc8 <UART_SetConfig+0xc58>
 8007b96:	bf00      	nop
 8007b98:	08009994 	.word	0x08009994
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	03d09000 	.word	0x03d09000
 8007ba4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007ba8:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <UART_SetConfig+0xccc>)
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bac:	e00c      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bae:	4b24      	ldr	r3, [pc, #144]	; (8007c40 <UART_SetConfig+0xcd0>)
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bb2:	e009      	b.n	8007bc8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bba:	e005      	b.n	8007bc8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d021      	beq.n	8007c12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <UART_SetConfig+0xcd4>)
 8007bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	441a      	add	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	2b0f      	cmp	r3, #15
 8007bf6:	d909      	bls.n	8007c0c <UART_SetConfig+0xc9c>
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfe:	d205      	bcs.n	8007c0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60da      	str	r2, [r3, #12]
 8007c0a:	e002      	b.n	8007c12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2200      	movs	r2, #0
 8007c26:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007c2e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3748      	adds	r7, #72	; 0x48
 8007c36:	46bd      	mov	sp, r7
 8007c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c3c:	03d09000 	.word	0x03d09000
 8007c40:	003d0900 	.word	0x003d0900
 8007c44:	08009994 	.word	0x08009994

08007c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01a      	beq.n	8007d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d46:	d10a      	bne.n	8007d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b098      	sub	sp, #96	; 0x60
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d9c:	f7f9 fcd0 	bl	8001740 <HAL_GetTick>
 8007da0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d12f      	bne.n	8007e10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db8:	2200      	movs	r2, #0
 8007dba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f88e 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d022      	beq.n	8007e10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dde:	653b      	str	r3, [r7, #80]	; 0x50
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e6      	bne.n	8007dca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e063      	b.n	8007ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d149      	bne.n	8007eb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e26:	2200      	movs	r2, #0
 8007e28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f857 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d03c      	beq.n	8007eb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	623b      	str	r3, [r7, #32]
   return(result);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
 8007e58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e6      	bne.n	8007e38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e8a:	61fa      	str	r2, [r7, #28]
 8007e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	69b9      	ldr	r1, [r7, #24]
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	617b      	str	r3, [r7, #20]
   return(result);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e5      	bne.n	8007e6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e012      	b.n	8007ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3758      	adds	r7, #88	; 0x58
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef0:	e049      	b.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef8:	d045      	beq.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efa:	f7f9 fc21 	bl	8001740 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e048      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d031      	beq.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	f003 0308 	and.w	r3, r3, #8
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d110      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2208      	movs	r2, #8
 8007f36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 f95b 	bl	80081f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2208      	movs	r2, #8
 8007f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e029      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f60:	d111      	bne.n	8007f86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f941 	bl	80081f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e00f      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	bf0c      	ite	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	2300      	movne	r3, #0
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d0a6      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b0a3      	sub	sp, #140	; 0x8c
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	88fa      	ldrh	r2, [r7, #6]
 8007fc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe2:	d10e      	bne.n	8008002 <UART_Start_Receive_IT+0x52>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d105      	bne.n	8007ff8 <UART_Start_Receive_IT+0x48>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ff2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ff6:	e02d      	b.n	8008054 <UART_Start_Receive_IT+0xa4>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	22ff      	movs	r2, #255	; 0xff
 8007ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008000:	e028      	b.n	8008054 <UART_Start_Receive_IT+0xa4>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10d      	bne.n	8008026 <UART_Start_Receive_IT+0x76>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <UART_Start_Receive_IT+0x6c>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	22ff      	movs	r2, #255	; 0xff
 8008016:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800801a:	e01b      	b.n	8008054 <UART_Start_Receive_IT+0xa4>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	227f      	movs	r2, #127	; 0x7f
 8008020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008024:	e016      	b.n	8008054 <UART_Start_Receive_IT+0xa4>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800802e:	d10d      	bne.n	800804c <UART_Start_Receive_IT+0x9c>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d104      	bne.n	8008042 <UART_Start_Receive_IT+0x92>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	227f      	movs	r2, #127	; 0x7f
 800803c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008040:	e008      	b.n	8008054 <UART_Start_Receive_IT+0xa4>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	223f      	movs	r2, #63	; 0x3f
 8008046:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800804a:	e003      	b.n	8008054 <UART_Start_Receive_IT+0xa4>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2222      	movs	r2, #34	; 0x22
 8008060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3308      	adds	r3, #8
 800806a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008088:	673a      	str	r2, [r7, #112]	; 0x70
 800808a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800808e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e3      	bne.n	8008064 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a4:	d14f      	bne.n	8008146 <UART_Start_Receive_IT+0x196>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080ac:	88fa      	ldrh	r2, [r7, #6]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d349      	bcc.n	8008146 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ba:	d107      	bne.n	80080cc <UART_Start_Receive_IT+0x11c>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a47      	ldr	r2, [pc, #284]	; (80081e4 <UART_Start_Receive_IT+0x234>)
 80080c8:	675a      	str	r2, [r3, #116]	; 0x74
 80080ca:	e002      	b.n	80080d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a46      	ldr	r2, [pc, #280]	; (80081e8 <UART_Start_Receive_IT+0x238>)
 80080d0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01a      	beq.n	8008110 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080fe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008102:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800810a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e4      	bne.n	80080da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3308      	adds	r3, #8
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008126:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3308      	adds	r3, #8
 800812e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008130:	64ba      	str	r2, [r7, #72]	; 0x48
 8008132:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008138:	e841 2300 	strex	r3, r2, [r1]
 800813c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800813e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e5      	bne.n	8008110 <UART_Start_Receive_IT+0x160>
 8008144:	e046      	b.n	80081d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814e:	d107      	bne.n	8008160 <UART_Start_Receive_IT+0x1b0>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d103      	bne.n	8008160 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4a24      	ldr	r2, [pc, #144]	; (80081ec <UART_Start_Receive_IT+0x23c>)
 800815c:	675a      	str	r2, [r3, #116]	; 0x74
 800815e:	e002      	b.n	8008166 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4a23      	ldr	r2, [pc, #140]	; (80081f0 <UART_Start_Receive_IT+0x240>)
 8008164:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d019      	beq.n	80081a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008182:	677b      	str	r3, [r7, #116]	; 0x74
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
 800818e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e6      	bne.n	800816e <UART_Start_Receive_IT+0x1be>
 80081a0:	e018      	b.n	80081d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	613b      	str	r3, [r7, #16]
   return(result);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f043 0320 	orr.w	r3, r3, #32
 80081b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081c0:	623b      	str	r3, [r7, #32]
 80081c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	6a3a      	ldr	r2, [r7, #32]
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e6      	bne.n	80081a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	378c      	adds	r7, #140	; 0x8c
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	08008a15 	.word	0x08008a15
 80081e8:	080086b5 	.word	0x080086b5
 80081ec:	080084fd 	.word	0x080084fd
 80081f0:	08008345 	.word	0x08008345

080081f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b095      	sub	sp, #84	; 0x54
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821a:	643b      	str	r3, [r7, #64]	; 0x40
 800821c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e6      	bne.n	80081fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	61fb      	str	r3, [r7, #28]
   return(result);
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	4b1e      	ldr	r3, [pc, #120]	; (80082bc <UART_EndRxTransfer+0xc8>)
 8008242:	4013      	ands	r3, r2
 8008244:	64bb      	str	r3, [r7, #72]	; 0x48
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008250:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e5      	bne.n	800822e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d118      	bne.n	800829c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	60bb      	str	r3, [r7, #8]
   return(result);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0310 	bic.w	r3, r3, #16
 800827e:	647b      	str	r3, [r7, #68]	; 0x44
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008288:	61bb      	str	r3, [r7, #24]
 800828a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6979      	ldr	r1, [r7, #20]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	613b      	str	r3, [r7, #16]
   return(result);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e6      	bne.n	800826a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80082b0:	bf00      	nop
 80082b2:	3754      	adds	r7, #84	; 0x54
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	effffffe 	.word	0xeffffffe

080082c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7fe fe30 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	60bb      	str	r3, [r7, #8]
   return(result);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6979      	ldr	r1, [r7, #20]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	613b      	str	r3, [r7, #16]
   return(result);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e6      	bne.n	80082f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7fe fdfb 	bl	8006f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800833a:	bf00      	nop
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b09c      	sub	sp, #112	; 0x70
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008352:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835c:	2b22      	cmp	r3, #34	; 0x22
 800835e:	f040 80be 	bne.w	80084de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800836c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008370:	b2d9      	uxtb	r1, r3
 8008372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008376:	b2da      	uxtb	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	400a      	ands	r2, r1
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80a1 	bne.w	80084ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80083cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e6      	bne.n	80083ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	667b      	str	r3, [r7, #100]	; 0x64
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083fe:	647a      	str	r2, [r7, #68]	; 0x44
 8008400:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a33      	ldr	r2, [pc, #204]	; (80084f8 <UART_RxISR_8BIT+0x1b4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d01f      	beq.n	8008470 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d018      	beq.n	8008470 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	623b      	str	r3, [r7, #32]
   return(result);
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008452:	663b      	str	r3, [r7, #96]	; 0x60
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800845c:	633b      	str	r3, [r7, #48]	; 0x30
 800845e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e6      	bne.n	800843e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d12e      	bne.n	80084d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	60fb      	str	r3, [r7, #12]
   return(result);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0310 	bic.w	r3, r3, #16
 8008492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	69b9      	ldr	r1, [r7, #24]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	617b      	str	r3, [r7, #20]
   return(result);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e6      	bne.n	800847e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b10      	cmp	r3, #16
 80084bc:	d103      	bne.n	80084c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2210      	movs	r2, #16
 80084c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7fe fd42 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084d4:	e00b      	b.n	80084ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7f9 f864 	bl	80015a4 <HAL_UART_RxCpltCallback>
}
 80084dc:	e007      	b.n	80084ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	699a      	ldr	r2, [r3, #24]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0208 	orr.w	r2, r2, #8
 80084ec:	619a      	str	r2, [r3, #24]
}
 80084ee:	bf00      	nop
 80084f0:	3770      	adds	r7, #112	; 0x70
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	58000c00 	.word	0x58000c00

080084fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b09c      	sub	sp, #112	; 0x70
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800850a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008514:	2b22      	cmp	r3, #34	; 0x22
 8008516:	f040 80be 	bne.w	8008696 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008528:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800852a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800852e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008532:	4013      	ands	r3, r2
 8008534:	b29a      	uxth	r2, r3
 8008536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008538:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800853e:	1c9a      	adds	r2, r3, #2
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800854a:	b29b      	uxth	r3, r3
 800854c:	3b01      	subs	r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 80a1 	bne.w	80086a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008578:	667b      	str	r3, [r7, #100]	; 0x64
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008582:	657b      	str	r3, [r7, #84]	; 0x54
 8008584:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e6      	bne.n	8008564 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3308      	adds	r3, #8
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	663b      	str	r3, [r7, #96]	; 0x60
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3308      	adds	r3, #8
 80085b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085b6:	643a      	str	r2, [r7, #64]	; 0x40
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e5      	bne.n	8008596 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a33      	ldr	r2, [pc, #204]	; (80086b0 <UART_RxISR_16BIT+0x1b4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d01f      	beq.n	8008628 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d018      	beq.n	8008628 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	61fb      	str	r3, [r7, #28]
   return(result);
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800860a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008616:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800861a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e6      	bne.n	80085f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862c:	2b01      	cmp	r3, #1
 800862e:	d12e      	bne.n	800868e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	60bb      	str	r3, [r7, #8]
   return(result);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f023 0310 	bic.w	r3, r3, #16
 800864a:	65bb      	str	r3, [r7, #88]	; 0x58
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008654:	61bb      	str	r3, [r7, #24]
 8008656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6979      	ldr	r1, [r7, #20]
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	613b      	str	r3, [r7, #16]
   return(result);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e6      	bne.n	8008636 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b10      	cmp	r3, #16
 8008674:	d103      	bne.n	800867e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2210      	movs	r2, #16
 800867c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe fc66 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800868c:	e00b      	b.n	80086a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7f8 ff88 	bl	80015a4 <HAL_UART_RxCpltCallback>
}
 8008694:	e007      	b.n	80086a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	699a      	ldr	r2, [r3, #24]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0208 	orr.w	r2, r2, #8
 80086a4:	619a      	str	r2, [r3, #24]
}
 80086a6:	bf00      	nop
 80086a8:	3770      	adds	r7, #112	; 0x70
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	58000c00 	.word	0x58000c00

080086b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b0ac      	sub	sp, #176	; 0xb0
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ea:	2b22      	cmp	r3, #34	; 0x22
 80086ec:	f040 8180 	bne.w	80089f0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086f6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086fa:	e123      	b.n	8008944 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008706:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800870a:	b2d9      	uxtb	r1, r3
 800870c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008710:	b2da      	uxtb	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	400a      	ands	r2, r1
 8008718:	b2d2      	uxtb	r2, r2
 800871a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d053      	beq.n	80087f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800874e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0xca>
 800875a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800875e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2201      	movs	r2, #1
 800876c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008774:	f043 0201 	orr.w	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800877e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800878a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00b      	beq.n	80087ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2202      	movs	r2, #2
 800879c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a4:	f043 0204 	orr.w	r2, r3, #4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d011      	beq.n	80087de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80087ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2204      	movs	r2, #4
 80087cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d4:	f043 0202 	orr.w	r2, r3, #2
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d006      	beq.n	80087f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fe fbab 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 80a0 	bne.w	8008944 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008826:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008828:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800882c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e4      	bne.n	8008804 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800884a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800884c:	4b6e      	ldr	r3, [pc, #440]	; (8008a08 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800884e:	4013      	ands	r3, r2
 8008850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3308      	adds	r3, #8
 800885a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800885e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008860:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008864:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800886c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e3      	bne.n	800883a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a60      	ldr	r2, [pc, #384]	; (8008a0c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d021      	beq.n	80088d4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01a      	beq.n	80088d4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088c0:	657b      	str	r3, [r7, #84]	; 0x54
 80088c2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e4      	bne.n	800889e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d130      	bne.n	800893e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	f023 0310 	bic.w	r3, r3, #16
 80088f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008904:	643b      	str	r3, [r7, #64]	; 0x40
 8008906:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800890a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e4      	bne.n	80088e2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f003 0310 	and.w	r3, r3, #16
 8008922:	2b10      	cmp	r3, #16
 8008924:	d103      	bne.n	800892e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2210      	movs	r2, #16
 800892c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7fe fb0e 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
 800893c:	e002      	b.n	8008944 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7f8 fe30 	bl	80015a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008944:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008948:	2b00      	cmp	r3, #0
 800894a:	d006      	beq.n	800895a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800894c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	f47f aed1 	bne.w	80086fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008960:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008964:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008968:	2b00      	cmp	r3, #0
 800896a:	d049      	beq.n	8008a00 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008972:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008976:	429a      	cmp	r2, r3
 8008978:	d242      	bcs.n	8008a00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3308      	adds	r3, #8
 8008980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	61fb      	str	r3, [r7, #28]
   return(result);
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800899e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e3      	bne.n	800897a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a16      	ldr	r2, [pc, #88]	; (8008a10 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80089b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f043 0320 	orr.w	r3, r3, #32
 80089cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	613b      	str	r3, [r7, #16]
   return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e4      	bne.n	80089b8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ee:	e007      	b.n	8008a00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0208 	orr.w	r2, r2, #8
 80089fe:	619a      	str	r2, [r3, #24]
}
 8008a00:	bf00      	nop
 8008a02:	37b0      	adds	r7, #176	; 0xb0
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	effffffe 	.word	0xeffffffe
 8008a0c:	58000c00 	.word	0x58000c00
 8008a10:	08008345 	.word	0x08008345

08008a14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b0ae      	sub	sp, #184	; 0xb8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a22:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a4a:	2b22      	cmp	r3, #34	; 0x22
 8008a4c:	f040 8184 	bne.w	8008d58 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a56:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a5a:	e127      	b.n	8008cac <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008a72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008a76:	4013      	ands	r3, r2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a84:	1c9a      	adds	r2, r3, #2
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d053      	beq.n	8008b5a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d011      	beq.n	8008ae2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad8:	f043 0201 	orr.w	r2, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d011      	beq.n	8008b12 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00b      	beq.n	8008b12 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2202      	movs	r2, #2
 8008b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b08:	f043 0204 	orr.w	r2, r3, #4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d011      	beq.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00b      	beq.n	8008b42 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2204      	movs	r2, #4
 8008b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b38:	f043 0202 	orr.w	r2, r3, #2
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d006      	beq.n	8008b5a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fe f9f9 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 80a2 	bne.w	8008cac <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e2      	bne.n	8008b68 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bb4:	4b6e      	ldr	r3, [pc, #440]	; (8008d70 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e3      	bne.n	8008ba2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a60      	ldr	r2, [pc, #384]	; (8008d74 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d021      	beq.n	8008c3c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d01a      	beq.n	8008c3c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e4      	bne.n	8008c06 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d130      	bne.n	8008ca6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5a:	f023 0310 	bic.w	r3, r3, #16
 8008c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e4      	bne.n	8008c4a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f003 0310 	and.w	r3, r3, #16
 8008c8a:	2b10      	cmp	r3, #16
 8008c8c:	d103      	bne.n	8008c96 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2210      	movs	r2, #16
 8008c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7fe f95a 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
 8008ca4:	e002      	b.n	8008cac <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7f8 fc7c 	bl	80015a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d006      	beq.n	8008cc2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f aecd 	bne.w	8008a5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cc8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ccc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d049      	beq.n	8008d68 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d242      	bcs.n	8008d68 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3308      	adds	r3, #8
 8008d02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d06:	633a      	str	r2, [r7, #48]	; 0x30
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e3      	bne.n	8008ce2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a16      	ldr	r2, [pc, #88]	; (8008d78 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008d1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f043 0320 	orr.w	r3, r3, #32
 8008d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d42:	61fb      	str	r3, [r7, #28]
 8008d44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	69b9      	ldr	r1, [r7, #24]
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e4      	bne.n	8008d20 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d56:	e007      	b.n	8008d68 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699a      	ldr	r2, [r3, #24]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0208 	orr.w	r2, r2, #8
 8008d66:	619a      	str	r2, [r3, #24]
}
 8008d68:	bf00      	nop
 8008d6a:	37b8      	adds	r7, #184	; 0xb8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	effffffe 	.word	0xeffffffe
 8008d74:	58000c00 	.word	0x58000c00
 8008d78:	080084fd 	.word	0x080084fd

08008d7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <HAL_UARTEx_DisableFifoMode+0x16>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e027      	b.n	8008e1e <HAL_UARTEx_DisableFifoMode+0x66>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2224      	movs	r2, #36	; 0x24
 8008dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0201 	bic.w	r2, r2, #1
 8008df4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e02d      	b.n	8008e9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2224      	movs	r2, #36	; 0x24
 8008e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f850 	bl	8008f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e02d      	b.n	8008f1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2224      	movs	r2, #36	; 0x24
 8008eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0201 	bic.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f812 	bl	8008f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d108      	bne.n	8008f46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f44:	e031      	b.n	8008faa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f46:	2310      	movs	r3, #16
 8008f48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f4a:	2310      	movs	r3, #16
 8008f4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	0e5b      	lsrs	r3, r3, #25
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	0f5b      	lsrs	r3, r3, #29
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	7b3a      	ldrb	r2, [r7, #12]
 8008f72:	4911      	ldr	r1, [pc, #68]	; (8008fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008f74:	5c8a      	ldrb	r2, [r1, r2]
 8008f76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f7a:	7b3a      	ldrb	r2, [r7, #12]
 8008f7c:	490f      	ldr	r1, [pc, #60]	; (8008fbc <UARTEx_SetNbDataToProcess+0x98>)
 8008f7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	7b7a      	ldrb	r2, [r7, #13]
 8008f90:	4909      	ldr	r1, [pc, #36]	; (8008fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008f92:	5c8a      	ldrb	r2, [r1, r2]
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f98:	7b7a      	ldrb	r2, [r7, #13]
 8008f9a:	4908      	ldr	r1, [pc, #32]	; (8008fbc <UARTEx_SetNbDataToProcess+0x98>)
 8008f9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	080099ac 	.word	0x080099ac
 8008fbc:	080099b4 	.word	0x080099b4

08008fc0 <__errno>:
 8008fc0:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <__errno+0x8>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	24000020 	.word	0x24000020

08008fcc <__libc_init_array>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	4d0d      	ldr	r5, [pc, #52]	; (8009004 <__libc_init_array+0x38>)
 8008fd0:	4c0d      	ldr	r4, [pc, #52]	; (8009008 <__libc_init_array+0x3c>)
 8008fd2:	1b64      	subs	r4, r4, r5
 8008fd4:	10a4      	asrs	r4, r4, #2
 8008fd6:	2600      	movs	r6, #0
 8008fd8:	42a6      	cmp	r6, r4
 8008fda:	d109      	bne.n	8008ff0 <__libc_init_array+0x24>
 8008fdc:	4d0b      	ldr	r5, [pc, #44]	; (800900c <__libc_init_array+0x40>)
 8008fde:	4c0c      	ldr	r4, [pc, #48]	; (8009010 <__libc_init_array+0x44>)
 8008fe0:	f000 fca2 	bl	8009928 <_init>
 8008fe4:	1b64      	subs	r4, r4, r5
 8008fe6:	10a4      	asrs	r4, r4, #2
 8008fe8:	2600      	movs	r6, #0
 8008fea:	42a6      	cmp	r6, r4
 8008fec:	d105      	bne.n	8008ffa <__libc_init_array+0x2e>
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff4:	4798      	blx	r3
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7ee      	b.n	8008fd8 <__libc_init_array+0xc>
 8008ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffe:	4798      	blx	r3
 8009000:	3601      	adds	r6, #1
 8009002:	e7f2      	b.n	8008fea <__libc_init_array+0x1e>
 8009004:	080099f8 	.word	0x080099f8
 8009008:	080099f8 	.word	0x080099f8
 800900c:	080099f8 	.word	0x080099f8
 8009010:	080099fc 	.word	0x080099fc

08009014 <memset>:
 8009014:	4402      	add	r2, r0
 8009016:	4603      	mov	r3, r0
 8009018:	4293      	cmp	r3, r2
 800901a:	d100      	bne.n	800901e <memset+0xa>
 800901c:	4770      	bx	lr
 800901e:	f803 1b01 	strb.w	r1, [r3], #1
 8009022:	e7f9      	b.n	8009018 <memset+0x4>

08009024 <sniprintf>:
 8009024:	b40c      	push	{r2, r3}
 8009026:	b530      	push	{r4, r5, lr}
 8009028:	4b17      	ldr	r3, [pc, #92]	; (8009088 <sniprintf+0x64>)
 800902a:	1e0c      	subs	r4, r1, #0
 800902c:	681d      	ldr	r5, [r3, #0]
 800902e:	b09d      	sub	sp, #116	; 0x74
 8009030:	da08      	bge.n	8009044 <sniprintf+0x20>
 8009032:	238b      	movs	r3, #139	; 0x8b
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800903a:	b01d      	add	sp, #116	; 0x74
 800903c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009040:	b002      	add	sp, #8
 8009042:	4770      	bx	lr
 8009044:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009048:	f8ad 3014 	strh.w	r3, [sp, #20]
 800904c:	bf14      	ite	ne
 800904e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009052:	4623      	moveq	r3, r4
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800905c:	9002      	str	r0, [sp, #8]
 800905e:	9006      	str	r0, [sp, #24]
 8009060:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009066:	ab21      	add	r3, sp, #132	; 0x84
 8009068:	a902      	add	r1, sp, #8
 800906a:	4628      	mov	r0, r5
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	f000 f869 	bl	8009144 <_svfiprintf_r>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	bfbc      	itt	lt
 8009076:	238b      	movlt	r3, #139	; 0x8b
 8009078:	602b      	strlt	r3, [r5, #0]
 800907a:	2c00      	cmp	r4, #0
 800907c:	d0dd      	beq.n	800903a <sniprintf+0x16>
 800907e:	9b02      	ldr	r3, [sp, #8]
 8009080:	2200      	movs	r2, #0
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	e7d9      	b.n	800903a <sniprintf+0x16>
 8009086:	bf00      	nop
 8009088:	24000020 	.word	0x24000020

0800908c <__ssputs_r>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	688e      	ldr	r6, [r1, #8]
 8009092:	429e      	cmp	r6, r3
 8009094:	4682      	mov	sl, r0
 8009096:	460c      	mov	r4, r1
 8009098:	4690      	mov	r8, r2
 800909a:	461f      	mov	r7, r3
 800909c:	d838      	bhi.n	8009110 <__ssputs_r+0x84>
 800909e:	898a      	ldrh	r2, [r1, #12]
 80090a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090a4:	d032      	beq.n	800910c <__ssputs_r+0x80>
 80090a6:	6825      	ldr	r5, [r4, #0]
 80090a8:	6909      	ldr	r1, [r1, #16]
 80090aa:	eba5 0901 	sub.w	r9, r5, r1
 80090ae:	6965      	ldr	r5, [r4, #20]
 80090b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090b8:	3301      	adds	r3, #1
 80090ba:	444b      	add	r3, r9
 80090bc:	106d      	asrs	r5, r5, #1
 80090be:	429d      	cmp	r5, r3
 80090c0:	bf38      	it	cc
 80090c2:	461d      	movcc	r5, r3
 80090c4:	0553      	lsls	r3, r2, #21
 80090c6:	d531      	bpl.n	800912c <__ssputs_r+0xa0>
 80090c8:	4629      	mov	r1, r5
 80090ca:	f000 fb63 	bl	8009794 <_malloc_r>
 80090ce:	4606      	mov	r6, r0
 80090d0:	b950      	cbnz	r0, 80090e8 <__ssputs_r+0x5c>
 80090d2:	230c      	movs	r3, #12
 80090d4:	f8ca 3000 	str.w	r3, [sl]
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e8:	6921      	ldr	r1, [r4, #16]
 80090ea:	464a      	mov	r2, r9
 80090ec:	f000 fabe 	bl	800966c <memcpy>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	6126      	str	r6, [r4, #16]
 80090fe:	6165      	str	r5, [r4, #20]
 8009100:	444e      	add	r6, r9
 8009102:	eba5 0509 	sub.w	r5, r5, r9
 8009106:	6026      	str	r6, [r4, #0]
 8009108:	60a5      	str	r5, [r4, #8]
 800910a:	463e      	mov	r6, r7
 800910c:	42be      	cmp	r6, r7
 800910e:	d900      	bls.n	8009112 <__ssputs_r+0x86>
 8009110:	463e      	mov	r6, r7
 8009112:	6820      	ldr	r0, [r4, #0]
 8009114:	4632      	mov	r2, r6
 8009116:	4641      	mov	r1, r8
 8009118:	f000 fab6 	bl	8009688 <memmove>
 800911c:	68a3      	ldr	r3, [r4, #8]
 800911e:	1b9b      	subs	r3, r3, r6
 8009120:	60a3      	str	r3, [r4, #8]
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	4433      	add	r3, r6
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	2000      	movs	r0, #0
 800912a:	e7db      	b.n	80090e4 <__ssputs_r+0x58>
 800912c:	462a      	mov	r2, r5
 800912e:	f000 fba5 	bl	800987c <_realloc_r>
 8009132:	4606      	mov	r6, r0
 8009134:	2800      	cmp	r0, #0
 8009136:	d1e1      	bne.n	80090fc <__ssputs_r+0x70>
 8009138:	6921      	ldr	r1, [r4, #16]
 800913a:	4650      	mov	r0, sl
 800913c:	f000 fabe 	bl	80096bc <_free_r>
 8009140:	e7c7      	b.n	80090d2 <__ssputs_r+0x46>
	...

08009144 <_svfiprintf_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4698      	mov	r8, r3
 800914a:	898b      	ldrh	r3, [r1, #12]
 800914c:	061b      	lsls	r3, r3, #24
 800914e:	b09d      	sub	sp, #116	; 0x74
 8009150:	4607      	mov	r7, r0
 8009152:	460d      	mov	r5, r1
 8009154:	4614      	mov	r4, r2
 8009156:	d50e      	bpl.n	8009176 <_svfiprintf_r+0x32>
 8009158:	690b      	ldr	r3, [r1, #16]
 800915a:	b963      	cbnz	r3, 8009176 <_svfiprintf_r+0x32>
 800915c:	2140      	movs	r1, #64	; 0x40
 800915e:	f000 fb19 	bl	8009794 <_malloc_r>
 8009162:	6028      	str	r0, [r5, #0]
 8009164:	6128      	str	r0, [r5, #16]
 8009166:	b920      	cbnz	r0, 8009172 <_svfiprintf_r+0x2e>
 8009168:	230c      	movs	r3, #12
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009170:	e0d1      	b.n	8009316 <_svfiprintf_r+0x1d2>
 8009172:	2340      	movs	r3, #64	; 0x40
 8009174:	616b      	str	r3, [r5, #20]
 8009176:	2300      	movs	r3, #0
 8009178:	9309      	str	r3, [sp, #36]	; 0x24
 800917a:	2320      	movs	r3, #32
 800917c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009180:	f8cd 800c 	str.w	r8, [sp, #12]
 8009184:	2330      	movs	r3, #48	; 0x30
 8009186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009330 <_svfiprintf_r+0x1ec>
 800918a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800918e:	f04f 0901 	mov.w	r9, #1
 8009192:	4623      	mov	r3, r4
 8009194:	469a      	mov	sl, r3
 8009196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919a:	b10a      	cbz	r2, 80091a0 <_svfiprintf_r+0x5c>
 800919c:	2a25      	cmp	r2, #37	; 0x25
 800919e:	d1f9      	bne.n	8009194 <_svfiprintf_r+0x50>
 80091a0:	ebba 0b04 	subs.w	fp, sl, r4
 80091a4:	d00b      	beq.n	80091be <_svfiprintf_r+0x7a>
 80091a6:	465b      	mov	r3, fp
 80091a8:	4622      	mov	r2, r4
 80091aa:	4629      	mov	r1, r5
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff ff6d 	bl	800908c <__ssputs_r>
 80091b2:	3001      	adds	r0, #1
 80091b4:	f000 80aa 	beq.w	800930c <_svfiprintf_r+0x1c8>
 80091b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ba:	445a      	add	r2, fp
 80091bc:	9209      	str	r2, [sp, #36]	; 0x24
 80091be:	f89a 3000 	ldrb.w	r3, [sl]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80a2 	beq.w	800930c <_svfiprintf_r+0x1c8>
 80091c8:	2300      	movs	r3, #0
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d2:	f10a 0a01 	add.w	sl, sl, #1
 80091d6:	9304      	str	r3, [sp, #16]
 80091d8:	9307      	str	r3, [sp, #28]
 80091da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091de:	931a      	str	r3, [sp, #104]	; 0x68
 80091e0:	4654      	mov	r4, sl
 80091e2:	2205      	movs	r2, #5
 80091e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e8:	4851      	ldr	r0, [pc, #324]	; (8009330 <_svfiprintf_r+0x1ec>)
 80091ea:	f7f7 f881 	bl	80002f0 <memchr>
 80091ee:	9a04      	ldr	r2, [sp, #16]
 80091f0:	b9d8      	cbnz	r0, 800922a <_svfiprintf_r+0xe6>
 80091f2:	06d0      	lsls	r0, r2, #27
 80091f4:	bf44      	itt	mi
 80091f6:	2320      	movmi	r3, #32
 80091f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091fc:	0711      	lsls	r1, r2, #28
 80091fe:	bf44      	itt	mi
 8009200:	232b      	movmi	r3, #43	; 0x2b
 8009202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009206:	f89a 3000 	ldrb.w	r3, [sl]
 800920a:	2b2a      	cmp	r3, #42	; 0x2a
 800920c:	d015      	beq.n	800923a <_svfiprintf_r+0xf6>
 800920e:	9a07      	ldr	r2, [sp, #28]
 8009210:	4654      	mov	r4, sl
 8009212:	2000      	movs	r0, #0
 8009214:	f04f 0c0a 	mov.w	ip, #10
 8009218:	4621      	mov	r1, r4
 800921a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800921e:	3b30      	subs	r3, #48	; 0x30
 8009220:	2b09      	cmp	r3, #9
 8009222:	d94e      	bls.n	80092c2 <_svfiprintf_r+0x17e>
 8009224:	b1b0      	cbz	r0, 8009254 <_svfiprintf_r+0x110>
 8009226:	9207      	str	r2, [sp, #28]
 8009228:	e014      	b.n	8009254 <_svfiprintf_r+0x110>
 800922a:	eba0 0308 	sub.w	r3, r0, r8
 800922e:	fa09 f303 	lsl.w	r3, r9, r3
 8009232:	4313      	orrs	r3, r2
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	46a2      	mov	sl, r4
 8009238:	e7d2      	b.n	80091e0 <_svfiprintf_r+0x9c>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	1d19      	adds	r1, r3, #4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	9103      	str	r1, [sp, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	bfbb      	ittet	lt
 8009246:	425b      	neglt	r3, r3
 8009248:	f042 0202 	orrlt.w	r2, r2, #2
 800924c:	9307      	strge	r3, [sp, #28]
 800924e:	9307      	strlt	r3, [sp, #28]
 8009250:	bfb8      	it	lt
 8009252:	9204      	strlt	r2, [sp, #16]
 8009254:	7823      	ldrb	r3, [r4, #0]
 8009256:	2b2e      	cmp	r3, #46	; 0x2e
 8009258:	d10c      	bne.n	8009274 <_svfiprintf_r+0x130>
 800925a:	7863      	ldrb	r3, [r4, #1]
 800925c:	2b2a      	cmp	r3, #42	; 0x2a
 800925e:	d135      	bne.n	80092cc <_svfiprintf_r+0x188>
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	1d1a      	adds	r2, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	9203      	str	r2, [sp, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfb8      	it	lt
 800926c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009270:	3402      	adds	r4, #2
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009340 <_svfiprintf_r+0x1fc>
 8009278:	7821      	ldrb	r1, [r4, #0]
 800927a:	2203      	movs	r2, #3
 800927c:	4650      	mov	r0, sl
 800927e:	f7f7 f837 	bl	80002f0 <memchr>
 8009282:	b140      	cbz	r0, 8009296 <_svfiprintf_r+0x152>
 8009284:	2340      	movs	r3, #64	; 0x40
 8009286:	eba0 000a 	sub.w	r0, r0, sl
 800928a:	fa03 f000 	lsl.w	r0, r3, r0
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	4303      	orrs	r3, r0
 8009292:	3401      	adds	r4, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929a:	4826      	ldr	r0, [pc, #152]	; (8009334 <_svfiprintf_r+0x1f0>)
 800929c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092a0:	2206      	movs	r2, #6
 80092a2:	f7f7 f825 	bl	80002f0 <memchr>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d038      	beq.n	800931c <_svfiprintf_r+0x1d8>
 80092aa:	4b23      	ldr	r3, [pc, #140]	; (8009338 <_svfiprintf_r+0x1f4>)
 80092ac:	bb1b      	cbnz	r3, 80092f6 <_svfiprintf_r+0x1b2>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	3307      	adds	r3, #7
 80092b2:	f023 0307 	bic.w	r3, r3, #7
 80092b6:	3308      	adds	r3, #8
 80092b8:	9303      	str	r3, [sp, #12]
 80092ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092bc:	4433      	add	r3, r6
 80092be:	9309      	str	r3, [sp, #36]	; 0x24
 80092c0:	e767      	b.n	8009192 <_svfiprintf_r+0x4e>
 80092c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c6:	460c      	mov	r4, r1
 80092c8:	2001      	movs	r0, #1
 80092ca:	e7a5      	b.n	8009218 <_svfiprintf_r+0xd4>
 80092cc:	2300      	movs	r3, #0
 80092ce:	3401      	adds	r4, #1
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	4619      	mov	r1, r3
 80092d4:	f04f 0c0a 	mov.w	ip, #10
 80092d8:	4620      	mov	r0, r4
 80092da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092de:	3a30      	subs	r2, #48	; 0x30
 80092e0:	2a09      	cmp	r2, #9
 80092e2:	d903      	bls.n	80092ec <_svfiprintf_r+0x1a8>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0c5      	beq.n	8009274 <_svfiprintf_r+0x130>
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	e7c3      	b.n	8009274 <_svfiprintf_r+0x130>
 80092ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f0:	4604      	mov	r4, r0
 80092f2:	2301      	movs	r3, #1
 80092f4:	e7f0      	b.n	80092d8 <_svfiprintf_r+0x194>
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	462a      	mov	r2, r5
 80092fc:	4b0f      	ldr	r3, [pc, #60]	; (800933c <_svfiprintf_r+0x1f8>)
 80092fe:	a904      	add	r1, sp, #16
 8009300:	4638      	mov	r0, r7
 8009302:	f3af 8000 	nop.w
 8009306:	1c42      	adds	r2, r0, #1
 8009308:	4606      	mov	r6, r0
 800930a:	d1d6      	bne.n	80092ba <_svfiprintf_r+0x176>
 800930c:	89ab      	ldrh	r3, [r5, #12]
 800930e:	065b      	lsls	r3, r3, #25
 8009310:	f53f af2c 	bmi.w	800916c <_svfiprintf_r+0x28>
 8009314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009316:	b01d      	add	sp, #116	; 0x74
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	ab03      	add	r3, sp, #12
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	462a      	mov	r2, r5
 8009322:	4b06      	ldr	r3, [pc, #24]	; (800933c <_svfiprintf_r+0x1f8>)
 8009324:	a904      	add	r1, sp, #16
 8009326:	4638      	mov	r0, r7
 8009328:	f000 f87a 	bl	8009420 <_printf_i>
 800932c:	e7eb      	b.n	8009306 <_svfiprintf_r+0x1c2>
 800932e:	bf00      	nop
 8009330:	080099bc 	.word	0x080099bc
 8009334:	080099c6 	.word	0x080099c6
 8009338:	00000000 	.word	0x00000000
 800933c:	0800908d 	.word	0x0800908d
 8009340:	080099c2 	.word	0x080099c2

08009344 <_printf_common>:
 8009344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	4616      	mov	r6, r2
 800934a:	4699      	mov	r9, r3
 800934c:	688a      	ldr	r2, [r1, #8]
 800934e:	690b      	ldr	r3, [r1, #16]
 8009350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009354:	4293      	cmp	r3, r2
 8009356:	bfb8      	it	lt
 8009358:	4613      	movlt	r3, r2
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009360:	4607      	mov	r7, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b10a      	cbz	r2, 800936a <_printf_common+0x26>
 8009366:	3301      	adds	r3, #1
 8009368:	6033      	str	r3, [r6, #0]
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	0699      	lsls	r1, r3, #26
 800936e:	bf42      	ittt	mi
 8009370:	6833      	ldrmi	r3, [r6, #0]
 8009372:	3302      	addmi	r3, #2
 8009374:	6033      	strmi	r3, [r6, #0]
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	f015 0506 	ands.w	r5, r5, #6
 800937c:	d106      	bne.n	800938c <_printf_common+0x48>
 800937e:	f104 0a19 	add.w	sl, r4, #25
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	6832      	ldr	r2, [r6, #0]
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	42ab      	cmp	r3, r5
 800938a:	dc26      	bgt.n	80093da <_printf_common+0x96>
 800938c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009390:	1e13      	subs	r3, r2, #0
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	bf18      	it	ne
 8009396:	2301      	movne	r3, #1
 8009398:	0692      	lsls	r2, r2, #26
 800939a:	d42b      	bmi.n	80093f4 <_printf_common+0xb0>
 800939c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093a0:	4649      	mov	r1, r9
 80093a2:	4638      	mov	r0, r7
 80093a4:	47c0      	blx	r8
 80093a6:	3001      	adds	r0, #1
 80093a8:	d01e      	beq.n	80093e8 <_printf_common+0xa4>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	68e5      	ldr	r5, [r4, #12]
 80093ae:	6832      	ldr	r2, [r6, #0]
 80093b0:	f003 0306 	and.w	r3, r3, #6
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	bf08      	it	eq
 80093b8:	1aad      	subeq	r5, r5, r2
 80093ba:	68a3      	ldr	r3, [r4, #8]
 80093bc:	6922      	ldr	r2, [r4, #16]
 80093be:	bf0c      	ite	eq
 80093c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093c4:	2500      	movne	r5, #0
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bfc4      	itt	gt
 80093ca:	1a9b      	subgt	r3, r3, r2
 80093cc:	18ed      	addgt	r5, r5, r3
 80093ce:	2600      	movs	r6, #0
 80093d0:	341a      	adds	r4, #26
 80093d2:	42b5      	cmp	r5, r6
 80093d4:	d11a      	bne.n	800940c <_printf_common+0xc8>
 80093d6:	2000      	movs	r0, #0
 80093d8:	e008      	b.n	80093ec <_printf_common+0xa8>
 80093da:	2301      	movs	r3, #1
 80093dc:	4652      	mov	r2, sl
 80093de:	4649      	mov	r1, r9
 80093e0:	4638      	mov	r0, r7
 80093e2:	47c0      	blx	r8
 80093e4:	3001      	adds	r0, #1
 80093e6:	d103      	bne.n	80093f0 <_printf_common+0xac>
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f0:	3501      	adds	r5, #1
 80093f2:	e7c6      	b.n	8009382 <_printf_common+0x3e>
 80093f4:	18e1      	adds	r1, r4, r3
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	2030      	movs	r0, #48	; 0x30
 80093fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093fe:	4422      	add	r2, r4
 8009400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009408:	3302      	adds	r3, #2
 800940a:	e7c7      	b.n	800939c <_printf_common+0x58>
 800940c:	2301      	movs	r3, #1
 800940e:	4622      	mov	r2, r4
 8009410:	4649      	mov	r1, r9
 8009412:	4638      	mov	r0, r7
 8009414:	47c0      	blx	r8
 8009416:	3001      	adds	r0, #1
 8009418:	d0e6      	beq.n	80093e8 <_printf_common+0xa4>
 800941a:	3601      	adds	r6, #1
 800941c:	e7d9      	b.n	80093d2 <_printf_common+0x8e>
	...

08009420 <_printf_i>:
 8009420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009424:	7e0f      	ldrb	r7, [r1, #24]
 8009426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009428:	2f78      	cmp	r7, #120	; 0x78
 800942a:	4691      	mov	r9, r2
 800942c:	4680      	mov	r8, r0
 800942e:	460c      	mov	r4, r1
 8009430:	469a      	mov	sl, r3
 8009432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009436:	d807      	bhi.n	8009448 <_printf_i+0x28>
 8009438:	2f62      	cmp	r7, #98	; 0x62
 800943a:	d80a      	bhi.n	8009452 <_printf_i+0x32>
 800943c:	2f00      	cmp	r7, #0
 800943e:	f000 80d8 	beq.w	80095f2 <_printf_i+0x1d2>
 8009442:	2f58      	cmp	r7, #88	; 0x58
 8009444:	f000 80a3 	beq.w	800958e <_printf_i+0x16e>
 8009448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800944c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009450:	e03a      	b.n	80094c8 <_printf_i+0xa8>
 8009452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009456:	2b15      	cmp	r3, #21
 8009458:	d8f6      	bhi.n	8009448 <_printf_i+0x28>
 800945a:	a101      	add	r1, pc, #4	; (adr r1, 8009460 <_printf_i+0x40>)
 800945c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009460:	080094b9 	.word	0x080094b9
 8009464:	080094cd 	.word	0x080094cd
 8009468:	08009449 	.word	0x08009449
 800946c:	08009449 	.word	0x08009449
 8009470:	08009449 	.word	0x08009449
 8009474:	08009449 	.word	0x08009449
 8009478:	080094cd 	.word	0x080094cd
 800947c:	08009449 	.word	0x08009449
 8009480:	08009449 	.word	0x08009449
 8009484:	08009449 	.word	0x08009449
 8009488:	08009449 	.word	0x08009449
 800948c:	080095d9 	.word	0x080095d9
 8009490:	080094fd 	.word	0x080094fd
 8009494:	080095bb 	.word	0x080095bb
 8009498:	08009449 	.word	0x08009449
 800949c:	08009449 	.word	0x08009449
 80094a0:	080095fb 	.word	0x080095fb
 80094a4:	08009449 	.word	0x08009449
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	08009449 	.word	0x08009449
 80094b0:	08009449 	.word	0x08009449
 80094b4:	080095c3 	.word	0x080095c3
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	1d1a      	adds	r2, r3, #4
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	602a      	str	r2, [r5, #0]
 80094c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0a3      	b.n	8009614 <_printf_i+0x1f4>
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	6829      	ldr	r1, [r5, #0]
 80094d0:	0606      	lsls	r6, r0, #24
 80094d2:	f101 0304 	add.w	r3, r1, #4
 80094d6:	d50a      	bpl.n	80094ee <_printf_i+0xce>
 80094d8:	680e      	ldr	r6, [r1, #0]
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	2e00      	cmp	r6, #0
 80094de:	da03      	bge.n	80094e8 <_printf_i+0xc8>
 80094e0:	232d      	movs	r3, #45	; 0x2d
 80094e2:	4276      	negs	r6, r6
 80094e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e8:	485e      	ldr	r0, [pc, #376]	; (8009664 <_printf_i+0x244>)
 80094ea:	230a      	movs	r3, #10
 80094ec:	e019      	b.n	8009522 <_printf_i+0x102>
 80094ee:	680e      	ldr	r6, [r1, #0]
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094f6:	bf18      	it	ne
 80094f8:	b236      	sxthne	r6, r6
 80094fa:	e7ef      	b.n	80094dc <_printf_i+0xbc>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	6820      	ldr	r0, [r4, #0]
 8009500:	1d19      	adds	r1, r3, #4
 8009502:	6029      	str	r1, [r5, #0]
 8009504:	0601      	lsls	r1, r0, #24
 8009506:	d501      	bpl.n	800950c <_printf_i+0xec>
 8009508:	681e      	ldr	r6, [r3, #0]
 800950a:	e002      	b.n	8009512 <_printf_i+0xf2>
 800950c:	0646      	lsls	r6, r0, #25
 800950e:	d5fb      	bpl.n	8009508 <_printf_i+0xe8>
 8009510:	881e      	ldrh	r6, [r3, #0]
 8009512:	4854      	ldr	r0, [pc, #336]	; (8009664 <_printf_i+0x244>)
 8009514:	2f6f      	cmp	r7, #111	; 0x6f
 8009516:	bf0c      	ite	eq
 8009518:	2308      	moveq	r3, #8
 800951a:	230a      	movne	r3, #10
 800951c:	2100      	movs	r1, #0
 800951e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009522:	6865      	ldr	r5, [r4, #4]
 8009524:	60a5      	str	r5, [r4, #8]
 8009526:	2d00      	cmp	r5, #0
 8009528:	bfa2      	ittt	ge
 800952a:	6821      	ldrge	r1, [r4, #0]
 800952c:	f021 0104 	bicge.w	r1, r1, #4
 8009530:	6021      	strge	r1, [r4, #0]
 8009532:	b90e      	cbnz	r6, 8009538 <_printf_i+0x118>
 8009534:	2d00      	cmp	r5, #0
 8009536:	d04d      	beq.n	80095d4 <_printf_i+0x1b4>
 8009538:	4615      	mov	r5, r2
 800953a:	fbb6 f1f3 	udiv	r1, r6, r3
 800953e:	fb03 6711 	mls	r7, r3, r1, r6
 8009542:	5dc7      	ldrb	r7, [r0, r7]
 8009544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009548:	4637      	mov	r7, r6
 800954a:	42bb      	cmp	r3, r7
 800954c:	460e      	mov	r6, r1
 800954e:	d9f4      	bls.n	800953a <_printf_i+0x11a>
 8009550:	2b08      	cmp	r3, #8
 8009552:	d10b      	bne.n	800956c <_printf_i+0x14c>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	07de      	lsls	r6, r3, #31
 8009558:	d508      	bpl.n	800956c <_printf_i+0x14c>
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	6861      	ldr	r1, [r4, #4]
 800955e:	4299      	cmp	r1, r3
 8009560:	bfde      	ittt	le
 8009562:	2330      	movle	r3, #48	; 0x30
 8009564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009568:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800956c:	1b52      	subs	r2, r2, r5
 800956e:	6122      	str	r2, [r4, #16]
 8009570:	f8cd a000 	str.w	sl, [sp]
 8009574:	464b      	mov	r3, r9
 8009576:	aa03      	add	r2, sp, #12
 8009578:	4621      	mov	r1, r4
 800957a:	4640      	mov	r0, r8
 800957c:	f7ff fee2 	bl	8009344 <_printf_common>
 8009580:	3001      	adds	r0, #1
 8009582:	d14c      	bne.n	800961e <_printf_i+0x1fe>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009588:	b004      	add	sp, #16
 800958a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958e:	4835      	ldr	r0, [pc, #212]	; (8009664 <_printf_i+0x244>)
 8009590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009594:	6829      	ldr	r1, [r5, #0]
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	f851 6b04 	ldr.w	r6, [r1], #4
 800959c:	6029      	str	r1, [r5, #0]
 800959e:	061d      	lsls	r5, r3, #24
 80095a0:	d514      	bpl.n	80095cc <_printf_i+0x1ac>
 80095a2:	07df      	lsls	r7, r3, #31
 80095a4:	bf44      	itt	mi
 80095a6:	f043 0320 	orrmi.w	r3, r3, #32
 80095aa:	6023      	strmi	r3, [r4, #0]
 80095ac:	b91e      	cbnz	r6, 80095b6 <_printf_i+0x196>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	f023 0320 	bic.w	r3, r3, #32
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	2310      	movs	r3, #16
 80095b8:	e7b0      	b.n	800951c <_printf_i+0xfc>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	f043 0320 	orr.w	r3, r3, #32
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	2378      	movs	r3, #120	; 0x78
 80095c4:	4828      	ldr	r0, [pc, #160]	; (8009668 <_printf_i+0x248>)
 80095c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095ca:	e7e3      	b.n	8009594 <_printf_i+0x174>
 80095cc:	0659      	lsls	r1, r3, #25
 80095ce:	bf48      	it	mi
 80095d0:	b2b6      	uxthmi	r6, r6
 80095d2:	e7e6      	b.n	80095a2 <_printf_i+0x182>
 80095d4:	4615      	mov	r5, r2
 80095d6:	e7bb      	b.n	8009550 <_printf_i+0x130>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	6826      	ldr	r6, [r4, #0]
 80095dc:	6961      	ldr	r1, [r4, #20]
 80095de:	1d18      	adds	r0, r3, #4
 80095e0:	6028      	str	r0, [r5, #0]
 80095e2:	0635      	lsls	r5, r6, #24
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	d501      	bpl.n	80095ec <_printf_i+0x1cc>
 80095e8:	6019      	str	r1, [r3, #0]
 80095ea:	e002      	b.n	80095f2 <_printf_i+0x1d2>
 80095ec:	0670      	lsls	r0, r6, #25
 80095ee:	d5fb      	bpl.n	80095e8 <_printf_i+0x1c8>
 80095f0:	8019      	strh	r1, [r3, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	4615      	mov	r5, r2
 80095f8:	e7ba      	b.n	8009570 <_printf_i+0x150>
 80095fa:	682b      	ldr	r3, [r5, #0]
 80095fc:	1d1a      	adds	r2, r3, #4
 80095fe:	602a      	str	r2, [r5, #0]
 8009600:	681d      	ldr	r5, [r3, #0]
 8009602:	6862      	ldr	r2, [r4, #4]
 8009604:	2100      	movs	r1, #0
 8009606:	4628      	mov	r0, r5
 8009608:	f7f6 fe72 	bl	80002f0 <memchr>
 800960c:	b108      	cbz	r0, 8009612 <_printf_i+0x1f2>
 800960e:	1b40      	subs	r0, r0, r5
 8009610:	6060      	str	r0, [r4, #4]
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	2300      	movs	r3, #0
 8009618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800961c:	e7a8      	b.n	8009570 <_printf_i+0x150>
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	462a      	mov	r2, r5
 8009622:	4649      	mov	r1, r9
 8009624:	4640      	mov	r0, r8
 8009626:	47d0      	blx	sl
 8009628:	3001      	adds	r0, #1
 800962a:	d0ab      	beq.n	8009584 <_printf_i+0x164>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	079b      	lsls	r3, r3, #30
 8009630:	d413      	bmi.n	800965a <_printf_i+0x23a>
 8009632:	68e0      	ldr	r0, [r4, #12]
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	4298      	cmp	r0, r3
 8009638:	bfb8      	it	lt
 800963a:	4618      	movlt	r0, r3
 800963c:	e7a4      	b.n	8009588 <_printf_i+0x168>
 800963e:	2301      	movs	r3, #1
 8009640:	4632      	mov	r2, r6
 8009642:	4649      	mov	r1, r9
 8009644:	4640      	mov	r0, r8
 8009646:	47d0      	blx	sl
 8009648:	3001      	adds	r0, #1
 800964a:	d09b      	beq.n	8009584 <_printf_i+0x164>
 800964c:	3501      	adds	r5, #1
 800964e:	68e3      	ldr	r3, [r4, #12]
 8009650:	9903      	ldr	r1, [sp, #12]
 8009652:	1a5b      	subs	r3, r3, r1
 8009654:	42ab      	cmp	r3, r5
 8009656:	dcf2      	bgt.n	800963e <_printf_i+0x21e>
 8009658:	e7eb      	b.n	8009632 <_printf_i+0x212>
 800965a:	2500      	movs	r5, #0
 800965c:	f104 0619 	add.w	r6, r4, #25
 8009660:	e7f5      	b.n	800964e <_printf_i+0x22e>
 8009662:	bf00      	nop
 8009664:	080099cd 	.word	0x080099cd
 8009668:	080099de 	.word	0x080099de

0800966c <memcpy>:
 800966c:	440a      	add	r2, r1
 800966e:	4291      	cmp	r1, r2
 8009670:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009674:	d100      	bne.n	8009678 <memcpy+0xc>
 8009676:	4770      	bx	lr
 8009678:	b510      	push	{r4, lr}
 800967a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800967e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009682:	4291      	cmp	r1, r2
 8009684:	d1f9      	bne.n	800967a <memcpy+0xe>
 8009686:	bd10      	pop	{r4, pc}

08009688 <memmove>:
 8009688:	4288      	cmp	r0, r1
 800968a:	b510      	push	{r4, lr}
 800968c:	eb01 0402 	add.w	r4, r1, r2
 8009690:	d902      	bls.n	8009698 <memmove+0x10>
 8009692:	4284      	cmp	r4, r0
 8009694:	4623      	mov	r3, r4
 8009696:	d807      	bhi.n	80096a8 <memmove+0x20>
 8009698:	1e43      	subs	r3, r0, #1
 800969a:	42a1      	cmp	r1, r4
 800969c:	d008      	beq.n	80096b0 <memmove+0x28>
 800969e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096a6:	e7f8      	b.n	800969a <memmove+0x12>
 80096a8:	4402      	add	r2, r0
 80096aa:	4601      	mov	r1, r0
 80096ac:	428a      	cmp	r2, r1
 80096ae:	d100      	bne.n	80096b2 <memmove+0x2a>
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096ba:	e7f7      	b.n	80096ac <memmove+0x24>

080096bc <_free_r>:
 80096bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096be:	2900      	cmp	r1, #0
 80096c0:	d044      	beq.n	800974c <_free_r+0x90>
 80096c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c6:	9001      	str	r0, [sp, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f1a1 0404 	sub.w	r4, r1, #4
 80096ce:	bfb8      	it	lt
 80096d0:	18e4      	addlt	r4, r4, r3
 80096d2:	f000 f913 	bl	80098fc <__malloc_lock>
 80096d6:	4a1e      	ldr	r2, [pc, #120]	; (8009750 <_free_r+0x94>)
 80096d8:	9801      	ldr	r0, [sp, #4]
 80096da:	6813      	ldr	r3, [r2, #0]
 80096dc:	b933      	cbnz	r3, 80096ec <_free_r+0x30>
 80096de:	6063      	str	r3, [r4, #4]
 80096e0:	6014      	str	r4, [r2, #0]
 80096e2:	b003      	add	sp, #12
 80096e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e8:	f000 b90e 	b.w	8009908 <__malloc_unlock>
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	d908      	bls.n	8009702 <_free_r+0x46>
 80096f0:	6825      	ldr	r5, [r4, #0]
 80096f2:	1961      	adds	r1, r4, r5
 80096f4:	428b      	cmp	r3, r1
 80096f6:	bf01      	itttt	eq
 80096f8:	6819      	ldreq	r1, [r3, #0]
 80096fa:	685b      	ldreq	r3, [r3, #4]
 80096fc:	1949      	addeq	r1, r1, r5
 80096fe:	6021      	streq	r1, [r4, #0]
 8009700:	e7ed      	b.n	80096de <_free_r+0x22>
 8009702:	461a      	mov	r2, r3
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	b10b      	cbz	r3, 800970c <_free_r+0x50>
 8009708:	42a3      	cmp	r3, r4
 800970a:	d9fa      	bls.n	8009702 <_free_r+0x46>
 800970c:	6811      	ldr	r1, [r2, #0]
 800970e:	1855      	adds	r5, r2, r1
 8009710:	42a5      	cmp	r5, r4
 8009712:	d10b      	bne.n	800972c <_free_r+0x70>
 8009714:	6824      	ldr	r4, [r4, #0]
 8009716:	4421      	add	r1, r4
 8009718:	1854      	adds	r4, r2, r1
 800971a:	42a3      	cmp	r3, r4
 800971c:	6011      	str	r1, [r2, #0]
 800971e:	d1e0      	bne.n	80096e2 <_free_r+0x26>
 8009720:	681c      	ldr	r4, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	6053      	str	r3, [r2, #4]
 8009726:	4421      	add	r1, r4
 8009728:	6011      	str	r1, [r2, #0]
 800972a:	e7da      	b.n	80096e2 <_free_r+0x26>
 800972c:	d902      	bls.n	8009734 <_free_r+0x78>
 800972e:	230c      	movs	r3, #12
 8009730:	6003      	str	r3, [r0, #0]
 8009732:	e7d6      	b.n	80096e2 <_free_r+0x26>
 8009734:	6825      	ldr	r5, [r4, #0]
 8009736:	1961      	adds	r1, r4, r5
 8009738:	428b      	cmp	r3, r1
 800973a:	bf04      	itt	eq
 800973c:	6819      	ldreq	r1, [r3, #0]
 800973e:	685b      	ldreq	r3, [r3, #4]
 8009740:	6063      	str	r3, [r4, #4]
 8009742:	bf04      	itt	eq
 8009744:	1949      	addeq	r1, r1, r5
 8009746:	6021      	streq	r1, [r4, #0]
 8009748:	6054      	str	r4, [r2, #4]
 800974a:	e7ca      	b.n	80096e2 <_free_r+0x26>
 800974c:	b003      	add	sp, #12
 800974e:	bd30      	pop	{r4, r5, pc}
 8009750:	24000274 	.word	0x24000274

08009754 <sbrk_aligned>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4e0e      	ldr	r6, [pc, #56]	; (8009790 <sbrk_aligned+0x3c>)
 8009758:	460c      	mov	r4, r1
 800975a:	6831      	ldr	r1, [r6, #0]
 800975c:	4605      	mov	r5, r0
 800975e:	b911      	cbnz	r1, 8009766 <sbrk_aligned+0x12>
 8009760:	f000 f8bc 	bl	80098dc <_sbrk_r>
 8009764:	6030      	str	r0, [r6, #0]
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	f000 f8b7 	bl	80098dc <_sbrk_r>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	d00a      	beq.n	8009788 <sbrk_aligned+0x34>
 8009772:	1cc4      	adds	r4, r0, #3
 8009774:	f024 0403 	bic.w	r4, r4, #3
 8009778:	42a0      	cmp	r0, r4
 800977a:	d007      	beq.n	800978c <sbrk_aligned+0x38>
 800977c:	1a21      	subs	r1, r4, r0
 800977e:	4628      	mov	r0, r5
 8009780:	f000 f8ac 	bl	80098dc <_sbrk_r>
 8009784:	3001      	adds	r0, #1
 8009786:	d101      	bne.n	800978c <sbrk_aligned+0x38>
 8009788:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800978c:	4620      	mov	r0, r4
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	24000278 	.word	0x24000278

08009794 <_malloc_r>:
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009798:	1ccd      	adds	r5, r1, #3
 800979a:	f025 0503 	bic.w	r5, r5, #3
 800979e:	3508      	adds	r5, #8
 80097a0:	2d0c      	cmp	r5, #12
 80097a2:	bf38      	it	cc
 80097a4:	250c      	movcc	r5, #12
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	4607      	mov	r7, r0
 80097aa:	db01      	blt.n	80097b0 <_malloc_r+0x1c>
 80097ac:	42a9      	cmp	r1, r5
 80097ae:	d905      	bls.n	80097bc <_malloc_r+0x28>
 80097b0:	230c      	movs	r3, #12
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	2600      	movs	r6, #0
 80097b6:	4630      	mov	r0, r6
 80097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097bc:	4e2e      	ldr	r6, [pc, #184]	; (8009878 <_malloc_r+0xe4>)
 80097be:	f000 f89d 	bl	80098fc <__malloc_lock>
 80097c2:	6833      	ldr	r3, [r6, #0]
 80097c4:	461c      	mov	r4, r3
 80097c6:	bb34      	cbnz	r4, 8009816 <_malloc_r+0x82>
 80097c8:	4629      	mov	r1, r5
 80097ca:	4638      	mov	r0, r7
 80097cc:	f7ff ffc2 	bl	8009754 <sbrk_aligned>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	4604      	mov	r4, r0
 80097d4:	d14d      	bne.n	8009872 <_malloc_r+0xde>
 80097d6:	6834      	ldr	r4, [r6, #0]
 80097d8:	4626      	mov	r6, r4
 80097da:	2e00      	cmp	r6, #0
 80097dc:	d140      	bne.n	8009860 <_malloc_r+0xcc>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	4631      	mov	r1, r6
 80097e2:	4638      	mov	r0, r7
 80097e4:	eb04 0803 	add.w	r8, r4, r3
 80097e8:	f000 f878 	bl	80098dc <_sbrk_r>
 80097ec:	4580      	cmp	r8, r0
 80097ee:	d13a      	bne.n	8009866 <_malloc_r+0xd2>
 80097f0:	6821      	ldr	r1, [r4, #0]
 80097f2:	3503      	adds	r5, #3
 80097f4:	1a6d      	subs	r5, r5, r1
 80097f6:	f025 0503 	bic.w	r5, r5, #3
 80097fa:	3508      	adds	r5, #8
 80097fc:	2d0c      	cmp	r5, #12
 80097fe:	bf38      	it	cc
 8009800:	250c      	movcc	r5, #12
 8009802:	4629      	mov	r1, r5
 8009804:	4638      	mov	r0, r7
 8009806:	f7ff ffa5 	bl	8009754 <sbrk_aligned>
 800980a:	3001      	adds	r0, #1
 800980c:	d02b      	beq.n	8009866 <_malloc_r+0xd2>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	442b      	add	r3, r5
 8009812:	6023      	str	r3, [r4, #0]
 8009814:	e00e      	b.n	8009834 <_malloc_r+0xa0>
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	1b52      	subs	r2, r2, r5
 800981a:	d41e      	bmi.n	800985a <_malloc_r+0xc6>
 800981c:	2a0b      	cmp	r2, #11
 800981e:	d916      	bls.n	800984e <_malloc_r+0xba>
 8009820:	1961      	adds	r1, r4, r5
 8009822:	42a3      	cmp	r3, r4
 8009824:	6025      	str	r5, [r4, #0]
 8009826:	bf18      	it	ne
 8009828:	6059      	strne	r1, [r3, #4]
 800982a:	6863      	ldr	r3, [r4, #4]
 800982c:	bf08      	it	eq
 800982e:	6031      	streq	r1, [r6, #0]
 8009830:	5162      	str	r2, [r4, r5]
 8009832:	604b      	str	r3, [r1, #4]
 8009834:	4638      	mov	r0, r7
 8009836:	f104 060b 	add.w	r6, r4, #11
 800983a:	f000 f865 	bl	8009908 <__malloc_unlock>
 800983e:	f026 0607 	bic.w	r6, r6, #7
 8009842:	1d23      	adds	r3, r4, #4
 8009844:	1af2      	subs	r2, r6, r3
 8009846:	d0b6      	beq.n	80097b6 <_malloc_r+0x22>
 8009848:	1b9b      	subs	r3, r3, r6
 800984a:	50a3      	str	r3, [r4, r2]
 800984c:	e7b3      	b.n	80097b6 <_malloc_r+0x22>
 800984e:	6862      	ldr	r2, [r4, #4]
 8009850:	42a3      	cmp	r3, r4
 8009852:	bf0c      	ite	eq
 8009854:	6032      	streq	r2, [r6, #0]
 8009856:	605a      	strne	r2, [r3, #4]
 8009858:	e7ec      	b.n	8009834 <_malloc_r+0xa0>
 800985a:	4623      	mov	r3, r4
 800985c:	6864      	ldr	r4, [r4, #4]
 800985e:	e7b2      	b.n	80097c6 <_malloc_r+0x32>
 8009860:	4634      	mov	r4, r6
 8009862:	6876      	ldr	r6, [r6, #4]
 8009864:	e7b9      	b.n	80097da <_malloc_r+0x46>
 8009866:	230c      	movs	r3, #12
 8009868:	603b      	str	r3, [r7, #0]
 800986a:	4638      	mov	r0, r7
 800986c:	f000 f84c 	bl	8009908 <__malloc_unlock>
 8009870:	e7a1      	b.n	80097b6 <_malloc_r+0x22>
 8009872:	6025      	str	r5, [r4, #0]
 8009874:	e7de      	b.n	8009834 <_malloc_r+0xa0>
 8009876:	bf00      	nop
 8009878:	24000274 	.word	0x24000274

0800987c <_realloc_r>:
 800987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009880:	4680      	mov	r8, r0
 8009882:	4614      	mov	r4, r2
 8009884:	460e      	mov	r6, r1
 8009886:	b921      	cbnz	r1, 8009892 <_realloc_r+0x16>
 8009888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800988c:	4611      	mov	r1, r2
 800988e:	f7ff bf81 	b.w	8009794 <_malloc_r>
 8009892:	b92a      	cbnz	r2, 80098a0 <_realloc_r+0x24>
 8009894:	f7ff ff12 	bl	80096bc <_free_r>
 8009898:	4625      	mov	r5, r4
 800989a:	4628      	mov	r0, r5
 800989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a0:	f000 f838 	bl	8009914 <_malloc_usable_size_r>
 80098a4:	4284      	cmp	r4, r0
 80098a6:	4607      	mov	r7, r0
 80098a8:	d802      	bhi.n	80098b0 <_realloc_r+0x34>
 80098aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098ae:	d812      	bhi.n	80098d6 <_realloc_r+0x5a>
 80098b0:	4621      	mov	r1, r4
 80098b2:	4640      	mov	r0, r8
 80098b4:	f7ff ff6e 	bl	8009794 <_malloc_r>
 80098b8:	4605      	mov	r5, r0
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d0ed      	beq.n	800989a <_realloc_r+0x1e>
 80098be:	42bc      	cmp	r4, r7
 80098c0:	4622      	mov	r2, r4
 80098c2:	4631      	mov	r1, r6
 80098c4:	bf28      	it	cs
 80098c6:	463a      	movcs	r2, r7
 80098c8:	f7ff fed0 	bl	800966c <memcpy>
 80098cc:	4631      	mov	r1, r6
 80098ce:	4640      	mov	r0, r8
 80098d0:	f7ff fef4 	bl	80096bc <_free_r>
 80098d4:	e7e1      	b.n	800989a <_realloc_r+0x1e>
 80098d6:	4635      	mov	r5, r6
 80098d8:	e7df      	b.n	800989a <_realloc_r+0x1e>
	...

080098dc <_sbrk_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d06      	ldr	r5, [pc, #24]	; (80098f8 <_sbrk_r+0x1c>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	f7f7 fb56 	bl	8000f98 <_sbrk>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_sbrk_r+0x1a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_sbrk_r+0x1a>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	2400027c 	.word	0x2400027c

080098fc <__malloc_lock>:
 80098fc:	4801      	ldr	r0, [pc, #4]	; (8009904 <__malloc_lock+0x8>)
 80098fe:	f000 b811 	b.w	8009924 <__retarget_lock_acquire_recursive>
 8009902:	bf00      	nop
 8009904:	24000280 	.word	0x24000280

08009908 <__malloc_unlock>:
 8009908:	4801      	ldr	r0, [pc, #4]	; (8009910 <__malloc_unlock+0x8>)
 800990a:	f000 b80c 	b.w	8009926 <__retarget_lock_release_recursive>
 800990e:	bf00      	nop
 8009910:	24000280 	.word	0x24000280

08009914 <_malloc_usable_size_r>:
 8009914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009918:	1f18      	subs	r0, r3, #4
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfbc      	itt	lt
 800991e:	580b      	ldrlt	r3, [r1, r0]
 8009920:	18c0      	addlt	r0, r0, r3
 8009922:	4770      	bx	lr

08009924 <__retarget_lock_acquire_recursive>:
 8009924:	4770      	bx	lr

08009926 <__retarget_lock_release_recursive>:
 8009926:	4770      	bx	lr

08009928 <_init>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	bf00      	nop
 800992c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992e:	bc08      	pop	{r3}
 8009930:	469e      	mov	lr, r3
 8009932:	4770      	bx	lr

08009934 <_fini>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	bf00      	nop
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr
