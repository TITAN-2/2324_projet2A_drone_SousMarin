
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007530  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000158  24000010  08007850  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000168  08007850  00020168  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011eaf  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022d9  00000000  00000000  00031eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b60  00000000  00000000  000341c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a78  00000000  00000000  00034d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f97e  00000000  00000000  000357a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012812  00000000  00000000  0006511e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001328ba  00000000  00000000  00077930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001aa1ea  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d44  00000000  00000000  001aa23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080077c4 	.word	0x080077c4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080077c4 	.word	0x080077c4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <RPICom_Init>:
#include <RPICom.h>

uint8_t uartRpiRxBuffer[UART_RPI_RX_BUFFER_SIZE];
commandMsg binaryMessage;

void RPICom_Init(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	RPICom_UartActivate();
 80005f4:	f000 f802 	bl	80005fc <RPICom_UartActivate>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <RPICom_UartActivate>:

void RPICom_UartActivate(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, uartRpiRxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000600:	2205      	movs	r2, #5
 8000602:	4903      	ldr	r1, [pc, #12]	; (8000610 <RPICom_UartActivate+0x14>)
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <RPICom_UartActivate+0x18>)
 8000606:	f004 fc63 	bl	8004ed0 <HAL_UART_Receive_IT>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2400002c 	.word	0x2400002c
 8000614:	2400003c 	.word	0x2400003c

08000618 <RPICom_DecodeBinaryMessage>:


void RPICom_DecodeBinaryMessage(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	binaryMessage.thrust = uartRpiRxBuffer[0];
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <RPICom_DecodeBinaryMessage+0x48>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <RPICom_DecodeBinaryMessage+0x4c>)
 8000622:	701a      	strb	r2, [r3, #0]
	binaryMessage.angle = uartRpiRxBuffer[1];
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <RPICom_DecodeBinaryMessage+0x48>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	b25a      	sxtb	r2, r3
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <RPICom_DecodeBinaryMessage+0x4c>)
 800062c:	705a      	strb	r2, [r3, #1]
	binaryMessage.depth = ((uint16_t)uartRpiRxBuffer[2]+(uint16_t)(uartRpiRxBuffer[3]<<8));
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <RPICom_DecodeBinaryMessage+0x48>)
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <RPICom_DecodeBinaryMessage+0x48>)
 8000636:	78db      	ldrb	r3, [r3, #3]
 8000638:	b29b      	uxth	r3, r3
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b29b      	uxth	r3, r3
 800063e:	4413      	add	r3, r2
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <RPICom_DecodeBinaryMessage+0x4c>)
 8000644:	805a      	strh	r2, [r3, #2]
	binaryMessage.paquetNumber = uartRpiRxBuffer[4];
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <RPICom_DecodeBinaryMessage+0x48>)
 8000648:	791a      	ldrb	r2, [r3, #4]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <RPICom_DecodeBinaryMessage+0x4c>)
 800064c:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, &binaryMessage, 5, 10);
 800064e:	230a      	movs	r3, #10
 8000650:	2205      	movs	r2, #5
 8000652:	4904      	ldr	r1, [pc, #16]	; (8000664 <RPICom_DecodeBinaryMessage+0x4c>)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <RPICom_DecodeBinaryMessage+0x50>)
 8000656:	f004 fbad 	bl	8004db4 <HAL_UART_Transmit>
	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement


	//Process(&binaryMessage);
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2400002c 	.word	0x2400002c
 8000664:	24000034 	.word	0x24000034
 8000668:	240000d0 	.word	0x240000d0

0800066c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b80      	ldr	r3, [pc, #512]	; (8000884 <MX_GPIO_Init+0x218>)
 8000684:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000688:	4a7e      	ldr	r2, [pc, #504]	; (8000884 <MX_GPIO_Init+0x218>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000692:	4b7c      	ldr	r3, [pc, #496]	; (8000884 <MX_GPIO_Init+0x218>)
 8000694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	623b      	str	r3, [r7, #32]
 800069e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a0:	4b78      	ldr	r3, [pc, #480]	; (8000884 <MX_GPIO_Init+0x218>)
 80006a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a6:	4a77      	ldr	r2, [pc, #476]	; (8000884 <MX_GPIO_Init+0x218>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006b0:	4b74      	ldr	r3, [pc, #464]	; (8000884 <MX_GPIO_Init+0x218>)
 80006b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	61fb      	str	r3, [r7, #28]
 80006bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b71      	ldr	r3, [pc, #452]	; (8000884 <MX_GPIO_Init+0x218>)
 80006c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c4:	4a6f      	ldr	r2, [pc, #444]	; (8000884 <MX_GPIO_Init+0x218>)
 80006c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ce:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <MX_GPIO_Init+0x218>)
 80006d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b69      	ldr	r3, [pc, #420]	; (8000884 <MX_GPIO_Init+0x218>)
 80006de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e2:	4a68      	ldr	r2, [pc, #416]	; (8000884 <MX_GPIO_Init+0x218>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ec:	4b65      	ldr	r3, [pc, #404]	; (8000884 <MX_GPIO_Init+0x218>)
 80006ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <MX_GPIO_Init+0x218>)
 80006fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000700:	4a60      	ldr	r2, [pc, #384]	; (8000884 <MX_GPIO_Init+0x218>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800070a:	4b5e      	ldr	r3, [pc, #376]	; (8000884 <MX_GPIO_Init+0x218>)
 800070c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000718:	4b5a      	ldr	r3, [pc, #360]	; (8000884 <MX_GPIO_Init+0x218>)
 800071a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800071e:	4a59      	ldr	r2, [pc, #356]	; (8000884 <MX_GPIO_Init+0x218>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000728:	4b56      	ldr	r3, [pc, #344]	; (8000884 <MX_GPIO_Init+0x218>)
 800072a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <MX_GPIO_Init+0x218>)
 8000738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800073c:	4a51      	ldr	r2, [pc, #324]	; (8000884 <MX_GPIO_Init+0x218>)
 800073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000742:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000746:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <MX_GPIO_Init+0x218>)
 8000748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000754:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <MX_GPIO_Init+0x218>)
 8000756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075a:	4a4a      	ldr	r2, [pc, #296]	; (8000884 <MX_GPIO_Init+0x218>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <MX_GPIO_Init+0x218>)
 8000766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4843      	ldr	r0, [pc, #268]	; (8000888 <MX_GPIO_Init+0x21c>)
 800077a:	f001 fc9f 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f244 0101 	movw	r1, #16385	; 0x4001
 8000784:	4841      	ldr	r0, [pc, #260]	; (800088c <MX_GPIO_Init+0x220>)
 8000786:	f001 fc99 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	4840      	ldr	r0, [pc, #256]	; (8000890 <MX_GPIO_Init+0x224>)
 8000790:	f001 fc94 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	4619      	mov	r1, r3
 80007a8:	483a      	ldr	r0, [pc, #232]	; (8000894 <MX_GPIO_Init+0x228>)
 80007aa:	f001 fad7 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80007ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	4830      	ldr	r0, [pc, #192]	; (8000888 <MX_GPIO_Init+0x21c>)
 80007c8:	f001 fac8 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007cc:	f244 0301 	movw	r3, #16385	; 0x4001
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4829      	ldr	r0, [pc, #164]	; (800088c <MX_GPIO_Init+0x220>)
 80007e6:	f001 fab9 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4826      	ldr	r0, [pc, #152]	; (8000898 <MX_GPIO_Init+0x22c>)
 8000800:	f001 faac 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	4820      	ldr	r0, [pc, #128]	; (800089c <MX_GPIO_Init+0x230>)
 800081a:	f001 fa9f 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000830:	230a      	movs	r3, #10
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <MX_GPIO_Init+0x230>)
 800083c:	f001 fa8e 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000840:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4810      	ldr	r0, [pc, #64]	; (800089c <MX_GPIO_Init+0x230>)
 800085a:	f001 fa7f 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085e:	2302      	movs	r3, #2
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_GPIO_Init+0x224>)
 8000876:	f001 fa71 	bl	8001d5c <HAL_GPIO_Init>

}
 800087a:	bf00      	nop
 800087c:	3738      	adds	r7, #56	; 0x38
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58024400 	.word	0x58024400
 8000888:	58021400 	.word	0x58021400
 800088c:	58020400 	.word	0x58020400
 8000890:	58021000 	.word	0x58021000
 8000894:	58020800 	.word	0x58020800
 8000898:	58021800 	.word	0x58021800
 800089c:	58020000 	.word	0x58020000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 fb30 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f828 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f7ff fede 	bl	800066c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008b0:	f000 f9b2 	bl	8000c18 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80008b4:	f000 faf6 	bl	8000ea4 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 80008b8:	f000 f962 	bl	8000b80 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "Starting...\r\n", 13, 10);
 80008bc:	230a      	movs	r3, #10
 80008be:	220d      	movs	r2, #13
 80008c0:	490a      	ldr	r1, [pc, #40]	; (80008ec <main+0x4c>)
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <main+0x50>)
 80008c4:	f004 fa76 	bl	8004db4 <HAL_UART_Transmit>
	RPICom_Init();
 80008c8:	f7ff fe92 	bl	80005f0 <RPICom_Init>
	HAL_UART_Transmit(&huart3, "Init Done\r\n", 11, 10);
 80008cc:	230a      	movs	r3, #10
 80008ce:	220b      	movs	r2, #11
 80008d0:	4908      	ldr	r1, [pc, #32]	; (80008f4 <main+0x54>)
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <main+0x50>)
 80008d4:	f004 fa6e 	bl	8004db4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 80008d8:	2101      	movs	r1, #1
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <main+0x58>)
 80008dc:	f001 fc07 	bl	80020ee <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 80008e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e4:	f000 fba2 	bl	800102c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 80008e8:	e7f6      	b.n	80008d8 <main+0x38>
 80008ea:	bf00      	nop
 80008ec:	080077dc 	.word	0x080077dc
 80008f0:	240000d0 	.word	0x240000d0
 80008f4:	080077ec 	.word	0x080077ec
 80008f8:	58020400 	.word	0x58020400

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09c      	sub	sp, #112	; 0x70
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	224c      	movs	r2, #76	; 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 ff52 	bl	80077b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f006 ff4c 	bl	80077b4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <SystemClock_Config+0xe4>)
 800091e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000926:	2004      	movs	r0, #4
 8000928:	f001 fbfc 	bl	8002124 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <SystemClock_Config+0xe8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <SystemClock_Config+0xe8>)
 8000936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <SystemClock_Config+0xe8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <SystemClock_Config+0xe8>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000958:	2321      	movs	r3, #33	; 0x21
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000962:	2301      	movs	r3, #1
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	2302      	movs	r3, #2
 800096c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000972:	2318      	movs	r3, #24
 8000974:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000976:	2302      	movs	r3, #2
 8000978:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800097a:	2304      	movs	r3, #4
 800097c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000982:	230c      	movs	r3, #12
 8000984:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000986:	2300      	movs	r3, #0
 8000988:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4618      	mov	r0, r3
 8000994:	f001 fc20 	bl	80021d8 <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800099e:	f000 f823 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	233f      	movs	r3, #63	; 0x3f
 80009a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2303      	movs	r3, #3
 80009a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2102      	movs	r1, #2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 f838 	bl	8002a3c <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80009d2:	f000 f809 	bl	80009e8 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3770      	adds	r7, #112	; 0x70
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58024400 	.word	0x58024400
 80009e4:	58024800 	.word	0x58024800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x30>)
 80009fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x30>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x30>)
 8000a0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	58024400 	.word	0x58024400

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f000 faba 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <UART4_IRQHandler+0x10>)
 8000a82:	f004 fa71 	bl	8004f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2400003c 	.word	0x2400003c

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <SystemInit+0xd0>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a31      	ldr	r2, [pc, #196]	; (8000b60 <SystemInit+0xd0>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <SystemInit+0xd4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d807      	bhi.n	8000ac0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <SystemInit+0xd4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f023 030f 	bic.w	r3, r3, #15
 8000ab8:	4a2a      	ldr	r2, [pc, #168]	; (8000b64 <SystemInit+0xd4>)
 8000aba:	f043 0303 	orr.w	r3, r3, #3
 8000abe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <SystemInit+0xd8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <SystemInit+0xd8>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000acc:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <SystemInit+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SystemInit+0xd8>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4924      	ldr	r1, [pc, #144]	; (8000b68 <SystemInit+0xd8>)
 8000ad8:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <SystemInit+0xdc>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <SystemInit+0xd4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 030c 	and.w	r3, r3, #12
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <SystemInit+0xd4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f023 030f 	bic.w	r3, r3, #15
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <SystemInit+0xd4>)
 8000af4:	f043 0303 	orr.w	r3, r3, #3
 8000af8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <SystemInit+0xd8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <SystemInit+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <SystemInit+0xd8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <SystemInit+0xd8>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <SystemInit+0xe0>)
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <SystemInit+0xd8>)
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <SystemInit+0xe4>)
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <SystemInit+0xd8>)
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <SystemInit+0xe8>)
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <SystemInit+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <SystemInit+0xd8>)
 8000b26:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <SystemInit+0xe8>)
 8000b28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <SystemInit+0xd8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <SystemInit+0xd8>)
 8000b32:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SystemInit+0xe8>)
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <SystemInit+0xd8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <SystemInit+0xd8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <SystemInit+0xd8>)
 8000b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <SystemInit+0xd8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <SystemInit+0xec>)
 8000b50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00
 8000b64:	52002000 	.word	0x52002000
 8000b68:	58024400 	.word	0x58024400
 8000b6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b70:	02020200 	.word	0x02020200
 8000b74:	01ff0000 	.word	0x01ff0000
 8000b78:	01010280 	.word	0x01010280
 8000b7c:	52004000 	.word	0x52004000

08000b80 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_UART4_Init+0x90>)
 8000b86:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <MX_UART4_Init+0x94>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_UART4_Init+0x90>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_UART4_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_UART4_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_UART4_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_UART4_Init+0x90>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bc8:	4811      	ldr	r0, [pc, #68]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bca:	f004 f8a3 	bl	8004d14 <HAL_UART_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f7ff ff08 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bdc:	f006 fcfb 	bl	80075d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f7ff feff 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bee:	f006 fd30 	bl	8007652 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f7ff fef6 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_UART4_Init+0x90>)
 8000bfe:	f006 fcb1 	bl	8007564 <HAL_UARTEx_DisableFifoMode>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f7ff feee 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2400003c 	.word	0x2400003c
 8000c14:	40004c00 	.word	0x40004c00

08000c18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <MX_USART3_UART_Init+0x94>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c60:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c62:	f004 f857 	bl	8004d14 <HAL_UART_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c6c:	f7ff febc 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c74:	f006 fcaf 	bl	80075d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7e:	f7ff feb3 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c86:	f006 fce4 	bl	8007652 <HAL_UARTEx_SetRxFifoThreshold>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c90:	f7ff feaa 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c96:	f006 fc65 	bl	8007564 <HAL_UARTEx_DisableFifoMode>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f7ff fea2 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	240000d0 	.word	0x240000d0
 8000cac:	40004800 	.word	0x40004800

08000cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0be      	sub	sp, #248	; 0xf8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	22c0      	movs	r2, #192	; 0xc0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 fd6f 	bl	80077b4 <memset>
  if(uartHandle->Instance==UART4)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a63      	ldr	r2, [pc, #396]	; (8000e68 <HAL_UART_MspInit+0x1b8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d172      	bne.n	8000dc6 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ce0:	f04f 0202 	mov.w	r2, #2
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fa2c 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d02:	f7ff fe71 	bl	80009e8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d06:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d08:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d0c:	4a57      	ldr	r2, [pc, #348]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d12:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d16:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d18:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2a:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d34:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d82:	4619      	mov	r1, r3
 8000d84:	483a      	ldr	r0, [pc, #232]	; (8000e70 <HAL_UART_MspInit+0x1c0>)
 8000d86:	f000 ffe9 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000da2:	2308      	movs	r3, #8
 8000da4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4831      	ldr	r0, [pc, #196]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000db0:	f000 ffd4 	bl	8001d5c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2034      	movs	r0, #52	; 0x34
 8000dba:	f000 fa36 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000dbe:	2034      	movs	r0, #52	; 0x34
 8000dc0:	f000 fa4d 	bl	800125e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dc4:	e04b      	b.n	8000e5e <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2b      	ldr	r2, [pc, #172]	; (8000e78 <HAL_UART_MspInit+0x1c8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d146      	bne.n	8000e5e <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd0:	f04f 0202 	mov.w	r2, #2
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 f9b4 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8000df2:	f7ff fdf9 	bl	80009e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000df8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e02:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000e08:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0x1bc>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_UART_MspInit+0x1c4>)
 8000e5a:	f000 ff7f 	bl	8001d5c <HAL_GPIO_Init>
}
 8000e5e:	bf00      	nop
 8000e60:	37f8      	adds	r7, #248	; 0xf8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004c00 	.word	0x40004c00
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020000 	.word	0x58020000
 8000e74:	58020c00 	.word	0x58020c00
 8000e78:	40004800 	.word	0x40004800

08000e7c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <HAL_UART_RxCpltCallback+0x24>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d103      	bne.n	8000e96 <HAL_UART_RxCpltCallback+0x1a>
	{
		RPICom_DecodeBinaryMessage();
 8000e8e:	f7ff fbc3 	bl	8000618 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate();
 8000e92:	f7ff fbb3 	bl	80005fc <RPICom_UartActivate>
	}
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004c00 	.word	0x40004c00

08000ea4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb8:	f7ff fdea 	bl	8000a90 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f006 fc43 	bl	800776c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fcdb 	bl	80008a0 <main>
  bx  lr
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ef4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ef8:	08007840 	.word	0x08007840
  ldr r2, =_sbss
 8000efc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f00:	24000168 	.word	0x24000168

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 f980 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f14:	f001 ff48 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	4913      	ldr	r1, [pc, #76]	; (8000f74 <HAL_Init+0x6c>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_Init+0x68>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_Init+0x6c>)
 8000f3c:	5cd3      	ldrb	r3, [r2, r3]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_Init+0x70>)
 8000f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_Init+0x74>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f814 	bl	8000f80 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e002      	b.n	8000f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff fd47 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024400 	.word	0x58024400
 8000f74:	080077f8 	.word	0x080077f8
 8000f78:	24000004 	.word	0x24000004
 8000f7c:	24000000 	.word	0x24000000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e021      	b.n	8000fd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_InitTick+0x64>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_InitTick+0x60>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f965 	bl	800127a <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc8:	f000 f92f 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x68>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2400000c 	.word	0x2400000c
 8000fe4:	24000000 	.word	0x24000000
 8000fe8:	24000008 	.word	0x24000008

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2400000c 	.word	0x2400000c
 8001010:	24000164 	.word	0x24000164

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	24000164 	.word	0x24000164

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2400000c 	.word	0x2400000c

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	05fa0000 	.word	0x05fa0000

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff40 	bl	80010bc <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff33 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa4 	bl	80011d0 <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff feba 	bl	8001014 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e2dc      	b.n	8001866 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d008      	beq.n	80012ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e2cd      	b.n	8001866 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a76      	ldr	r2, [pc, #472]	; (80014a8 <HAL_DMA_Abort+0x214>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d04a      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a74      	ldr	r2, [pc, #464]	; (80014ac <HAL_DMA_Abort+0x218>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d045      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a73      	ldr	r2, [pc, #460]	; (80014b0 <HAL_DMA_Abort+0x21c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d040      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a71      	ldr	r2, [pc, #452]	; (80014b4 <HAL_DMA_Abort+0x220>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d03b      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a70      	ldr	r2, [pc, #448]	; (80014b8 <HAL_DMA_Abort+0x224>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d036      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_DMA_Abort+0x228>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d031      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6d      	ldr	r2, [pc, #436]	; (80014c0 <HAL_DMA_Abort+0x22c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d02c      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a6b      	ldr	r2, [pc, #428]	; (80014c4 <HAL_DMA_Abort+0x230>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d027      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_DMA_Abort+0x234>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d022      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a68      	ldr	r2, [pc, #416]	; (80014cc <HAL_DMA_Abort+0x238>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01d      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <HAL_DMA_Abort+0x23c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d018      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a65      	ldr	r2, [pc, #404]	; (80014d4 <HAL_DMA_Abort+0x240>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a64      	ldr	r2, [pc, #400]	; (80014d8 <HAL_DMA_Abort+0x244>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00e      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a62      	ldr	r2, [pc, #392]	; (80014dc <HAL_DMA_Abort+0x248>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d009      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a61      	ldr	r2, [pc, #388]	; (80014e0 <HAL_DMA_Abort+0x24c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d004      	beq.n	800136a <HAL_DMA_Abort+0xd6>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a5f      	ldr	r2, [pc, #380]	; (80014e4 <HAL_DMA_Abort+0x250>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_DMA_Abort+0xda>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_DMA_Abort+0xdc>
 800136e:	2300      	movs	r3, #0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 021e 	bic.w	r2, r2, #30
 8001382:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001392:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e00a      	b.n	80013b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 020e 	bic.w	r2, r2, #14
 80013aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a3c      	ldr	r2, [pc, #240]	; (80014a8 <HAL_DMA_Abort+0x214>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d072      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a3a      	ldr	r2, [pc, #232]	; (80014ac <HAL_DMA_Abort+0x218>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d06d      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a39      	ldr	r2, [pc, #228]	; (80014b0 <HAL_DMA_Abort+0x21c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d068      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <HAL_DMA_Abort+0x220>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d063      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a36      	ldr	r2, [pc, #216]	; (80014b8 <HAL_DMA_Abort+0x224>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d05e      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a34      	ldr	r2, [pc, #208]	; (80014bc <HAL_DMA_Abort+0x228>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d059      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <HAL_DMA_Abort+0x22c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d054      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <HAL_DMA_Abort+0x230>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d04f      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <HAL_DMA_Abort+0x234>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d04a      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a2e      	ldr	r2, [pc, #184]	; (80014cc <HAL_DMA_Abort+0x238>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d045      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a2d      	ldr	r2, [pc, #180]	; (80014d0 <HAL_DMA_Abort+0x23c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d040      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <HAL_DMA_Abort+0x240>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d03b      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <HAL_DMA_Abort+0x244>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d036      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a28      	ldr	r2, [pc, #160]	; (80014dc <HAL_DMA_Abort+0x248>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d031      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_DMA_Abort+0x24c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d02c      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <HAL_DMA_Abort+0x250>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d027      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <HAL_DMA_Abort+0x254>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d022      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_DMA_Abort+0x258>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01d      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <HAL_DMA_Abort+0x25c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d018      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <HAL_DMA_Abort+0x260>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <HAL_DMA_Abort+0x264>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00e      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <HAL_DMA_Abort+0x268>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d009      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_DMA_Abort+0x26c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d004      	beq.n	80014a2 <HAL_DMA_Abort+0x20e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_DMA_Abort+0x270>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d132      	bne.n	8001508 <HAL_DMA_Abort+0x274>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e031      	b.n	800150a <HAL_DMA_Abort+0x276>
 80014a6:	bf00      	nop
 80014a8:	40020010 	.word	0x40020010
 80014ac:	40020028 	.word	0x40020028
 80014b0:	40020040 	.word	0x40020040
 80014b4:	40020058 	.word	0x40020058
 80014b8:	40020070 	.word	0x40020070
 80014bc:	40020088 	.word	0x40020088
 80014c0:	400200a0 	.word	0x400200a0
 80014c4:	400200b8 	.word	0x400200b8
 80014c8:	40020410 	.word	0x40020410
 80014cc:	40020428 	.word	0x40020428
 80014d0:	40020440 	.word	0x40020440
 80014d4:	40020458 	.word	0x40020458
 80014d8:	40020470 	.word	0x40020470
 80014dc:	40020488 	.word	0x40020488
 80014e0:	400204a0 	.word	0x400204a0
 80014e4:	400204b8 	.word	0x400204b8
 80014e8:	58025408 	.word	0x58025408
 80014ec:	5802541c 	.word	0x5802541c
 80014f0:	58025430 	.word	0x58025430
 80014f4:	58025444 	.word	0x58025444
 80014f8:	58025458 	.word	0x58025458
 80014fc:	5802546c 	.word	0x5802546c
 8001500:	58025480 	.word	0x58025480
 8001504:	58025494 	.word	0x58025494
 8001508:	2300      	movs	r3, #0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800151c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_DMA_Abort+0x444>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d04a      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a6b      	ldr	r2, [pc, #428]	; (80016dc <HAL_DMA_Abort+0x448>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d045      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <HAL_DMA_Abort+0x44c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d040      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a68      	ldr	r2, [pc, #416]	; (80016e4 <HAL_DMA_Abort+0x450>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d03b      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a67      	ldr	r2, [pc, #412]	; (80016e8 <HAL_DMA_Abort+0x454>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d036      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a65      	ldr	r2, [pc, #404]	; (80016ec <HAL_DMA_Abort+0x458>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d031      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a64      	ldr	r2, [pc, #400]	; (80016f0 <HAL_DMA_Abort+0x45c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d02c      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a62      	ldr	r2, [pc, #392]	; (80016f4 <HAL_DMA_Abort+0x460>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d027      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a61      	ldr	r2, [pc, #388]	; (80016f8 <HAL_DMA_Abort+0x464>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d022      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_DMA_Abort+0x468>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d01d      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a5e      	ldr	r2, [pc, #376]	; (8001700 <HAL_DMA_Abort+0x46c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d018      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a5c      	ldr	r2, [pc, #368]	; (8001704 <HAL_DMA_Abort+0x470>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5b      	ldr	r2, [pc, #364]	; (8001708 <HAL_DMA_Abort+0x474>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00e      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a59      	ldr	r2, [pc, #356]	; (800170c <HAL_DMA_Abort+0x478>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d009      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_DMA_Abort+0x47c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d004      	beq.n	80015be <HAL_DMA_Abort+0x32a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a56      	ldr	r2, [pc, #344]	; (8001714 <HAL_DMA_Abort+0x480>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d108      	bne.n	80015d0 <HAL_DMA_Abort+0x33c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_DMA_Abort+0x34c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015e0:	e013      	b.n	800160a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015e2:	f7ff fd17 	bl	8001014 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b05      	cmp	r3, #5
 80015ee:	d90c      	bls.n	800160a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2220      	movs	r2, #32
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e12d      	b.n	8001866 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e5      	bne.n	80015e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <HAL_DMA_Abort+0x444>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04a      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <HAL_DMA_Abort+0x448>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d045      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <HAL_DMA_Abort+0x44c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d040      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <HAL_DMA_Abort+0x450>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d03b      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <HAL_DMA_Abort+0x454>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d036      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_DMA_Abort+0x458>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d031      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_DMA_Abort+0x45c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d02c      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <HAL_DMA_Abort+0x460>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d027      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <HAL_DMA_Abort+0x464>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <HAL_DMA_Abort+0x468>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01d      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a20      	ldr	r2, [pc, #128]	; (8001700 <HAL_DMA_Abort+0x46c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d018      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <HAL_DMA_Abort+0x470>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_DMA_Abort+0x474>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00e      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_DMA_Abort+0x478>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d009      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <HAL_DMA_Abort+0x47c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d004      	beq.n	80016b6 <HAL_DMA_Abort+0x422>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_DMA_Abort+0x480>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_DMA_Abort+0x426>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_DMA_Abort+0x428>
 80016ba:	2300      	movs	r3, #0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d02b      	beq.n	8001718 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	223f      	movs	r2, #63	; 0x3f
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	e02a      	b.n	800172e <HAL_DMA_Abort+0x49a>
 80016d8:	40020010 	.word	0x40020010
 80016dc:	40020028 	.word	0x40020028
 80016e0:	40020040 	.word	0x40020040
 80016e4:	40020058 	.word	0x40020058
 80016e8:	40020070 	.word	0x40020070
 80016ec:	40020088 	.word	0x40020088
 80016f0:	400200a0 	.word	0x400200a0
 80016f4:	400200b8 	.word	0x400200b8
 80016f8:	40020410 	.word	0x40020410
 80016fc:	40020428 	.word	0x40020428
 8001700:	40020440 	.word	0x40020440
 8001704:	40020458 	.word	0x40020458
 8001708:	40020470 	.word	0x40020470
 800170c:	40020488 	.word	0x40020488
 8001710:	400204a0 	.word	0x400204a0
 8001714:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2201      	movs	r2, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_DMA_Abort+0x5dc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d072      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_DMA_Abort+0x5e0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d06d      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_DMA_Abort+0x5e4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d068      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a4a      	ldr	r2, [pc, #296]	; (800187c <HAL_DMA_Abort+0x5e8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d063      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a49      	ldr	r2, [pc, #292]	; (8001880 <HAL_DMA_Abort+0x5ec>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d05e      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a47      	ldr	r2, [pc, #284]	; (8001884 <HAL_DMA_Abort+0x5f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d059      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_DMA_Abort+0x5f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d054      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a44      	ldr	r2, [pc, #272]	; (800188c <HAL_DMA_Abort+0x5f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d04f      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a43      	ldr	r2, [pc, #268]	; (8001890 <HAL_DMA_Abort+0x5fc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04a      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a41      	ldr	r2, [pc, #260]	; (8001894 <HAL_DMA_Abort+0x600>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d045      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <HAL_DMA_Abort+0x604>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d040      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a3e      	ldr	r2, [pc, #248]	; (800189c <HAL_DMA_Abort+0x608>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d03b      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a3d      	ldr	r2, [pc, #244]	; (80018a0 <HAL_DMA_Abort+0x60c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d036      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <HAL_DMA_Abort+0x610>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d031      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <HAL_DMA_Abort+0x614>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d02c      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <HAL_DMA_Abort+0x618>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d027      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a37      	ldr	r2, [pc, #220]	; (80018b0 <HAL_DMA_Abort+0x61c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d022      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a35      	ldr	r2, [pc, #212]	; (80018b4 <HAL_DMA_Abort+0x620>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01d      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <HAL_DMA_Abort+0x624>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d018      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a32      	ldr	r2, [pc, #200]	; (80018bc <HAL_DMA_Abort+0x628>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <HAL_DMA_Abort+0x62c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00e      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <HAL_DMA_Abort+0x630>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <HAL_DMA_Abort+0x634>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_DMA_Abort+0x58a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <HAL_DMA_Abort+0x638>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_DMA_Abort+0x58e>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_DMA_Abort+0x590>
 8001822:	2300      	movs	r3, #0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d015      	beq.n	8001854 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001830:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00c      	beq.n	8001854 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001848:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001852:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020010 	.word	0x40020010
 8001874:	40020028 	.word	0x40020028
 8001878:	40020040 	.word	0x40020040
 800187c:	40020058 	.word	0x40020058
 8001880:	40020070 	.word	0x40020070
 8001884:	40020088 	.word	0x40020088
 8001888:	400200a0 	.word	0x400200a0
 800188c:	400200b8 	.word	0x400200b8
 8001890:	40020410 	.word	0x40020410
 8001894:	40020428 	.word	0x40020428
 8001898:	40020440 	.word	0x40020440
 800189c:	40020458 	.word	0x40020458
 80018a0:	40020470 	.word	0x40020470
 80018a4:	40020488 	.word	0x40020488
 80018a8:	400204a0 	.word	0x400204a0
 80018ac:	400204b8 	.word	0x400204b8
 80018b0:	58025408 	.word	0x58025408
 80018b4:	5802541c 	.word	0x5802541c
 80018b8:	58025430 	.word	0x58025430
 80018bc:	58025444 	.word	0x58025444
 80018c0:	58025458 	.word	0x58025458
 80018c4:	5802546c 	.word	0x5802546c
 80018c8:	58025480 	.word	0x58025480
 80018cc:	58025494 	.word	0x58025494

080018d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e237      	b.n	8001d52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d004      	beq.n	80018f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e22c      	b.n	8001d52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5c      	ldr	r2, [pc, #368]	; (8001a70 <HAL_DMA_Abort_IT+0x1a0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d04a      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a5b      	ldr	r2, [pc, #364]	; (8001a74 <HAL_DMA_Abort_IT+0x1a4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d045      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a59      	ldr	r2, [pc, #356]	; (8001a78 <HAL_DMA_Abort_IT+0x1a8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d040      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_DMA_Abort_IT+0x1ac>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d03b      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <HAL_DMA_Abort_IT+0x1b0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d036      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_DMA_Abort_IT+0x1b4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d031      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a53      	ldr	r2, [pc, #332]	; (8001a88 <HAL_DMA_Abort_IT+0x1b8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02c      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_DMA_Abort_IT+0x1bc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d027      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a50      	ldr	r2, [pc, #320]	; (8001a90 <HAL_DMA_Abort_IT+0x1c0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d022      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a4f      	ldr	r2, [pc, #316]	; (8001a94 <HAL_DMA_Abort_IT+0x1c4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d01d      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a4d      	ldr	r2, [pc, #308]	; (8001a98 <HAL_DMA_Abort_IT+0x1c8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d018      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_DMA_Abort_IT+0x1cc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <HAL_DMA_Abort_IT+0x1d0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00e      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_DMA_Abort_IT+0x1d4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <HAL_DMA_Abort_IT+0x1d8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_DMA_Abort_IT+0xc8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a46      	ldr	r2, [pc, #280]	; (8001aac <HAL_DMA_Abort_IT+0x1dc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_DMA_Abort_IT+0xcc>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_DMA_Abort_IT+0xce>
 800199c:	2300      	movs	r3, #0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8086 	beq.w	8001ab0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2f      	ldr	r2, [pc, #188]	; (8001a70 <HAL_DMA_Abort_IT+0x1a0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d04a      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <HAL_DMA_Abort_IT+0x1a4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d045      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <HAL_DMA_Abort_IT+0x1a8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <HAL_DMA_Abort_IT+0x1ac>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d03b      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <HAL_DMA_Abort_IT+0x1b0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d036      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a28      	ldr	r2, [pc, #160]	; (8001a84 <HAL_DMA_Abort_IT+0x1b4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d031      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <HAL_DMA_Abort_IT+0x1b8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02c      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <HAL_DMA_Abort_IT+0x1bc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d027      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_DMA_Abort_IT+0x1c0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_DMA_Abort_IT+0x1c4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d01d      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a20      	ldr	r2, [pc, #128]	; (8001a98 <HAL_DMA_Abort_IT+0x1c8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <HAL_DMA_Abort_IT+0x1cc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_DMA_Abort_IT+0x1d0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <HAL_DMA_Abort_IT+0x1d4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_DMA_Abort_IT+0x1d8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x17c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_DMA_Abort_IT+0x1dc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d108      	bne.n	8001a5e <HAL_DMA_Abort_IT+0x18e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e178      	b.n	8001d50 <HAL_DMA_Abort_IT+0x480>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e16f      	b.n	8001d50 <HAL_DMA_Abort_IT+0x480>
 8001a70:	40020010 	.word	0x40020010
 8001a74:	40020028 	.word	0x40020028
 8001a78:	40020040 	.word	0x40020040
 8001a7c:	40020058 	.word	0x40020058
 8001a80:	40020070 	.word	0x40020070
 8001a84:	40020088 	.word	0x40020088
 8001a88:	400200a0 	.word	0x400200a0
 8001a8c:	400200b8 	.word	0x400200b8
 8001a90:	40020410 	.word	0x40020410
 8001a94:	40020428 	.word	0x40020428
 8001a98:	40020440 	.word	0x40020440
 8001a9c:	40020458 	.word	0x40020458
 8001aa0:	40020470 	.word	0x40020470
 8001aa4:	40020488 	.word	0x40020488
 8001aa8:	400204a0 	.word	0x400204a0
 8001aac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 020e 	bic.w	r2, r2, #14
 8001abe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6c      	ldr	r2, [pc, #432]	; (8001c78 <HAL_DMA_Abort_IT+0x3a8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d04a      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a6b      	ldr	r2, [pc, #428]	; (8001c7c <HAL_DMA_Abort_IT+0x3ac>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d045      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <HAL_DMA_Abort_IT+0x3b0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d040      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a68      	ldr	r2, [pc, #416]	; (8001c84 <HAL_DMA_Abort_IT+0x3b4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d03b      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a66      	ldr	r2, [pc, #408]	; (8001c88 <HAL_DMA_Abort_IT+0x3b8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d036      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_DMA_Abort_IT+0x3bc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d031      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a63      	ldr	r2, [pc, #396]	; (8001c90 <HAL_DMA_Abort_IT+0x3c0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02c      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a62      	ldr	r2, [pc, #392]	; (8001c94 <HAL_DMA_Abort_IT+0x3c4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d027      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a60      	ldr	r2, [pc, #384]	; (8001c98 <HAL_DMA_Abort_IT+0x3c8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d022      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a5f      	ldr	r2, [pc, #380]	; (8001c9c <HAL_DMA_Abort_IT+0x3cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d01d      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <HAL_DMA_Abort_IT+0x3d0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d018      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5c      	ldr	r2, [pc, #368]	; (8001ca4 <HAL_DMA_Abort_IT+0x3d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5a      	ldr	r2, [pc, #360]	; (8001ca8 <HAL_DMA_Abort_IT+0x3d8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00e      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a59      	ldr	r2, [pc, #356]	; (8001cac <HAL_DMA_Abort_IT+0x3dc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a57      	ldr	r2, [pc, #348]	; (8001cb0 <HAL_DMA_Abort_IT+0x3e0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x290>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_DMA_Abort_IT+0x3e4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d108      	bne.n	8001b72 <HAL_DMA_Abort_IT+0x2a2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_DMA_Abort_IT+0x2b2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a3c      	ldr	r2, [pc, #240]	; (8001c78 <HAL_DMA_Abort_IT+0x3a8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d072      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_DMA_Abort_IT+0x3ac>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d06d      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a39      	ldr	r2, [pc, #228]	; (8001c80 <HAL_DMA_Abort_IT+0x3b0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d068      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <HAL_DMA_Abort_IT+0x3b4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d063      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a36      	ldr	r2, [pc, #216]	; (8001c88 <HAL_DMA_Abort_IT+0x3b8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d05e      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a34      	ldr	r2, [pc, #208]	; (8001c8c <HAL_DMA_Abort_IT+0x3bc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d059      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a33      	ldr	r2, [pc, #204]	; (8001c90 <HAL_DMA_Abort_IT+0x3c0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d054      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <HAL_DMA_Abort_IT+0x3c4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04f      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <HAL_DMA_Abort_IT+0x3c8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d04a      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_DMA_Abort_IT+0x3cc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d045      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_DMA_Abort_IT+0x3d0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d040      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_DMA_Abort_IT+0x3d4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d03b      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_DMA_Abort_IT+0x3d8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d036      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_DMA_Abort_IT+0x3dc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d031      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_DMA_Abort_IT+0x3e0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d02c      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_DMA_Abort_IT+0x3e4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d027      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_DMA_Abort_IT+0x3e8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_DMA_Abort_IT+0x3ec>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01d      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_DMA_Abort_IT+0x3f0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d018      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_DMA_Abort_IT+0x3f4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_DMA_Abort_IT+0x3f8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_DMA_Abort_IT+0x3fc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_DMA_Abort_IT+0x400>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d004      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x3a2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_DMA_Abort_IT+0x404>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d132      	bne.n	8001cd8 <HAL_DMA_Abort_IT+0x408>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e031      	b.n	8001cda <HAL_DMA_Abort_IT+0x40a>
 8001c76:	bf00      	nop
 8001c78:	40020010 	.word	0x40020010
 8001c7c:	40020028 	.word	0x40020028
 8001c80:	40020040 	.word	0x40020040
 8001c84:	40020058 	.word	0x40020058
 8001c88:	40020070 	.word	0x40020070
 8001c8c:	40020088 	.word	0x40020088
 8001c90:	400200a0 	.word	0x400200a0
 8001c94:	400200b8 	.word	0x400200b8
 8001c98:	40020410 	.word	0x40020410
 8001c9c:	40020428 	.word	0x40020428
 8001ca0:	40020440 	.word	0x40020440
 8001ca4:	40020458 	.word	0x40020458
 8001ca8:	40020470 	.word	0x40020470
 8001cac:	40020488 	.word	0x40020488
 8001cb0:	400204a0 	.word	0x400204a0
 8001cb4:	400204b8 	.word	0x400204b8
 8001cb8:	58025408 	.word	0x58025408
 8001cbc:	5802541c 	.word	0x5802541c
 8001cc0:	58025430 	.word	0x58025430
 8001cc4:	58025444 	.word	0x58025444
 8001cc8:	58025458 	.word	0x58025458
 8001ccc:	5802546c 	.word	0x5802546c
 8001cd0:	58025480 	.word	0x58025480
 8001cd4:	58025494 	.word	0x58025494
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d028      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00c      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <HAL_GPIO_Init+0x234>)
 8001d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d6e:	e194      	b.n	800209a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8186 	beq.w	8002094 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d005      	beq.n	8001da0 <HAL_GPIO_Init+0x44>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d130      	bne.n	8001e02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 0201 	and.w	r2, r3, #1
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d017      	beq.n	8001e3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d123      	bne.n	8001e92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	08da      	lsrs	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3208      	adds	r2, #8
 8001e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	08da      	lsrs	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3208      	adds	r2, #8
 8001e8c:	69b9      	ldr	r1, [r7, #24]
 8001e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0203 	and.w	r2, r3, #3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80e0 	beq.w	8002094 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_GPIO_Init+0x238>)
 8001ed6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001eda:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <HAL_GPIO_Init+0x238>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_GPIO_Init+0x238>)
 8001ee6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef2:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_GPIO_Init+0x23c>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_GPIO_Init+0x240>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d052      	beq.n	8001fc4 <HAL_GPIO_Init+0x268>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_GPIO_Init+0x244>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_GPIO_Init+0x22e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_GPIO_Init+0x248>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x22a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_GPIO_Init+0x24c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x226>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_GPIO_Init+0x250>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x222>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_GPIO_Init+0x254>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x21e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_GPIO_Init+0x258>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x21a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_GPIO_Init+0x25c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x216>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_GPIO_Init+0x260>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_GPIO_Init+0x264>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x20e>
 8001f66:	2309      	movs	r3, #9
 8001f68:	e02d      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	e02b      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	e029      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e027      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e025      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e023      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e021      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e01f      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e01d      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e01b      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f8e:	bf00      	nop
 8001f90:	58000080 	.word	0x58000080
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58000400 	.word	0x58000400
 8001f9c:	58020000 	.word	0x58020000
 8001fa0:	58020400 	.word	0x58020400
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	58020c00 	.word	0x58020c00
 8001fac:	58021000 	.word	0x58021000
 8001fb0:	58021400 	.word	0x58021400
 8001fb4:	58021800 	.word	0x58021800
 8001fb8:	58021c00 	.word	0x58021c00
 8001fbc:	58022000 	.word	0x58022000
 8001fc0:	58022400 	.word	0x58022400
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd6:	4938      	ldr	r1, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x35c>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3301      	adds	r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f47f ae63 	bne.w	8001d70 <HAL_GPIO_Init+0x14>
  }
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	3724      	adds	r7, #36	; 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	58000400 	.word	0x58000400

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	619a      	str	r2, [r3, #24]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	041a      	lsls	r2, r3, #16
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43d9      	mvns	r1, r3
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	400b      	ands	r3, r1
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	619a      	str	r2, [r3, #24]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	2b06      	cmp	r3, #6
 8002136:	d00a      	beq.n	800214e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e040      	b.n	80021cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e03e      	b.n	80021cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002156:	491f      	ldr	r1, [pc, #124]	; (80021d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4313      	orrs	r3, r2
 800215c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800215e:	f7fe ff59 	bl	8001014 <HAL_GetTick>
 8002162:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002164:	e009      	b.n	800217a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002166:	f7fe ff55 	bl	8001014 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002174:	d901      	bls.n	800217a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e028      	b.n	80021cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002186:	d1ee      	bne.n	8002166 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b1e      	cmp	r3, #30
 800218c:	d008      	beq.n	80021a0 <HAL_PWREx_ConfigSupply+0x7c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b2e      	cmp	r3, #46	; 0x2e
 8002192:	d005      	beq.n	80021a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b1d      	cmp	r3, #29
 8002198:	d002      	beq.n	80021a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b2d      	cmp	r3, #45	; 0x2d
 800219e:	d114      	bne.n	80021ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021a0:	f7fe ff38 	bl	8001014 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021a6:	e009      	b.n	80021bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021a8:	f7fe ff34 	bl	8001014 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b6:	d901      	bls.n	80021bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e007      	b.n	80021cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d1ee      	bne.n	80021a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	58024800 	.word	0x58024800

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f000 bc1f 	b.w	8002a2a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80b3 	beq.w	8002360 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fa:	4b95      	ldr	r3, [pc, #596]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002204:	4b92      	ldr	r3, [pc, #584]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	2b10      	cmp	r3, #16
 800220e:	d007      	beq.n	8002220 <HAL_RCC_OscConfig+0x48>
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	2b18      	cmp	r3, #24
 8002214:	d112      	bne.n	800223c <HAL_RCC_OscConfig+0x64>
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d10d      	bne.n	800223c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b8b      	ldr	r3, [pc, #556]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8098 	beq.w	800235e <HAL_RCC_OscConfig+0x186>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8093 	bne.w	800235e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e3f6      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x7c>
 8002246:	4b82      	ldr	r3, [pc, #520]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a81      	ldr	r2, [pc, #516]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e058      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d112      	bne.n	8002282 <HAL_RCC_OscConfig+0xaa>
 800225c:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a7b      	ldr	r2, [pc, #492]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b79      	ldr	r3, [pc, #484]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a78      	ldr	r2, [pc, #480]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800226e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e041      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228a:	d112      	bne.n	80022b2 <HAL_RCC_OscConfig+0xda>
 800228c:	4b70      	ldr	r3, [pc, #448]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6f      	ldr	r2, [pc, #444]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6c      	ldr	r2, [pc, #432]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800229e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a69      	ldr	r2, [pc, #420]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e029      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80022ba:	d112      	bne.n	80022e2 <HAL_RCC_OscConfig+0x10a>
 80022bc:	4b64      	ldr	r3, [pc, #400]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a63      	ldr	r2, [pc, #396]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b61      	ldr	r3, [pc, #388]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a60      	ldr	r2, [pc, #384]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b5e      	ldr	r3, [pc, #376]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5d      	ldr	r2, [pc, #372]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e011      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
 80022e2:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b58      	ldr	r3, [pc, #352]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a57      	ldr	r2, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a54      	ldr	r2, [pc, #336]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002300:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002304:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d013      	beq.n	8002336 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fe81 	bl	8001014 <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002316:	f7fe fe7d 	bl	8001014 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e380      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002328:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x13e>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fe6d 	bl	8001014 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233e:	f7fe fe69 	bl	8001014 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e36c      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002350:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x166>
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 808c 	beq.w	8002486 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236e:	4b38      	ldr	r3, [pc, #224]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002376:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002378:	4b35      	ldr	r3, [pc, #212]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_RCC_OscConfig+0x1bc>
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	2b18      	cmp	r3, #24
 8002388:	d137      	bne.n	80023fa <HAL_RCC_OscConfig+0x222>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d132      	bne.n	80023fa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x1d4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e33e      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ac:	4b28      	ldr	r3, [pc, #160]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 0219 	bic.w	r2, r3, #25
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4925      	ldr	r1, [pc, #148]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fe29 	bl	8001014 <HAL_GetTick>
 80023c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fe25 	bl	8001014 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e328      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	4917      	ldr	r1, [pc, #92]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f8:	e045      	b.n	8002486 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0219 	bic.w	r2, r3, #25
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4910      	ldr	r1, [pc, #64]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fdfe 	bl	8001014 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241c:	f7fe fdfa 	bl	8001014 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e2fd      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	4901      	ldr	r1, [pc, #4]	; (8002450 <HAL_RCC_OscConfig+0x278>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
 800244e:	e01a      	b.n	8002486 <HAL_RCC_OscConfig+0x2ae>
 8002450:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002454:	4b97      	ldr	r3, [pc, #604]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a96      	ldr	r2, [pc, #600]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fdd8 	bl	8001014 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7fe fdd4 	bl	8001014 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e2d7      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800247a:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06a      	beq.n	8002568 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800249a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800249c:	4b85      	ldr	r3, [pc, #532]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d007      	beq.n	80024b8 <HAL_RCC_OscConfig+0x2e0>
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b18      	cmp	r3, #24
 80024ac:	d11b      	bne.n	80024e6 <HAL_RCC_OscConfig+0x30e>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d116      	bne.n	80024e6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024b8:	4b7e      	ldr	r3, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2f8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e2ac      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024d0:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	4975      	ldr	r1, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024e4:	e040      	b.n	8002568 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d023      	beq.n	8002536 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024ee:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a70      	ldr	r2, [pc, #448]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fd8b 	bl	8001014 <HAL_GetTick>
 80024fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002502:	f7fe fd87 	bl	8001014 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e28a      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002514:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4961      	ldr	r1, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800253c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe fd67 	bl	8001014 <HAL_GetTick>
 8002546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800254a:	f7fe fd63 	bl	8001014 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e266      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d036      	beq.n	80025e2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d019      	beq.n	80025b0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800257e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002580:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe fd44 	bl	8001014 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002590:	f7fe fd40 	bl	8001014 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e243      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80025a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x3b8>
 80025ae:	e018      	b.n	80025e2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b0:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80025b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b4:	4a3f      	ldr	r2, [pc, #252]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fd2a 	bl	8001014 <HAL_GetTick>
 80025c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c4:	f7fe fd26 	bl	8001014 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e229      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80025d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d036      	beq.n	800265c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d019      	beq.n	800262a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2e      	ldr	r2, [pc, #184]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80025fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002600:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002602:	f7fe fd07 	bl	8001014 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260a:	f7fe fd03 	bl	8001014 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e206      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x432>
 8002628:	e018      	b.n	800265c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002636:	f7fe fced 	bl	8001014 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800263e:	f7fe fce9 	bl	8001014 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1ec      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80af 	beq.w	80027c8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_OscConfig+0x4e0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_RCC_OscConfig+0x4e0>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002676:	f7fe fccd 	bl	8001014 <HAL_GetTick>
 800267a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7fe fcc9 	bl	8001014 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1cc      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_OscConfig+0x4e0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10b      	bne.n	80026bc <HAL_RCC_OscConfig+0x4e4>
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a02      	ldr	r2, [pc, #8]	; (80026b4 <HAL_RCC_OscConfig+0x4dc>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	e05b      	b.n	800276a <HAL_RCC_OscConfig+0x592>
 80026b2:	bf00      	nop
 80026b4:	58024400 	.word	0x58024400
 80026b8:	58024800 	.word	0x58024800
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d112      	bne.n	80026ea <HAL_RCC_OscConfig+0x512>
 80026c4:	4b9d      	ldr	r3, [pc, #628]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a9c      	ldr	r2, [pc, #624]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	4b9a      	ldr	r3, [pc, #616]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a99      	ldr	r2, [pc, #612]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	4b97      	ldr	r3, [pc, #604]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a96      	ldr	r2, [pc, #600]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	e03f      	b.n	800276a <HAL_RCC_OscConfig+0x592>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d112      	bne.n	8002718 <HAL_RCC_OscConfig+0x540>
 80026f2:	4b92      	ldr	r3, [pc, #584]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a91      	ldr	r2, [pc, #580]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	4b8f      	ldr	r3, [pc, #572]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a8e      	ldr	r2, [pc, #568]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b8c      	ldr	r3, [pc, #560]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a8b      	ldr	r2, [pc, #556]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
 8002716:	e028      	b.n	800276a <HAL_RCC_OscConfig+0x592>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b85      	cmp	r3, #133	; 0x85
 800271e:	d112      	bne.n	8002746 <HAL_RCC_OscConfig+0x56e>
 8002720:	4b86      	ldr	r3, [pc, #536]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a85      	ldr	r2, [pc, #532]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
 800272c:	4b83      	ldr	r3, [pc, #524]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a82      	ldr	r2, [pc, #520]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b80      	ldr	r3, [pc, #512]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a7f      	ldr	r2, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e011      	b.n	800276a <HAL_RCC_OscConfig+0x592>
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a7c      	ldr	r2, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a79      	ldr	r2, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a76      	ldr	r2, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d015      	beq.n	800279e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fc4f 	bl	8001014 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fc4b 	bl	8001014 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e14c      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ee      	beq.n	800277a <HAL_RCC_OscConfig+0x5a2>
 800279c:	e014      	b.n	80027c8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7fe fc39 	bl	8001014 <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fc35 	bl	8001014 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e136      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027bc:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ee      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 812b 	beq.w	8002a28 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027d2:	4b5a      	ldr	r3, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027da:	2b18      	cmp	r3, #24
 80027dc:	f000 80bb 	beq.w	8002956 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f040 8095 	bne.w	8002914 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ea:	4b54      	ldr	r3, [pc, #336]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a53      	ldr	r2, [pc, #332]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80027f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fc0d 	bl	8001014 <HAL_GetTick>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fc09 	bl	8001014 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e10c      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002810:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281c:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800281e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002820:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_OscConfig+0x768>)
 8002822:	4013      	ands	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800282c:	0112      	lsls	r2, r2, #4
 800282e:	430a      	orrs	r2, r1
 8002830:	4942      	ldr	r1, [pc, #264]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002832:	4313      	orrs	r3, r2
 8002834:	628b      	str	r3, [r1, #40]	; 0x28
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	3b01      	subs	r3, #1
 800283c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002844:	3b01      	subs	r3, #1
 8002846:	025b      	lsls	r3, r3, #9
 8002848:	b29b      	uxth	r3, r3
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	3b01      	subs	r3, #1
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002866:	4935      	ldr	r1, [pc, #212]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002868:	4313      	orrs	r3, r2
 800286a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800286c:	4b33      	ldr	r3, [pc, #204]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	4a32      	ldr	r2, [pc, #200]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002878:	4b30      	ldr	r3, [pc, #192]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_OscConfig+0x76c>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002884:	00d2      	lsls	r2, r2, #3
 8002886:	492d      	ldr	r1, [pc, #180]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002888:	4313      	orrs	r3, r2
 800288a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f023 020c 	bic.w	r2, r3, #12
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4928      	ldr	r1, [pc, #160]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800289a:	4313      	orrs	r3, r2
 800289c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800289e:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f023 0202 	bic.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4924      	ldr	r1, [pc, #144]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028bc:	4b1f      	ldr	r3, [pc, #124]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <HAL_RCC_OscConfig+0x764>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fb92 	bl	8001014 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fb8e 	bl	8001014 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e091      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x71c>
 8002912:	e089      	b.n	8002a28 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_OscConfig+0x764>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_RCC_OscConfig+0x764>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fb78 	bl	8001014 <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002926:	e00f      	b.n	8002948 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fb74 	bl	8001014 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d908      	bls.n	8002948 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e077      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
 800293a:	bf00      	nop
 800293c:	58024400 	.word	0x58024400
 8002940:	fffffc0c 	.word	0xfffffc0c
 8002944:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e9      	bne.n	8002928 <HAL_RCC_OscConfig+0x750>
 8002954:	e068      	b.n	8002a28 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b01      	cmp	r3, #1
 8002968:	d031      	beq.n	80029ce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d12a      	bne.n	80029ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d122      	bne.n	80029ce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d11a      	bne.n	80029ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	0a5b      	lsrs	r3, r3, #9
 800299c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d111      	bne.n	80029ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d108      	bne.n	80029ce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	0e1b      	lsrs	r3, r3, #24
 80029c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e02b      	b.n	8002a2a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	08db      	lsrs	r3, r3, #3
 80029d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029dc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d01f      	beq.n	8002a28 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f4:	f7fe fb0e 	bl	8001014 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029fa:	bf00      	nop
 80029fc:	f7fe fb0a 	bl	8001014 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d0f9      	beq.n	80029fc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_OscConfig+0x860>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a14:	00d2      	lsls	r2, r2, #3
 8002a16:	4907      	ldr	r1, [pc, #28]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_RCC_OscConfig+0x85c>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3730      	adds	r7, #48	; 0x30
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	58024400 	.word	0x58024400
 8002a38:	ffff0007 	.word	0xffff0007

08002a3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e19c      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b8a      	ldr	r3, [pc, #552]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d910      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 020f 	bic.w	r2, r3, #15
 8002a66:	4985      	ldr	r1, [pc, #532]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b83      	ldr	r3, [pc, #524]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e184      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	4b7b      	ldr	r3, [pc, #492]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d908      	bls.n	8002aae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a9c:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	4975      	ldr	r1, [pc, #468]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d010      	beq.n	8002adc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	4b70      	ldr	r3, [pc, #448]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d908      	bls.n	8002adc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aca:	4b6d      	ldr	r3, [pc, #436]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	496a      	ldr	r1, [pc, #424]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	4b64      	ldr	r3, [pc, #400]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d908      	bls.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002af8:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	495e      	ldr	r1, [pc, #376]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d908      	bls.n	8002b38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4953      	ldr	r1, [pc, #332]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d908      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f023 020f 	bic.w	r2, r3, #15
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4947      	ldr	r1, [pc, #284]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d055      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4940      	ldr	r1, [pc, #256]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d121      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0f6      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d115      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0ea      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0de      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0d6      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f023 0207 	bic.w	r2, r3, #7
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4925      	ldr	r1, [pc, #148]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bee:	f7fe fa11 	bl	8001014 <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf6:	f7fe fa0d 	bl	8001014 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0be      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d1eb      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d208      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f023 020f 	bic.w	r2, r3, #15
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	490e      	ldr	r1, [pc, #56]	; (8002c80 <HAL_RCC_ClockConfig+0x244>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d214      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 020f 	bic.w	r2, r3, #15
 8002c62:	4906      	ldr	r1, [pc, #24]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_RCC_ClockConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e086      	b.n	8002d8a <HAL_RCC_ClockConfig+0x34e>
 8002c7c:	52002000 	.word	0x52002000
 8002c80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d010      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d208      	bcs.n	8002cb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ca0:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	4939      	ldr	r1, [pc, #228]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d010      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d208      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cce:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	492e      	ldr	r1, [pc, #184]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d208      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4922      	ldr	r1, [pc, #136]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d208      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4917      	ldr	r1, [pc, #92]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002d3c:	f000 f834 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	4912      	ldr	r1, [pc, #72]	; (8002d98 <HAL_RCC_ClockConfig+0x35c>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_RCC_ClockConfig+0x358>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_RCC_ClockConfig+0x35c>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_RCC_ClockConfig+0x360>)
 8002d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x364>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_ClockConfig+0x368>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe f8fe 	bl	8000f80 <HAL_InitTick>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	58024400 	.word	0x58024400
 8002d98:	080077f8 	.word	0x080077f8
 8002d9c:	24000004 	.word	0x24000004
 8002da0:	24000000 	.word	0x24000000
 8002da4:	24000008 	.word	0x24000008

08002da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dae:	4bb3      	ldr	r3, [pc, #716]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	f200 8155 	bhi.w	8003066 <HAL_RCC_GetSysClockFreq+0x2be>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002e29 	.word	0x08002e29
 8002dc8:	08003067 	.word	0x08003067
 8002dcc:	08003067 	.word	0x08003067
 8002dd0:	08003067 	.word	0x08003067
 8002dd4:	08003067 	.word	0x08003067
 8002dd8:	08003067 	.word	0x08003067
 8002ddc:	08003067 	.word	0x08003067
 8002de0:	08003067 	.word	0x08003067
 8002de4:	08002e4f 	.word	0x08002e4f
 8002de8:	08003067 	.word	0x08003067
 8002dec:	08003067 	.word	0x08003067
 8002df0:	08003067 	.word	0x08003067
 8002df4:	08003067 	.word	0x08003067
 8002df8:	08003067 	.word	0x08003067
 8002dfc:	08003067 	.word	0x08003067
 8002e00:	08003067 	.word	0x08003067
 8002e04:	08002e55 	.word	0x08002e55
 8002e08:	08003067 	.word	0x08003067
 8002e0c:	08003067 	.word	0x08003067
 8002e10:	08003067 	.word	0x08003067
 8002e14:	08003067 	.word	0x08003067
 8002e18:	08003067 	.word	0x08003067
 8002e1c:	08003067 	.word	0x08003067
 8002e20:	08003067 	.word	0x08003067
 8002e24:	08002e5b 	.word	0x08002e5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e28:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e34:	4b91      	ldr	r3, [pc, #580]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	4a90      	ldr	r2, [pc, #576]	; (8003080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e46:	e111      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e48:	4b8d      	ldr	r3, [pc, #564]	; (8003080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e4a:	61bb      	str	r3, [r7, #24]
      break;
 8002e4c:	e10e      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e4e:	4b8d      	ldr	r3, [pc, #564]	; (8003084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e50:	61bb      	str	r3, [r7, #24]
      break;
 8002e52:	e10b      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e54:	4b8c      	ldr	r3, [pc, #560]	; (8003088 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e56:	61bb      	str	r3, [r7, #24]
      break;
 8002e58:	e108      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e64:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e70:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e7a:	4b80      	ldr	r3, [pc, #512]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80e1 	beq.w	8003060 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	f000 8083 	beq.w	8002fac <HAL_RCC_GetSysClockFreq+0x204>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	f200 80a1 	bhi.w	8002ff0 <HAL_RCC_GetSysClockFreq+0x248>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x114>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d056      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002eba:	e099      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02d      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ec8:	4b6c      	ldr	r3, [pc, #432]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	4a6b      	ldr	r2, [pc, #428]	; (8003080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef2:	4b62      	ldr	r3, [pc, #392]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f06:	eddf 5a61 	vldr	s11, [pc, #388]	; 800308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f22:	e087      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003090 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f36:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f66:	e065      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f7a:	4b40      	ldr	r3, [pc, #256]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002faa:	e043      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003098 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fee:	e021      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003012:	ed97 6a02 	vldr	s12, [r7, #8]
 8003016:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800308c <HAL_RCC_GetSysClockFreq+0x2e4>
 800301a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800301e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003032:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800303e:	3301      	adds	r3, #1
 8003040:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800304c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003058:	ee17 3a90 	vmov	r3, s15
 800305c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800305e:	e005      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
      break;
 8003064:	e002      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003068:	61bb      	str	r3, [r7, #24]
      break;
 800306a:	bf00      	nop
  }

  return sysclockfreq;
 800306c:	69bb      	ldr	r3, [r7, #24]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	58024400 	.word	0x58024400
 8003080:	03d09000 	.word	0x03d09000
 8003084:	003d0900 	.word	0x003d0900
 8003088:	007a1200 	.word	0x007a1200
 800308c:	46000000 	.word	0x46000000
 8003090:	4c742400 	.word	0x4c742400
 8003094:	4a742400 	.word	0x4a742400
 8003098:	4af42400 	.word	0x4af42400

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80030a2:	f7ff fe81 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCC_GetHCLKFreq+0x50>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490f      	ldr	r1, [pc, #60]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCC_GetHCLKFreq+0x50>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80030d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	58024400 	.word	0x58024400
 80030f0:	080077f8 	.word	0x080077f8
 80030f4:	24000004 	.word	0x24000004
 80030f8:	24000000 	.word	0x24000000

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003100:	f7ff ffcc 	bl	800309c <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4904      	ldr	r1, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58024400 	.word	0x58024400
 8003124:	080077f8 	.word	0x080077f8

08003128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800312c:	f7ff ffb6 	bl	800309c <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4904      	ldr	r1, [pc, #16]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	58024400 	.word	0x58024400
 8003150:	080077f8 	.word	0x080077f8

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003158:	b0c8      	sub	sp, #288	; 0x120
 800315a:	af00      	add	r7, sp, #0
 800315c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003160:	2300      	movs	r3, #0
 8003162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003166:	2300      	movs	r3, #0
 8003168:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003178:	2500      	movs	r5, #0
 800317a:	ea54 0305 	orrs.w	r3, r4, r5
 800317e:	d049      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003186:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800318a:	d02f      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800318c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003190:	d828      	bhi.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003196:	d01a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800319c:	d822      	bhi.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d007      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031a8:	e01c      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031aa:	4ba7      	ldr	r3, [pc, #668]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	4aa6      	ldr	r2, [pc, #664]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031b6:	e01a      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031bc:	3308      	adds	r3, #8
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 fc43 	bl	8004a4c <RCCEx_PLL2_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031cc:	e00f      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d2:	3328      	adds	r3, #40	; 0x28
 80031d4:	2102      	movs	r1, #2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fcea 	bl	8004bb0 <RCCEx_PLL3_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031e2:	e004      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80031ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031f6:	4b94      	ldr	r3, [pc, #592]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80031fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003204:	4a90      	ldr	r2, [pc, #576]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003206:	430b      	orrs	r3, r1
 8003208:	6513      	str	r3, [r2, #80]	; 0x50
 800320a:	e003      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003210:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003220:	f04f 0900 	mov.w	r9, #0
 8003224:	ea58 0309 	orrs.w	r3, r8, r9
 8003228:	d047      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800322a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	2b04      	cmp	r3, #4
 8003232:	d82a      	bhi.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003251 	.word	0x08003251
 8003240:	0800325f 	.word	0x0800325f
 8003244:	08003275 	.word	0x08003275
 8003248:	08003293 	.word	0x08003293
 800324c:	08003293 	.word	0x08003293
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a7c      	ldr	r2, [pc, #496]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800325c:	e01a      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003262:	3308      	adds	r3, #8
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f001 fbf0 	bl	8004a4c <RCCEx_PLL2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003272:	e00f      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003278:	3328      	adds	r3, #40	; 0x28
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f001 fc97 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003288:	e004      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003294:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800329c:	4b6a      	ldr	r3, [pc, #424]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a0:	f023 0107 	bic.w	r1, r3, #7
 80032a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	4a67      	ldr	r2, [pc, #412]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6513      	str	r3, [r2, #80]	; 0x50
 80032b0:	e003      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80032ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80032c6:	f04f 0b00 	mov.w	fp, #0
 80032ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80032ce:	d054      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80032d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032da:	d036      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80032dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032e0:	d82f      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e6:	d032      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ec:	d829      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032ee:	2bc0      	cmp	r3, #192	; 0xc0
 80032f0:	d02f      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80032f2:	2bc0      	cmp	r3, #192	; 0xc0
 80032f4:	d825      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d018      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d821      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d007      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003306:	e01c      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003308:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	4a4e      	ldr	r2, [pc, #312]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003314:	e01e      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331a:	3308      	adds	r3, #8
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fb94 	bl	8004a4c <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800332a:	e013      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003330:	3328      	adds	r3, #40	; 0x28
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fc3b 	bl	8004bb0 <RCCEx_PLL3_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003340:	e008      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003348:	e004      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003354:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800335c:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	4a37      	ldr	r2, [pc, #220]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800336c:	430b      	orrs	r3, r1
 800336e:	6513      	str	r3, [r2, #80]	; 0x50
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003372:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003376:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003386:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003390:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003394:	460b      	mov	r3, r1
 8003396:	4313      	orrs	r3, r2
 8003398:	d05c      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800339a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80033a4:	d03b      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033a6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80033aa:	d834      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b0:	d037      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b6:	d82e      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033bc:	d033      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033c2:	d828      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c8:	d01a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d822      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d007      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x296>
 80033da:	e01c      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80033e8:	e01e      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ee:	3308      	adds	r3, #8
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fb2a 	bl	8004a4c <RCCEx_PLL2_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80033fe:	e013      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003404:	3328      	adds	r3, #40	; 0x28
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fbd1 	bl	8004bb0 <RCCEx_PLL3_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003414:	e008      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800341c:	e004      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	4a02      	ldr	r2, [pc, #8]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003440:	430b      	orrs	r3, r1
 8003442:	6513      	str	r3, [r2, #80]	; 0x50
 8003444:	e006      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003450:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003460:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800346a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800346e:	460b      	mov	r3, r1
 8003470:	4313      	orrs	r3, r2
 8003472:	d03a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	2b30      	cmp	r3, #48	; 0x30
 800347c:	d01f      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800347e:	2b30      	cmp	r3, #48	; 0x30
 8003480:	d819      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003482:	2b20      	cmp	r3, #32
 8003484:	d00c      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003486:	2b20      	cmp	r3, #32
 8003488:	d815      	bhi.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d019      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800348e:	2b10      	cmp	r3, #16
 8003490:	d111      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003492:	4bae      	ldr	r3, [pc, #696]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	4aad      	ldr	r2, [pc, #692]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800349e:	e011      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a4:	3308      	adds	r3, #8
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 facf 	bl	8004a4c <RCCEx_PLL2_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80034b4:	e006      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80034c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034cc:	4b9f      	ldr	r3, [pc, #636]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80034d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	4a9c      	ldr	r2, [pc, #624]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034dc:	430b      	orrs	r3, r1
 80034de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80034f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003500:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d051      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003514:	d035      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800351a:	d82e      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800351c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003520:	d031      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003522:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003526:	d828      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352c:	d01a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003532:	d822      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d007      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800353e:	e01c      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003540:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	4a81      	ldr	r2, [pc, #516]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800354c:	e01c      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800354e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003552:	3308      	adds	r3, #8
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fa78 	bl	8004a4c <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003568:	3328      	adds	r3, #40	; 0x28
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fb1f 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003580:	e002      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003588:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003590:	4b6e      	ldr	r3, [pc, #440]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359e:	4a6b      	ldr	r2, [pc, #428]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6513      	str	r3, [r2, #80]	; 0x50
 80035a4:	e003      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80035ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80035c8:	460b      	mov	r3, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	d053      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d033      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80035da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035de:	d82c      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035e4:	d02f      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80035e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ea:	d826      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035f0:	d02b      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035f6:	d820      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035fc:	d012      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80035fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003602:	d81a      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d022      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d115      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800360e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003612:	3308      	adds	r3, #8
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fa18 	bl	8004a4c <RCCEx_PLL2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003622:	e015      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003628:	3328      	adds	r3, #40	; 0x28
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f001 fabf 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003638:	e00a      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003642:	bf00      	nop
 8003644:	e004      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800364e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800365a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003666:	4a39      	ldr	r2, [pc, #228]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003668:	430b      	orrs	r3, r1
 800366a:	6513      	str	r3, [r2, #80]	; 0x50
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003672:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003682:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800368c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003690:	460b      	mov	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	d060      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800369e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036a2:	d039      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80036a4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80036a8:	d832      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ae:	d035      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80036b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b4:	d82c      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d031      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d826      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036c6:	d02d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80036c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036cc:	d820      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d2:	d012      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80036d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d8:	d81a      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d024      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e2:	d115      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e8:	3308      	adds	r3, #8
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 f9ad 	bl	8004a4c <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036f8:	e017      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fe:	3328      	adds	r3, #40	; 0x28
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fa54 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800370e:	e00c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003716:	e008      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003718:	bf00      	nop
 800371a:	e006      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800371c:	bf00      	nop
 800371e:	e004      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003720:	bf00      	nop
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10e      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800373a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003742:	4a02      	ldr	r2, [pc, #8]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6593      	str	r3, [r2, #88]	; 0x58
 8003748:	e006      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800374a:	bf00      	nop
 800374c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003754:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800376e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d037      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003782:	d00e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d816      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800378e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003792:	d111      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003794:	4bc4      	ldr	r3, [pc, #784]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	4ac3      	ldr	r2, [pc, #780]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800379a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037a0:	e00f      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a6:	3308      	adds	r3, #8
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 f94e 	bl	8004a4c <RCCEx_PLL2_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037b6:	e004      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80037c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037ca:	4bb7      	ldr	r3, [pc, #732]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d8:	4ab3      	ldr	r2, [pc, #716]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037da:	430b      	orrs	r3, r1
 80037dc:	6513      	str	r3, [r2, #80]	; 0x50
 80037de:	e003      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80037f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d039      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	2b03      	cmp	r3, #3
 8003810:	d81c      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003855 	.word	0x08003855
 800381c:	08003829 	.word	0x08003829
 8003820:	08003837 	.word	0x08003837
 8003824:	08003855 	.word	0x08003855
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003828:	4b9f      	ldr	r3, [pc, #636]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a9e      	ldr	r2, [pc, #632]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003834:	e00f      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383a:	3308      	adds	r3, #8
 800383c:	2102      	movs	r1, #2
 800383e:	4618      	mov	r0, r3
 8003840:	f001 f904 	bl	8004a4c <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800384a:	e004      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003856:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800385e:	4b92      	ldr	r3, [pc, #584]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	f023 0103 	bic.w	r1, r3, #3
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	4a8e      	ldr	r2, [pc, #568]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800386e:	430b      	orrs	r3, r1
 8003870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003872:	e003      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003878:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003892:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	f000 8099 	beq.w	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800389e:	4b83      	ldr	r3, [pc, #524]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a82      	ldr	r2, [pc, #520]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038aa:	f7fd fbb3 	bl	8001014 <HAL_GetTick>
 80038ae:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b2:	e00b      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b4:	f7fd fbae 	bl	8001014 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b64      	cmp	r3, #100	; 0x64
 80038c2:	d903      	bls.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038ca:	e005      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038cc:	4b77      	ldr	r3, [pc, #476]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ed      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80038d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d173      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038e0:	4b71      	ldr	r3, [pc, #452]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038ec:	4053      	eors	r3, r2
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d015      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038f6:	4b6c      	ldr	r3, [pc, #432]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003902:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800390e:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a65      	ldr	r2, [pc, #404]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800391a:	4a63      	ldr	r2, [pc, #396]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800392a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392e:	d118      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fb70 	bl	8001014 <HAL_GetTick>
 8003934:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003938:	e00d      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fd fb6b 	bl	8001014 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003944:	1ad2      	subs	r2, r2, r3
 8003946:	f241 3388 	movw	r3, #5000	; 0x1388
 800394a:	429a      	cmp	r2, r3
 800394c:	d903      	bls.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003954:	e005      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003956:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0eb      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003962:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003966:	2b00      	cmp	r3, #0
 8003968:	d129      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397a:	d10e      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800397c:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800398c:	091a      	lsrs	r2, r3, #4
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003990:	4013      	ands	r3, r2
 8003992:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003994:	430b      	orrs	r3, r1
 8003996:	6113      	str	r3, [r2, #16]
 8003998:	e005      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039a4:	6113      	str	r3, [r2, #16]
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80039aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	e008      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80039c6:	e003      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f002 0301 	and.w	r3, r2, #1
 80039dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f000 8090 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fa:	2b28      	cmp	r3, #40	; 0x28
 80039fc:	d870      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003ae9 	.word	0x08003ae9
 8003a08:	08003ae1 	.word	0x08003ae1
 8003a0c:	08003ae1 	.word	0x08003ae1
 8003a10:	08003ae1 	.word	0x08003ae1
 8003a14:	08003ae1 	.word	0x08003ae1
 8003a18:	08003ae1 	.word	0x08003ae1
 8003a1c:	08003ae1 	.word	0x08003ae1
 8003a20:	08003ae1 	.word	0x08003ae1
 8003a24:	08003ab5 	.word	0x08003ab5
 8003a28:	08003ae1 	.word	0x08003ae1
 8003a2c:	08003ae1 	.word	0x08003ae1
 8003a30:	08003ae1 	.word	0x08003ae1
 8003a34:	08003ae1 	.word	0x08003ae1
 8003a38:	08003ae1 	.word	0x08003ae1
 8003a3c:	08003ae1 	.word	0x08003ae1
 8003a40:	08003ae1 	.word	0x08003ae1
 8003a44:	08003acb 	.word	0x08003acb
 8003a48:	08003ae1 	.word	0x08003ae1
 8003a4c:	08003ae1 	.word	0x08003ae1
 8003a50:	08003ae1 	.word	0x08003ae1
 8003a54:	08003ae1 	.word	0x08003ae1
 8003a58:	08003ae1 	.word	0x08003ae1
 8003a5c:	08003ae1 	.word	0x08003ae1
 8003a60:	08003ae1 	.word	0x08003ae1
 8003a64:	08003ae9 	.word	0x08003ae9
 8003a68:	08003ae1 	.word	0x08003ae1
 8003a6c:	08003ae1 	.word	0x08003ae1
 8003a70:	08003ae1 	.word	0x08003ae1
 8003a74:	08003ae1 	.word	0x08003ae1
 8003a78:	08003ae1 	.word	0x08003ae1
 8003a7c:	08003ae1 	.word	0x08003ae1
 8003a80:	08003ae1 	.word	0x08003ae1
 8003a84:	08003ae9 	.word	0x08003ae9
 8003a88:	08003ae1 	.word	0x08003ae1
 8003a8c:	08003ae1 	.word	0x08003ae1
 8003a90:	08003ae1 	.word	0x08003ae1
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003ae1 	.word	0x08003ae1
 8003a9c:	08003ae1 	.word	0x08003ae1
 8003aa0:	08003ae1 	.word	0x08003ae1
 8003aa4:	08003ae9 	.word	0x08003ae9
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	58024800 	.word	0x58024800
 8003ab0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab8:	3308      	adds	r3, #8
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 ffc5 	bl	8004a4c <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ac8:	e00f      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ace:	3328      	adds	r3, #40	; 0x28
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 f86c 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ade:	e004      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ae6:	e000      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003af2:	4bc0      	ldr	r3, [pc, #768]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b02:	4abc      	ldr	r2, [pc, #752]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6553      	str	r3, [r2, #84]	; 0x54
 8003b08:	e003      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	f002 0302 	and.w	r3, r2, #2
 8003b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b28:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	d043      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d824      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003b3e:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b91 	.word	0x08003b91
 8003b48:	08003b5d 	.word	0x08003b5d
 8003b4c:	08003b73 	.word	0x08003b73
 8003b50:	08003b91 	.word	0x08003b91
 8003b54:	08003b91 	.word	0x08003b91
 8003b58:	08003b91 	.word	0x08003b91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b60:	3308      	adds	r3, #8
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 ff71 	bl	8004a4c <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b70:	e00f      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b76:	3328      	adds	r3, #40	; 0x28
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 f818 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b86:	e004      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b9a:	4b96      	ldr	r3, [pc, #600]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f023 0107 	bic.w	r1, r3, #7
 8003ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003baa:	4a92      	ldr	r2, [pc, #584]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6553      	str	r3, [r2, #84]	; 0x54
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bb6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f002 0304 	and.w	r3, r2, #4
 8003bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bd0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d043      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d824      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c39 	.word	0x08003c39
 8003bf0:	08003c05 	.word	0x08003c05
 8003bf4:	08003c1b 	.word	0x08003c1b
 8003bf8:	08003c39 	.word	0x08003c39
 8003bfc:	08003c39 	.word	0x08003c39
 8003c00:	08003c39 	.word	0x08003c39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c08:	3308      	adds	r3, #8
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ff1d 	bl	8004a4c <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c18:	e00f      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1e:	3328      	adds	r3, #40	; 0x28
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 ffc4 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	f023 0107 	bic.w	r1, r3, #7
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c52:	4a68      	ldr	r2, [pc, #416]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6593      	str	r3, [r2, #88]	; 0x58
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f002 0320 	and.w	r3, r2, #32
 8003c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d055      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8e:	d033      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c94:	d82c      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9a:	d02f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca0:	d826      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ca6:	d02b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cac:	d820      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb2:	d012      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb8:	d81a      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d022      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc2:	d115      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc8:	3308      	adds	r3, #8
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 febd 	bl	8004a4c <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cd8:	e015      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cde:	3328      	adds	r3, #40	; 0x28
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 ff64 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cee:	e00a      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cf6:	e006      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003cf8:	bf00      	nop
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e002      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d00:	bf00      	nop
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d0e:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d1e:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6553      	str	r3, [r2, #84]	; 0x54
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	d058      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d5a:	d033      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d60:	d82c      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d02f      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d826      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d72:	d02b      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d78:	d820      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d012      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d81a      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d022      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d115      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d94:	3308      	adds	r3, #8
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fe57 	bl	8004a4c <RCCEx_PLL2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003da4:	e015      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003daa:	3328      	adds	r3, #40	; 0x28
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fefe 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dc2:	e006      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003dc4:	bf00      	nop
 8003dc6:	e004      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10e      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dea:	4a02      	ldr	r2, [pc, #8]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6593      	str	r3, [r2, #88]	; 0x58
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003df2:	bf00      	nop
 8003df4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	d055      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e2c:	d033      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e32:	d82c      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e38:	d02f      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3e:	d826      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e44:	d02b      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e4a:	d820      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e50:	d012      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e56:	d81a      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e60:	d115      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e66:	3308      	adds	r3, #8
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fdee 	bl	8004a4c <RCCEx_PLL2_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e76:	e015      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7c:	3328      	adds	r3, #40	; 0x28
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fe95 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003eac:	4ba1      	ldr	r3, [pc, #644]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ebc:	4a9d      	ldr	r2, [pc, #628]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f002 0308 	and.w	r3, r2, #8
 8003ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ee2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d01e      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efe:	3328      	adds	r3, #40	; 0x28
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fe54 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f14:	4b87      	ldr	r3, [pc, #540]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f24:	4a83      	ldr	r2, [pc, #524]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f002 0310 	and.w	r3, r2, #16
 8003f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d01e      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f56:	d10c      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5c:	3328      	adds	r3, #40	; 0x28
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fe25 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f72:	4b70      	ldr	r3, [pc, #448]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f82:	4a6c      	ldr	r2, [pc, #432]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	d03e      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb4:	d022      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fba:	d81b      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d00b      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003fc6:	e015      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fcc:	3308      	adds	r3, #8
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd3b 	bl	8004a4c <RCCEx_PLL2_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fdc:	e00f      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe2:	3328      	adds	r3, #40	; 0x28
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fde2 	bl	8004bb0 <RCCEx_PLL3_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ff2:	e004      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004006:	4b4b      	ldr	r3, [pc, #300]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800400e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004016:	4a47      	ldr	r2, [pc, #284]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6593      	str	r3, [r2, #88]	; 0x58
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004022:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004032:	67bb      	str	r3, [r7, #120]	; 0x78
 8004034:	2300      	movs	r3, #0
 8004036:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004038:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800403c:	460b      	mov	r3, r1
 800403e:	4313      	orrs	r3, r2
 8004040:	d03b      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800404e:	d01f      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004054:	d818      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800405c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004060:	d007      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004062:	e011      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4a32      	ldr	r2, [pc, #200]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004070:	e00f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004076:	3328      	adds	r3, #40	; 0x28
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fd98 	bl	8004bb0 <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409a:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a22      	ldr	r2, [pc, #136]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6553      	str	r3, [r2, #84]	; 0x54
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80040c6:	673b      	str	r3, [r7, #112]	; 0x70
 80040c8:	2300      	movs	r3, #0
 80040ca:	677b      	str	r3, [r7, #116]	; 0x74
 80040cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80040d0:	460b      	mov	r3, r1
 80040d2:	4313      	orrs	r3, r2
 80040d4:	d034      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d007      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80040e6:	e011      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a11      	ldr	r2, [pc, #68]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040f4:	e00e      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fa:	3308      	adds	r3, #8
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fca4 	bl	8004a4c <RCCEx_PLL2_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800410a:	e003      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004114:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	4a02      	ldr	r2, [pc, #8]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800412c:	430b      	orrs	r3, r1
 800412e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004130:	e006      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800413c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
 800414e:	2300      	movs	r3, #0
 8004150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004152:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004156:	460b      	mov	r3, r1
 8004158:	4313      	orrs	r3, r2
 800415a:	d00c      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004160:	3328      	adds	r3, #40	; 0x28
 8004162:	2102      	movs	r1, #2
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fd23 	bl	8004bb0 <RCCEx_PLL3_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004182:	663b      	str	r3, [r7, #96]	; 0x60
 8004184:	2300      	movs	r3, #0
 8004186:	667b      	str	r3, [r7, #100]	; 0x64
 8004188:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d038      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800419e:	d018      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80041a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a4:	d811      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80041a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041aa:	d014      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d80b      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d011      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d106      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041bc:	4bc3      	ldr	r3, [pc, #780]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	4ac2      	ldr	r2, [pc, #776]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041c8:	e008      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e4:	4bb9      	ldr	r3, [pc, #740]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	4ab5      	ldr	r2, [pc, #724]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6553      	str	r3, [r2, #84]	; 0x54
 80041fa:	e003      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004200:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004210:	65bb      	str	r3, [r7, #88]	; 0x58
 8004212:	2300      	movs	r3, #0
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004216:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004220:	4baa      	ldr	r3, [pc, #680]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422e:	4aa7      	ldr	r2, [pc, #668]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004240:	653b      	str	r3, [r7, #80]	; 0x50
 8004242:	2300      	movs	r3, #0
 8004244:	657b      	str	r3, [r7, #84]	; 0x54
 8004246:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004250:	4b9e      	ldr	r3, [pc, #632]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a9b      	ldr	r2, [pc, #620]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004270:	64bb      	str	r3, [r7, #72]	; 0x48
 8004272:	2300      	movs	r3, #0
 8004274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004276:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004280:	4b92      	ldr	r3, [pc, #584]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428e:	4a8f      	ldr	r2, [pc, #572]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80042a0:	643b      	str	r3, [r7, #64]	; 0x40
 80042a2:	2300      	movs	r3, #0
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042b0:	4b86      	ldr	r3, [pc, #536]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	4a85      	ldr	r2, [pc, #532]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042ba:	6113      	str	r3, [r2, #16]
 80042bc:	4b83      	ldr	r3, [pc, #524]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042be:	6919      	ldr	r1, [r3, #16]
 80042c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042c8:	4a80      	ldr	r2, [pc, #512]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042ca:	430b      	orrs	r3, r1
 80042cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38
 80042dc:	2300      	movs	r3, #0
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042e4:	460b      	mov	r3, r1
 80042e6:	4313      	orrs	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042ea:	4b78      	ldr	r3, [pc, #480]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	4a74      	ldr	r2, [pc, #464]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042fa:	430b      	orrs	r3, r1
 80042fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
 800430c:	2300      	movs	r3, #0
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
 8004310:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004314:	460b      	mov	r3, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800431a:	4b6c      	ldr	r3, [pc, #432]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	4a68      	ldr	r2, [pc, #416]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	2100      	movs	r1, #0
 800433a:	62b9      	str	r1, [r7, #40]	; 0x28
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004342:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	d011      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800434c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004350:	3308      	adds	r3, #8
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fb79 	bl	8004a4c <RCCEx_PLL2_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004360:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800436c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	2100      	movs	r1, #0
 800437a:	6239      	str	r1, [r7, #32]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d011      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800438c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004390:	3308      	adds	r3, #8
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fb59 	bl	8004a4c <RCCEx_PLL2_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80043a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	2100      	movs	r1, #0
 80043ba:	61b9      	str	r1, [r7, #24]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d011      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d0:	3308      	adds	r3, #8
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fb39 	bl	8004a4c <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80043e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	2100      	movs	r1, #0
 80043fa:	6139      	str	r1, [r7, #16]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004406:	460b      	mov	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	d011      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800440c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004410:	3328      	adds	r3, #40	; 0x28
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fbcb 	bl	8004bb0 <RCCEx_PLL3_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004420:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800442c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	2100      	movs	r1, #0
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d011      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800444c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004450:	3328      	adds	r3, #40	; 0x28
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fbab 	bl	8004bb0 <RCCEx_PLL3_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004460:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800446c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	2100      	movs	r1, #0
 800447a:	6039      	str	r1, [r7, #0]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	d011      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004490:	3328      	adds	r3, #40	; 0x28
 8004492:	2102      	movs	r1, #2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fb8b 	bl	8004bb0 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80044a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80044b0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
}
 80044be:	4618      	mov	r0, r3
 80044c0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80044c4:	46bd      	mov	sp, r7
 80044c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ca:	bf00      	nop
 80044cc:	58024400 	.word	0x58024400

080044d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80044d4:	f7fe fde2 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4904      	ldr	r1, [pc, #16]	; (80044f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	58024400 	.word	0x58024400
 80044f8:	080077f8 	.word	0x080077f8

080044fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004504:	4ba1      	ldr	r3, [pc, #644]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800450e:	4b9f      	ldr	r3, [pc, #636]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	0b1b      	lsrs	r3, r3, #12
 8004514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004518:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800451a:	4b9c      	ldr	r3, [pc, #624]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004526:	4b99      	ldr	r3, [pc, #612]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	08db      	lsrs	r3, r3, #3
 800452c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8111 	beq.w	800476c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b02      	cmp	r3, #2
 800454e:	f000 8083 	beq.w	8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b02      	cmp	r3, #2
 8004556:	f200 80a1 	bhi.w	800469c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d056      	beq.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004566:	e099      	b.n	800469c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004568:	4b88      	ldr	r3, [pc, #544]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d02d      	beq.n	80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004574:	4b85      	ldr	r3, [pc, #532]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	08db      	lsrs	r3, r3, #3
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	4a84      	ldr	r2, [pc, #528]	; (8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
 8004584:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b7b      	ldr	r3, [pc, #492]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045ce:	e087      	b.n	80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b6a      	ldr	r3, [pc, #424]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004612:	e065      	b.n	80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800479c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004626:	4b59      	ldr	r3, [pc, #356]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	ed97 6a03 	vldr	s12, [r7, #12]
 800463a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800463e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004656:	e043      	b.n	80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466a:	4b48      	ldr	r3, [pc, #288]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467a:	ed97 6a03 	vldr	s12, [r7, #12]
 800467e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800469a:	e021      	b.n	80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800479c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ae:	4b37      	ldr	r3, [pc, #220]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046be:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046e0:	4b2a      	ldr	r3, [pc, #168]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80046fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004706:	ee17 2a90 	vmov	r2, s15
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800470e:	4b1f      	ldr	r3, [pc, #124]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004728:	edd7 6a07 	vldr	s13, [r7, #28]
 800472c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004734:	ee17 2a90 	vmov	r2, s15
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800473c:	4b13      	ldr	r3, [pc, #76]	; (800478c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	0e1b      	lsrs	r3, r3, #24
 8004742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004756:	edd7 6a07 	vldr	s13, [r7, #28]
 800475a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004762:	ee17 2a90 	vmov	r2, s15
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800476a:	e008      	b.n	800477e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	3724      	adds	r7, #36	; 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
 8004790:	03d09000 	.word	0x03d09000
 8004794:	46000000 	.word	0x46000000
 8004798:	4c742400 	.word	0x4c742400
 800479c:	4a742400 	.word	0x4a742400
 80047a0:	4af42400 	.word	0x4af42400

080047a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047ac:	4ba1      	ldr	r3, [pc, #644]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047b6:	4b9f      	ldr	r3, [pc, #636]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	0d1b      	lsrs	r3, r3, #20
 80047bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047c2:	4b9c      	ldr	r3, [pc, #624]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047ce:	4b99      	ldr	r3, [pc, #612]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	08db      	lsrs	r3, r3, #3
 80047d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8111 	beq.w	8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	f000 8083 	beq.w	8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	f200 80a1 	bhi.w	8004944 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d056      	beq.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800480e:	e099      	b.n	8004944 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004810:	4b88      	ldr	r3, [pc, #544]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02d      	beq.n	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800481c:	4b85      	ldr	r3, [pc, #532]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	4a84      	ldr	r2, [pc, #528]	; (8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b7b      	ldr	r3, [pc, #492]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a03 	vldr	s12, [r7, #12]
 800485a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004876:	e087      	b.n	8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b6a      	ldr	r3, [pc, #424]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a03 	vldr	s12, [r7, #12]
 800489e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ba:	e065      	b.n	8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ce:	4b59      	ldr	r3, [pc, #356]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048de:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048fe:	e043      	b.n	8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800490e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004912:	4b48      	ldr	r3, [pc, #288]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004922:	ed97 6a03 	vldr	s12, [r7, #12]
 8004926:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800492a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004942:	e021      	b.n	8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004956:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004966:	ed97 6a03 	vldr	s12, [r7, #12]
 800496a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800496e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004986:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	0a5b      	lsrs	r3, r3, #9
 800498e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800499e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ae:	ee17 2a90 	vmov	r2, s15
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049dc:	ee17 2a90 	vmov	r2, s15
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	0e1b      	lsrs	r3, r3, #24
 80049ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0a:	ee17 2a90 	vmov	r2, s15
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a12:	e008      	b.n	8004a26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
}
 8004a26:	bf00      	nop
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	58024400 	.word	0x58024400
 8004a38:	03d09000 	.word	0x03d09000
 8004a3c:	46000000 	.word	0x46000000
 8004a40:	4c742400 	.word	0x4c742400
 8004a44:	4a742400 	.word	0x4a742400
 8004a48:	4af42400 	.word	0x4af42400

08004a4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a5a:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d101      	bne.n	8004a6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e099      	b.n	8004b9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004a70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a76:	f7fc facd 	bl	8001014 <HAL_GetTick>
 8004a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a7c:	e008      	b.n	8004a90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a7e:	f7fc fac9 	bl	8001014 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e086      	b.n	8004b9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a90:	4b45      	ldr	r3, [pc, #276]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a9c:	4b42      	ldr	r3, [pc, #264]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	493f      	ldr	r1, [pc, #252]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	628b      	str	r3, [r1, #40]	; 0x28
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	025b      	lsls	r3, r3, #9
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	061b      	lsls	r3, r3, #24
 8004adc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ae0:	4931      	ldr	r1, [pc, #196]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ae6:	4b30      	ldr	r3, [pc, #192]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	492d      	ldr	r1, [pc, #180]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004af8:	4b2b      	ldr	r3, [pc, #172]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	f023 0220 	bic.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	4928      	ldr	r1, [pc, #160]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b0a:	4b27      	ldr	r3, [pc, #156]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	f023 0310 	bic.w	r3, r3, #16
 8004b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b16:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b1a:	4b24      	ldr	r3, [pc, #144]	; (8004bac <RCCEx_PLL2_Config+0x160>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	69d2      	ldr	r2, [r2, #28]
 8004b22:	00d2      	lsls	r2, r2, #3
 8004b24:	4920      	ldr	r1, [pc, #128]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b30:	f043 0310 	orr.w	r3, r3, #16
 8004b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b48:	e00f      	b.n	8004b6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b50:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b5c:	e005      	b.n	8004b6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b76:	f7fc fa4d 	bl	8001014 <HAL_GetTick>
 8004b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b7c:	e008      	b.n	8004b90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b7e:	f7fc fa49 	bl	8001014 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e006      	b.n	8004b9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	ffff0007 	.word	0xffff0007

08004bb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bbe:	4b53      	ldr	r3, [pc, #332]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d101      	bne.n	8004bce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e099      	b.n	8004d02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bce:	4b4f      	ldr	r3, [pc, #316]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a4e      	ldr	r2, [pc, #312]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bda:	f7fc fa1b 	bl	8001014 <HAL_GetTick>
 8004bde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004be0:	e008      	b.n	8004bf4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004be2:	f7fc fa17 	bl	8001014 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e086      	b.n	8004d02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bf4:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c00:	4b42      	ldr	r3, [pc, #264]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	051b      	lsls	r3, r3, #20
 8004c0e:	493f      	ldr	r1, [pc, #252]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	628b      	str	r3, [r1, #40]	; 0x28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	025b      	lsls	r3, r3, #9
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c44:	4931      	ldr	r1, [pc, #196]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c4a:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	492d      	ldr	r1, [pc, #180]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	4928      	ldr	r1, [pc, #160]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c6e:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <RCCEx_PLL3_Config+0x160>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	69d2      	ldr	r2, [r2, #28]
 8004c86:	00d2      	lsls	r2, r2, #3
 8004c88:	4920      	ldr	r1, [pc, #128]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c8e:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cac:	e00f      	b.n	8004cce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004cba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cc0:	e005      	b.n	8004cce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fc f99b 	bl	8001014 <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ce2:	f7fc f997 	bl	8001014 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	58024400 	.word	0x58024400
 8004d10:	ffff0007 	.word	0xffff0007

08004d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e042      	b.n	8004dac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fb ffb9 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2224      	movs	r2, #36	; 0x24
 8004d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fce0 	bl	800571c <UART_SetConfig>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e022      	b.n	8004dac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 fb40 	bl	80063f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 fbc7 	bl	8006538 <UART_CheckIdleState>
 8004daa:	4603      	mov	r3, r0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d17b      	bne.n	8004ec6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_UART_Transmit+0x26>
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e074      	b.n	8004ec8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2221      	movs	r2, #33	; 0x21
 8004dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dee:	f7fc f911 	bl	8001014 <HAL_GetTick>
 8004df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0c:	d108      	bne.n	8004e20 <HAL_UART_Transmit+0x6c>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e003      	b.n	8004e28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e28:	e030      	b.n	8004e8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2180      	movs	r1, #128	; 0x80
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f001 fc29 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e03d      	b.n	8004ec8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	3302      	adds	r3, #2
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e007      	b.n	8004e7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	3301      	adds	r3, #1
 8004e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1c8      	bne.n	8004e2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2140      	movs	r1, #64	; 0x40
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f001 fbf2 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e006      	b.n	8004ec8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ec6:	2302      	movs	r3, #2
  }
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d137      	bne.n	8004f58 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Receive_IT+0x24>
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e030      	b.n	8004f5a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <HAL_UART_Receive_IT+0x94>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d01f      	beq.n	8004f48 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	69f9      	ldr	r1, [r7, #28]
 8004f3a:	6a3a      	ldr	r2, [r7, #32]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f001 fc04 	bl	800675c <UART_Start_Receive_IT>
 8004f54:	4603      	mov	r3, r0
 8004f56:	e000      	b.n	8004f5a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3728      	adds	r7, #40	; 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58000c00 	.word	0x58000c00

08004f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b0ba      	sub	sp, #232	; 0xe8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f92:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f96:	4013      	ands	r3, r2
 8004f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d11b      	bne.n	8004fdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d015      	beq.n	8004fdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8377 	beq.w	80056c0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
      }
      return;
 8004fda:	e371      	b.n	80056c0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8123 	beq.w	800522c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004fea:	4b8d      	ldr	r3, [pc, #564]	; (8005220 <HAL_UART_IRQHandler+0x2b8>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ff2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ff6:	4b8b      	ldr	r3, [pc, #556]	; (8005224 <HAL_UART_IRQHandler+0x2bc>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 8116 	beq.w	800522c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d011      	beq.n	8005030 <HAL_UART_IRQHandler+0xc8>
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f043 0201 	orr.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d011      	beq.n	8005060 <HAL_UART_IRQHandler+0xf8>
 800503c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2202      	movs	r2, #2
 800504e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d011      	beq.n	8005090 <HAL_UART_IRQHandler+0x128>
 800506c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00b      	beq.n	8005090 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2204      	movs	r2, #4
 800507e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f043 0202 	orr.w	r2, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d017      	beq.n	80050cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80050ac:	4b5c      	ldr	r3, [pc, #368]	; (8005220 <HAL_UART_IRQHandler+0x2b8>)
 80050ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2208      	movs	r2, #8
 80050ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f043 0208 	orr.w	r2, r3, #8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <HAL_UART_IRQHandler+0x196>
 80050d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00c      	beq.n	80050fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 82dd 	beq.w	80056c4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d013      	beq.n	800513e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d105      	bne.n	800512e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d005      	beq.n	8005162 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800515a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	d054      	beq.n	800520c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f001 fc1c 	bl	80069a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d146      	bne.n	8005204 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800518c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1d9      	bne.n	8005176 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d017      	beq.n	80051fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_UART_IRQHandler+0x2c0>)
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fc fb77 	bl	80018d0 <HAL_DMA_Abort_IT>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d019      	beq.n	800521c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80051f6:	4610      	mov	r0, r2
 80051f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fa:	e00f      	b.n	800521c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fa77 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005202:	e00b      	b.n	800521c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fa73 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520a:	e007      	b.n	800521c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa6f 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800521a:	e253      	b.n	80056c4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521c:	bf00      	nop
    return;
 800521e:	e251      	b.n	80056c4 <HAL_UART_IRQHandler+0x75c>
 8005220:	10000001 	.word	0x10000001
 8005224:	04000120 	.word	0x04000120
 8005228:	08006a6d 	.word	0x08006a6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005230:	2b01      	cmp	r3, #1
 8005232:	f040 81e7 	bne.w	8005604 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 81e0 	beq.w	8005604 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 81d9 	beq.w	8005604 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2210      	movs	r2, #16
 8005258:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	f040 8151 	bne.w	800550c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a96      	ldr	r2, [pc, #600]	; (80054cc <HAL_UART_IRQHandler+0x564>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d068      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a93      	ldr	r2, [pc, #588]	; (80054d0 <HAL_UART_IRQHandler+0x568>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d061      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a91      	ldr	r2, [pc, #580]	; (80054d4 <HAL_UART_IRQHandler+0x56c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d05a      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a8e      	ldr	r2, [pc, #568]	; (80054d8 <HAL_UART_IRQHandler+0x570>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d053      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a8c      	ldr	r2, [pc, #560]	; (80054dc <HAL_UART_IRQHandler+0x574>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d04c      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a89      	ldr	r2, [pc, #548]	; (80054e0 <HAL_UART_IRQHandler+0x578>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d045      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a87      	ldr	r2, [pc, #540]	; (80054e4 <HAL_UART_IRQHandler+0x57c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d03e      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a84      	ldr	r2, [pc, #528]	; (80054e8 <HAL_UART_IRQHandler+0x580>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d037      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a82      	ldr	r2, [pc, #520]	; (80054ec <HAL_UART_IRQHandler+0x584>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d030      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a7f      	ldr	r2, [pc, #508]	; (80054f0 <HAL_UART_IRQHandler+0x588>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d029      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a7d      	ldr	r2, [pc, #500]	; (80054f4 <HAL_UART_IRQHandler+0x58c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a7a      	ldr	r2, [pc, #488]	; (80054f8 <HAL_UART_IRQHandler+0x590>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01b      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a78      	ldr	r2, [pc, #480]	; (80054fc <HAL_UART_IRQHandler+0x594>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d014      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a75      	ldr	r2, [pc, #468]	; (8005500 <HAL_UART_IRQHandler+0x598>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00d      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a73      	ldr	r2, [pc, #460]	; (8005504 <HAL_UART_IRQHandler+0x59c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d006      	beq.n	800534a <HAL_UART_IRQHandler+0x3e2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a70      	ldr	r2, [pc, #448]	; (8005508 <HAL_UART_IRQHandler+0x5a0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d106      	bne.n	8005358 <HAL_UART_IRQHandler+0x3f0>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	b29b      	uxth	r3, r3
 8005356:	e005      	b.n	8005364 <HAL_UART_IRQHandler+0x3fc>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 81ab 	beq.w	80056c8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005378:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800537c:	429a      	cmp	r2, r3
 800537e:	f080 81a3 	bcs.w	80056c8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005388:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005398:	f000 8087 	beq.w	80054aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1da      	bne.n	800539c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3308      	adds	r3, #8
 80053ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800540a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800540e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005412:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800541c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e1      	bne.n	80053e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3308      	adds	r3, #8
 8005428:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005448:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800544c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e3      	bne.n	8005422 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005478:	f023 0310 	bic.w	r3, r3, #16
 800547c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800548a:	65bb      	str	r3, [r7, #88]	; 0x58
 800548c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e4      	bne.n	8005468 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb fef5 	bl	8001294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f91d 	bl	8005704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054ca:	e0fd      	b.n	80056c8 <HAL_UART_IRQHandler+0x760>
 80054cc:	40020010 	.word	0x40020010
 80054d0:	40020028 	.word	0x40020028
 80054d4:	40020040 	.word	0x40020040
 80054d8:	40020058 	.word	0x40020058
 80054dc:	40020070 	.word	0x40020070
 80054e0:	40020088 	.word	0x40020088
 80054e4:	400200a0 	.word	0x400200a0
 80054e8:	400200b8 	.word	0x400200b8
 80054ec:	40020410 	.word	0x40020410
 80054f0:	40020428 	.word	0x40020428
 80054f4:	40020440 	.word	0x40020440
 80054f8:	40020458 	.word	0x40020458
 80054fc:	40020470 	.word	0x40020470
 8005500:	40020488 	.word	0x40020488
 8005504:	400204a0 	.word	0x400204a0
 8005508:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005518:	b29b      	uxth	r3, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80cf 	beq.w	80056cc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800552e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80ca 	beq.w	80056cc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800554c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800555a:	647b      	str	r3, [r7, #68]	; 0x44
 800555c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e4      	bne.n	8005538 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	623b      	str	r3, [r7, #32]
   return(result);
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	4b55      	ldr	r3, [pc, #340]	; (80056d8 <HAL_UART_IRQHandler+0x770>)
 8005582:	4013      	ands	r3, r2
 8005584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005592:	633a      	str	r2, [r7, #48]	; 0x30
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e3      	bne.n	800556e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e4      	bne.n	80055ba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f881 	bl	8005704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005602:	e063      	b.n	80056cc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00e      	beq.n	800562e <HAL_UART_IRQHandler+0x6c6>
 8005610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 ff7e 	bl	8007528 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800562c:	e051      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d014      	beq.n	8005664 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b00      	cmp	r3, #0
 8005644:	d105      	bne.n	8005652 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005656:	2b00      	cmp	r3, #0
 8005658:	d03a      	beq.n	80056d0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
    }
    return;
 8005662:	e035      	b.n	80056d0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <HAL_UART_IRQHandler+0x71c>
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 fa0b 	bl	8006a98 <UART_EndTransmit_IT>
    return;
 8005682:	e026      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <HAL_UART_IRQHandler+0x73c>
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 ff57 	bl	8007550 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056a2:	e016      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <HAL_UART_IRQHandler+0x76a>
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da0c      	bge.n	80056d2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f001 ff3f 	bl	800753c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056be:	e008      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
      return;
 80056c0:	bf00      	nop
 80056c2:	e006      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
    return;
 80056c4:	bf00      	nop
 80056c6:	e004      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
      return;
 80056c8:	bf00      	nop
 80056ca:	e002      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
      return;
 80056cc:	bf00      	nop
 80056ce:	e000      	b.n	80056d2 <HAL_UART_IRQHandler+0x76a>
    return;
 80056d0:	bf00      	nop
  }
}
 80056d2:	37e8      	adds	r7, #232	; 0xe8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	effffffe 	.word	0xeffffffe

080056dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005720:	b092      	sub	sp, #72	; 0x48
 8005722:	af00      	add	r7, sp, #0
 8005724:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	431a      	orrs	r2, r3
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	431a      	orrs	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	4313      	orrs	r3, r2
 8005742:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4bbe      	ldr	r3, [pc, #760]	; (8005a44 <UART_SetConfig+0x328>)
 800574c:	4013      	ands	r3, r2
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005754:	430b      	orrs	r3, r1
 8005756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4ab3      	ldr	r2, [pc, #716]	; (8005a48 <UART_SetConfig+0x32c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005784:	4313      	orrs	r3, r2
 8005786:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	4baf      	ldr	r3, [pc, #700]	; (8005a4c <UART_SetConfig+0x330>)
 8005790:	4013      	ands	r3, r2
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005798:	430b      	orrs	r3, r1
 800579a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	f023 010f 	bic.w	r1, r3, #15
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4aa6      	ldr	r2, [pc, #664]	; (8005a50 <UART_SetConfig+0x334>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d177      	bne.n	80058ac <UART_SetConfig+0x190>
 80057bc:	4ba5      	ldr	r3, [pc, #660]	; (8005a54 <UART_SetConfig+0x338>)
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057c4:	2b28      	cmp	r3, #40	; 0x28
 80057c6:	d86d      	bhi.n	80058a4 <UART_SetConfig+0x188>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0xb4>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	08005875 	.word	0x08005875
 80057d4:	080058a5 	.word	0x080058a5
 80057d8:	080058a5 	.word	0x080058a5
 80057dc:	080058a5 	.word	0x080058a5
 80057e0:	080058a5 	.word	0x080058a5
 80057e4:	080058a5 	.word	0x080058a5
 80057e8:	080058a5 	.word	0x080058a5
 80057ec:	080058a5 	.word	0x080058a5
 80057f0:	0800587d 	.word	0x0800587d
 80057f4:	080058a5 	.word	0x080058a5
 80057f8:	080058a5 	.word	0x080058a5
 80057fc:	080058a5 	.word	0x080058a5
 8005800:	080058a5 	.word	0x080058a5
 8005804:	080058a5 	.word	0x080058a5
 8005808:	080058a5 	.word	0x080058a5
 800580c:	080058a5 	.word	0x080058a5
 8005810:	08005885 	.word	0x08005885
 8005814:	080058a5 	.word	0x080058a5
 8005818:	080058a5 	.word	0x080058a5
 800581c:	080058a5 	.word	0x080058a5
 8005820:	080058a5 	.word	0x080058a5
 8005824:	080058a5 	.word	0x080058a5
 8005828:	080058a5 	.word	0x080058a5
 800582c:	080058a5 	.word	0x080058a5
 8005830:	0800588d 	.word	0x0800588d
 8005834:	080058a5 	.word	0x080058a5
 8005838:	080058a5 	.word	0x080058a5
 800583c:	080058a5 	.word	0x080058a5
 8005840:	080058a5 	.word	0x080058a5
 8005844:	080058a5 	.word	0x080058a5
 8005848:	080058a5 	.word	0x080058a5
 800584c:	080058a5 	.word	0x080058a5
 8005850:	08005895 	.word	0x08005895
 8005854:	080058a5 	.word	0x080058a5
 8005858:	080058a5 	.word	0x080058a5
 800585c:	080058a5 	.word	0x080058a5
 8005860:	080058a5 	.word	0x080058a5
 8005864:	080058a5 	.word	0x080058a5
 8005868:	080058a5 	.word	0x080058a5
 800586c:	080058a5 	.word	0x080058a5
 8005870:	0800589d 	.word	0x0800589d
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e326      	b.n	8005eca <UART_SetConfig+0x7ae>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e322      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e31e      	b.n	8005eca <UART_SetConfig+0x7ae>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e31a      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005894:	2320      	movs	r3, #32
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e316      	b.n	8005eca <UART_SetConfig+0x7ae>
 800589c:	2340      	movs	r3, #64	; 0x40
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a2:	e312      	b.n	8005eca <UART_SetConfig+0x7ae>
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058aa:	e30e      	b.n	8005eca <UART_SetConfig+0x7ae>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a69      	ldr	r2, [pc, #420]	; (8005a58 <UART_SetConfig+0x33c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d130      	bne.n	8005918 <UART_SetConfig+0x1fc>
 80058b6:	4b67      	ldr	r3, [pc, #412]	; (8005a54 <UART_SetConfig+0x338>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d826      	bhi.n	8005910 <UART_SetConfig+0x1f4>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <UART_SetConfig+0x1ac>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058e1 	.word	0x080058e1
 80058cc:	080058e9 	.word	0x080058e9
 80058d0:	080058f1 	.word	0x080058f1
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	08005901 	.word	0x08005901
 80058dc:	08005909 	.word	0x08005909
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e2f0      	b.n	8005eca <UART_SetConfig+0x7ae>
 80058e8:	2304      	movs	r3, #4
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e2ec      	b.n	8005eca <UART_SetConfig+0x7ae>
 80058f0:	2308      	movs	r3, #8
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e2e8      	b.n	8005eca <UART_SetConfig+0x7ae>
 80058f8:	2310      	movs	r3, #16
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fe:	e2e4      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005900:	2320      	movs	r3, #32
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005906:	e2e0      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590e:	e2dc      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005916:	e2d8      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a4f      	ldr	r2, [pc, #316]	; (8005a5c <UART_SetConfig+0x340>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d130      	bne.n	8005984 <UART_SetConfig+0x268>
 8005922:	4b4c      	ldr	r3, [pc, #304]	; (8005a54 <UART_SetConfig+0x338>)
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	2b05      	cmp	r3, #5
 800592c:	d826      	bhi.n	800597c <UART_SetConfig+0x260>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x218>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	0800594d 	.word	0x0800594d
 8005938:	08005955 	.word	0x08005955
 800593c:	0800595d 	.word	0x0800595d
 8005940:	08005965 	.word	0x08005965
 8005944:	0800596d 	.word	0x0800596d
 8005948:	08005975 	.word	0x08005975
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e2ba      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e2b6      	b.n	8005eca <UART_SetConfig+0x7ae>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e2b2      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596a:	e2ae      	b.n	8005eca <UART_SetConfig+0x7ae>
 800596c:	2320      	movs	r3, #32
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e2aa      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005974:	2340      	movs	r3, #64	; 0x40
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e2a6      	b.n	8005eca <UART_SetConfig+0x7ae>
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e2a2      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a35      	ldr	r2, [pc, #212]	; (8005a60 <UART_SetConfig+0x344>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d130      	bne.n	80059f0 <UART_SetConfig+0x2d4>
 800598e:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <UART_SetConfig+0x338>)
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	2b05      	cmp	r3, #5
 8005998:	d826      	bhi.n	80059e8 <UART_SetConfig+0x2cc>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0x284>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059b9 	.word	0x080059b9
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	080059c9 	.word	0x080059c9
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e284      	b.n	8005eca <UART_SetConfig+0x7ae>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e280      	b.n	8005eca <UART_SetConfig+0x7ae>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e27c      	b.n	8005eca <UART_SetConfig+0x7ae>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d6:	e278      	b.n	8005eca <UART_SetConfig+0x7ae>
 80059d8:	2320      	movs	r3, #32
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059de:	e274      	b.n	8005eca <UART_SetConfig+0x7ae>
 80059e0:	2340      	movs	r3, #64	; 0x40
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e6:	e270      	b.n	8005eca <UART_SetConfig+0x7ae>
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ee:	e26c      	b.n	8005eca <UART_SetConfig+0x7ae>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <UART_SetConfig+0x348>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d142      	bne.n	8005a80 <UART_SetConfig+0x364>
 80059fa:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <UART_SetConfig+0x338>)
 80059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b05      	cmp	r3, #5
 8005a04:	d838      	bhi.n	8005a78 <UART_SetConfig+0x35c>
 8005a06:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <UART_SetConfig+0x2f0>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a25 	.word	0x08005a25
 8005a10:	08005a2d 	.word	0x08005a2d
 8005a14:	08005a35 	.word	0x08005a35
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e24e      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e24a      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3a:	e246      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e242      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005a44:	cfff69f3 	.word	0xcfff69f3
 8005a48:	58000c00 	.word	0x58000c00
 8005a4c:	11fff4ff 	.word	0x11fff4ff
 8005a50:	40011000 	.word	0x40011000
 8005a54:	58024400 	.word	0x58024400
 8005a58:	40004400 	.word	0x40004400
 8005a5c:	40004800 	.word	0x40004800
 8005a60:	40004c00 	.word	0x40004c00
 8005a64:	40005000 	.word	0x40005000
 8005a68:	2320      	movs	r3, #32
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e22c      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005a70:	2340      	movs	r3, #64	; 0x40
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e228      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e224      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4ab1      	ldr	r2, [pc, #708]	; (8005d4c <UART_SetConfig+0x630>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d176      	bne.n	8005b78 <UART_SetConfig+0x45c>
 8005a8a:	4bb1      	ldr	r3, [pc, #708]	; (8005d50 <UART_SetConfig+0x634>)
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a92:	2b28      	cmp	r3, #40	; 0x28
 8005a94:	d86c      	bhi.n	8005b70 <UART_SetConfig+0x454>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <UART_SetConfig+0x380>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005b41 	.word	0x08005b41
 8005aa0:	08005b71 	.word	0x08005b71
 8005aa4:	08005b71 	.word	0x08005b71
 8005aa8:	08005b71 	.word	0x08005b71
 8005aac:	08005b71 	.word	0x08005b71
 8005ab0:	08005b71 	.word	0x08005b71
 8005ab4:	08005b71 	.word	0x08005b71
 8005ab8:	08005b71 	.word	0x08005b71
 8005abc:	08005b49 	.word	0x08005b49
 8005ac0:	08005b71 	.word	0x08005b71
 8005ac4:	08005b71 	.word	0x08005b71
 8005ac8:	08005b71 	.word	0x08005b71
 8005acc:	08005b71 	.word	0x08005b71
 8005ad0:	08005b71 	.word	0x08005b71
 8005ad4:	08005b71 	.word	0x08005b71
 8005ad8:	08005b71 	.word	0x08005b71
 8005adc:	08005b51 	.word	0x08005b51
 8005ae0:	08005b71 	.word	0x08005b71
 8005ae4:	08005b71 	.word	0x08005b71
 8005ae8:	08005b71 	.word	0x08005b71
 8005aec:	08005b71 	.word	0x08005b71
 8005af0:	08005b71 	.word	0x08005b71
 8005af4:	08005b71 	.word	0x08005b71
 8005af8:	08005b71 	.word	0x08005b71
 8005afc:	08005b59 	.word	0x08005b59
 8005b00:	08005b71 	.word	0x08005b71
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b71 	.word	0x08005b71
 8005b14:	08005b71 	.word	0x08005b71
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b61 	.word	0x08005b61
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b71 	.word	0x08005b71
 8005b2c:	08005b71 	.word	0x08005b71
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b71 	.word	0x08005b71
 8005b38:	08005b71 	.word	0x08005b71
 8005b3c:	08005b69 	.word	0x08005b69
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e1c0      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e1bc      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005b50:	2308      	movs	r3, #8
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e1b8      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5e:	e1b4      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005b60:	2320      	movs	r3, #32
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b66:	e1b0      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005b68:	2340      	movs	r3, #64	; 0x40
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6e:	e1ac      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b76:	e1a8      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a75      	ldr	r2, [pc, #468]	; (8005d54 <UART_SetConfig+0x638>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d130      	bne.n	8005be4 <UART_SetConfig+0x4c8>
 8005b82:	4b73      	ldr	r3, [pc, #460]	; (8005d50 <UART_SetConfig+0x634>)
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d826      	bhi.n	8005bdc <UART_SetConfig+0x4c0>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <UART_SetConfig+0x478>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bad 	.word	0x08005bad
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005bbd 	.word	0x08005bbd
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bcd 	.word	0x08005bcd
 8005ba8:	08005bd5 	.word	0x08005bd5
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e18a      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bba:	e186      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc2:	e182      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bca:	e17e      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005bcc:	2320      	movs	r3, #32
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd2:	e17a      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005bd4:	2340      	movs	r3, #64	; 0x40
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	e176      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be2:	e172      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a5b      	ldr	r2, [pc, #364]	; (8005d58 <UART_SetConfig+0x63c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d130      	bne.n	8005c50 <UART_SetConfig+0x534>
 8005bee:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <UART_SetConfig+0x634>)
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d826      	bhi.n	8005c48 <UART_SetConfig+0x52c>
 8005bfa:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0x4e4>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c19 	.word	0x08005c19
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c29 	.word	0x08005c29
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1e:	e154      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c26:	e150      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2e:	e14c      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c36:	e148      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3e:	e144      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005c40:	2340      	movs	r3, #64	; 0x40
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c46:	e140      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4e:	e13c      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a41      	ldr	r2, [pc, #260]	; (8005d5c <UART_SetConfig+0x640>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f040 8082 	bne.w	8005d60 <UART_SetConfig+0x644>
 8005c5c:	4b3c      	ldr	r3, [pc, #240]	; (8005d50 <UART_SetConfig+0x634>)
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c64:	2b28      	cmp	r3, #40	; 0x28
 8005c66:	d86d      	bhi.n	8005d44 <UART_SetConfig+0x628>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x554>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005d15 	.word	0x08005d15
 8005c74:	08005d45 	.word	0x08005d45
 8005c78:	08005d45 	.word	0x08005d45
 8005c7c:	08005d45 	.word	0x08005d45
 8005c80:	08005d45 	.word	0x08005d45
 8005c84:	08005d45 	.word	0x08005d45
 8005c88:	08005d45 	.word	0x08005d45
 8005c8c:	08005d45 	.word	0x08005d45
 8005c90:	08005d1d 	.word	0x08005d1d
 8005c94:	08005d45 	.word	0x08005d45
 8005c98:	08005d45 	.word	0x08005d45
 8005c9c:	08005d45 	.word	0x08005d45
 8005ca0:	08005d45 	.word	0x08005d45
 8005ca4:	08005d45 	.word	0x08005d45
 8005ca8:	08005d45 	.word	0x08005d45
 8005cac:	08005d45 	.word	0x08005d45
 8005cb0:	08005d25 	.word	0x08005d25
 8005cb4:	08005d45 	.word	0x08005d45
 8005cb8:	08005d45 	.word	0x08005d45
 8005cbc:	08005d45 	.word	0x08005d45
 8005cc0:	08005d45 	.word	0x08005d45
 8005cc4:	08005d45 	.word	0x08005d45
 8005cc8:	08005d45 	.word	0x08005d45
 8005ccc:	08005d45 	.word	0x08005d45
 8005cd0:	08005d2d 	.word	0x08005d2d
 8005cd4:	08005d45 	.word	0x08005d45
 8005cd8:	08005d45 	.word	0x08005d45
 8005cdc:	08005d45 	.word	0x08005d45
 8005ce0:	08005d45 	.word	0x08005d45
 8005ce4:	08005d45 	.word	0x08005d45
 8005ce8:	08005d45 	.word	0x08005d45
 8005cec:	08005d45 	.word	0x08005d45
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d45 	.word	0x08005d45
 8005cf8:	08005d45 	.word	0x08005d45
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d45 	.word	0x08005d45
 8005d04:	08005d45 	.word	0x08005d45
 8005d08:	08005d45 	.word	0x08005d45
 8005d0c:	08005d45 	.word	0x08005d45
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e0d6      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d22:	e0d2      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2a:	e0ce      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d32:	e0ca      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005d34:	2320      	movs	r3, #32
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3a:	e0c6      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d42:	e0c2      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4a:	e0be      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005d4c:	40011400 	.word	0x40011400
 8005d50:	58024400 	.word	0x58024400
 8005d54:	40007800 	.word	0x40007800
 8005d58:	40007c00 	.word	0x40007c00
 8005d5c:	40011800 	.word	0x40011800
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4aad      	ldr	r2, [pc, #692]	; (800601c <UART_SetConfig+0x900>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d176      	bne.n	8005e58 <UART_SetConfig+0x73c>
 8005d6a:	4bad      	ldr	r3, [pc, #692]	; (8006020 <UART_SetConfig+0x904>)
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d72:	2b28      	cmp	r3, #40	; 0x28
 8005d74:	d86c      	bhi.n	8005e50 <UART_SetConfig+0x734>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <UART_SetConfig+0x660>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005e21 	.word	0x08005e21
 8005d80:	08005e51 	.word	0x08005e51
 8005d84:	08005e51 	.word	0x08005e51
 8005d88:	08005e51 	.word	0x08005e51
 8005d8c:	08005e51 	.word	0x08005e51
 8005d90:	08005e51 	.word	0x08005e51
 8005d94:	08005e51 	.word	0x08005e51
 8005d98:	08005e51 	.word	0x08005e51
 8005d9c:	08005e29 	.word	0x08005e29
 8005da0:	08005e51 	.word	0x08005e51
 8005da4:	08005e51 	.word	0x08005e51
 8005da8:	08005e51 	.word	0x08005e51
 8005dac:	08005e51 	.word	0x08005e51
 8005db0:	08005e51 	.word	0x08005e51
 8005db4:	08005e51 	.word	0x08005e51
 8005db8:	08005e51 	.word	0x08005e51
 8005dbc:	08005e31 	.word	0x08005e31
 8005dc0:	08005e51 	.word	0x08005e51
 8005dc4:	08005e51 	.word	0x08005e51
 8005dc8:	08005e51 	.word	0x08005e51
 8005dcc:	08005e51 	.word	0x08005e51
 8005dd0:	08005e51 	.word	0x08005e51
 8005dd4:	08005e51 	.word	0x08005e51
 8005dd8:	08005e51 	.word	0x08005e51
 8005ddc:	08005e39 	.word	0x08005e39
 8005de0:	08005e51 	.word	0x08005e51
 8005de4:	08005e51 	.word	0x08005e51
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005e51 	.word	0x08005e51
 8005df0:	08005e51 	.word	0x08005e51
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005e51 	.word	0x08005e51
 8005dfc:	08005e41 	.word	0x08005e41
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e51 	.word	0x08005e51
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e51 	.word	0x08005e51
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e51 	.word	0x08005e51
 8005e18:	08005e51 	.word	0x08005e51
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e050      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e04c      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e048      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e044      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e40:	2320      	movs	r3, #32
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e040      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e03c      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e038      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a71      	ldr	r2, [pc, #452]	; (8006024 <UART_SetConfig+0x908>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d130      	bne.n	8005ec4 <UART_SetConfig+0x7a8>
 8005e62:	4b6f      	ldr	r3, [pc, #444]	; (8006020 <UART_SetConfig+0x904>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d826      	bhi.n	8005ebc <UART_SetConfig+0x7a0>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <UART_SetConfig+0x758>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e9d 	.word	0x08005e9d
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e01a      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e016      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e012      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e00e      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e00a      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e006      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e002      	b.n	8005eca <UART_SetConfig+0x7ae>
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a55      	ldr	r2, [pc, #340]	; (8006024 <UART_SetConfig+0x908>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f040 80f8 	bne.w	80060c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	dc46      	bgt.n	8005f6c <UART_SetConfig+0x850>
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	db75      	blt.n	8005fce <UART_SetConfig+0x8b2>
 8005ee2:	3b02      	subs	r3, #2
 8005ee4:	2b1e      	cmp	r3, #30
 8005ee6:	d872      	bhi.n	8005fce <UART_SetConfig+0x8b2>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x7d4>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f73 	.word	0x08005f73
 8005ef4:	08005fcf 	.word	0x08005fcf
 8005ef8:	08005f7b 	.word	0x08005f7b
 8005efc:	08005fcf 	.word	0x08005fcf
 8005f00:	08005fcf 	.word	0x08005fcf
 8005f04:	08005fcf 	.word	0x08005fcf
 8005f08:	08005f8b 	.word	0x08005f8b
 8005f0c:	08005fcf 	.word	0x08005fcf
 8005f10:	08005fcf 	.word	0x08005fcf
 8005f14:	08005fcf 	.word	0x08005fcf
 8005f18:	08005fcf 	.word	0x08005fcf
 8005f1c:	08005fcf 	.word	0x08005fcf
 8005f20:	08005fcf 	.word	0x08005fcf
 8005f24:	08005fcf 	.word	0x08005fcf
 8005f28:	08005f9b 	.word	0x08005f9b
 8005f2c:	08005fcf 	.word	0x08005fcf
 8005f30:	08005fcf 	.word	0x08005fcf
 8005f34:	08005fcf 	.word	0x08005fcf
 8005f38:	08005fcf 	.word	0x08005fcf
 8005f3c:	08005fcf 	.word	0x08005fcf
 8005f40:	08005fcf 	.word	0x08005fcf
 8005f44:	08005fcf 	.word	0x08005fcf
 8005f48:	08005fcf 	.word	0x08005fcf
 8005f4c:	08005fcf 	.word	0x08005fcf
 8005f50:	08005fcf 	.word	0x08005fcf
 8005f54:	08005fcf 	.word	0x08005fcf
 8005f58:	08005fcf 	.word	0x08005fcf
 8005f5c:	08005fcf 	.word	0x08005fcf
 8005f60:	08005fcf 	.word	0x08005fcf
 8005f64:	08005fcf 	.word	0x08005fcf
 8005f68:	08005fc1 	.word	0x08005fc1
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d02a      	beq.n	8005fc6 <UART_SetConfig+0x8aa>
 8005f70:	e02d      	b.n	8005fce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f72:	f7fe faad 	bl	80044d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f78:	e02f      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fabc 	bl	80044fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f88:	e027      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f8a:	f107 0318 	add.w	r3, r7, #24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fc08 	bl	80047a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f98:	e01f      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <UART_SetConfig+0x904>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <UART_SetConfig+0x904>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <UART_SetConfig+0x90c>)
 8005fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fb8:	e00f      	b.n	8005fda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <UART_SetConfig+0x90c>)
 8005fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fbe:	e00c      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	; (800602c <UART_SetConfig+0x910>)
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fc4:	e009      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fcc:	e005      	b.n	8005fda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005fd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 81ee 	beq.w	80063be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	4a12      	ldr	r2, [pc, #72]	; (8006030 <UART_SetConfig+0x914>)
 8005fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fec:	461a      	mov	r2, r3
 8005fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	429a      	cmp	r2, r3
 8006004:	d305      	bcc.n	8006012 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800600c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600e:	429a      	cmp	r2, r3
 8006010:	d910      	bls.n	8006034 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006018:	e1d1      	b.n	80063be <UART_SetConfig+0xca2>
 800601a:	bf00      	nop
 800601c:	40011c00 	.word	0x40011c00
 8006020:	58024400 	.word	0x58024400
 8006024:	58000c00 	.word	0x58000c00
 8006028:	03d09000 	.word	0x03d09000
 800602c:	003d0900 	.word	0x003d0900
 8006030:	08007808 	.word	0x08007808
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006036:	2200      	movs	r2, #0
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	60fa      	str	r2, [r7, #12]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	4ac0      	ldr	r2, [pc, #768]	; (8006344 <UART_SetConfig+0xc28>)
 8006042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006046:	b29b      	uxth	r3, r3
 8006048:	2200      	movs	r2, #0
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006056:	f7fa f949 	bl	80002ec <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4610      	mov	r0, r2
 8006060:	4619      	mov	r1, r3
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	020b      	lsls	r3, r1, #8
 800606c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006070:	0202      	lsls	r2, r0, #8
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	6849      	ldr	r1, [r1, #4]
 8006076:	0849      	lsrs	r1, r1, #1
 8006078:	2000      	movs	r0, #0
 800607a:	460c      	mov	r4, r1
 800607c:	4605      	mov	r5, r0
 800607e:	eb12 0804 	adds.w	r8, r2, r4
 8006082:	eb43 0905 	adc.w	r9, r3, r5
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	469a      	mov	sl, r3
 800608e:	4693      	mov	fp, r2
 8006090:	4652      	mov	r2, sl
 8006092:	465b      	mov	r3, fp
 8006094:	4640      	mov	r0, r8
 8006096:	4649      	mov	r1, r9
 8006098:	f7fa f928 	bl	80002ec <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4613      	mov	r3, r2
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060aa:	d308      	bcc.n	80060be <UART_SetConfig+0x9a2>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b2:	d204      	bcs.n	80060be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ba:	60da      	str	r2, [r3, #12]
 80060bc:	e17f      	b.n	80063be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80060c4:	e17b      	b.n	80063be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ce:	f040 80bd 	bne.w	800624c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80060d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	dc48      	bgt.n	800616c <UART_SetConfig+0xa50>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	db7b      	blt.n	80061d6 <UART_SetConfig+0xaba>
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d879      	bhi.n	80061d6 <UART_SetConfig+0xaba>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0x9cc>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	08006173 	.word	0x08006173
 80060ec:	0800617b 	.word	0x0800617b
 80060f0:	080061d7 	.word	0x080061d7
 80060f4:	080061d7 	.word	0x080061d7
 80060f8:	08006183 	.word	0x08006183
 80060fc:	080061d7 	.word	0x080061d7
 8006100:	080061d7 	.word	0x080061d7
 8006104:	080061d7 	.word	0x080061d7
 8006108:	08006193 	.word	0x08006193
 800610c:	080061d7 	.word	0x080061d7
 8006110:	080061d7 	.word	0x080061d7
 8006114:	080061d7 	.word	0x080061d7
 8006118:	080061d7 	.word	0x080061d7
 800611c:	080061d7 	.word	0x080061d7
 8006120:	080061d7 	.word	0x080061d7
 8006124:	080061d7 	.word	0x080061d7
 8006128:	080061a3 	.word	0x080061a3
 800612c:	080061d7 	.word	0x080061d7
 8006130:	080061d7 	.word	0x080061d7
 8006134:	080061d7 	.word	0x080061d7
 8006138:	080061d7 	.word	0x080061d7
 800613c:	080061d7 	.word	0x080061d7
 8006140:	080061d7 	.word	0x080061d7
 8006144:	080061d7 	.word	0x080061d7
 8006148:	080061d7 	.word	0x080061d7
 800614c:	080061d7 	.word	0x080061d7
 8006150:	080061d7 	.word	0x080061d7
 8006154:	080061d7 	.word	0x080061d7
 8006158:	080061d7 	.word	0x080061d7
 800615c:	080061d7 	.word	0x080061d7
 8006160:	080061d7 	.word	0x080061d7
 8006164:	080061d7 	.word	0x080061d7
 8006168:	080061c9 	.word	0x080061c9
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d02e      	beq.n	80061ce <UART_SetConfig+0xab2>
 8006170:	e031      	b.n	80061d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006172:	f7fc ffc3 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8006176:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006178:	e033      	b.n	80061e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800617a:	f7fc ffd5 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 800617e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006180:	e02f      	b.n	80061e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe f9b8 	bl	80044fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006190:	e027      	b.n	80061e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006192:	f107 0318 	add.w	r3, r7, #24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fb04 	bl	80047a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a0:	e01f      	b.n	80061e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a2:	4b69      	ldr	r3, [pc, #420]	; (8006348 <UART_SetConfig+0xc2c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ae:	4b66      	ldr	r3, [pc, #408]	; (8006348 <UART_SetConfig+0xc2c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	08db      	lsrs	r3, r3, #3
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	4a64      	ldr	r2, [pc, #400]	; (800634c <UART_SetConfig+0xc30>)
 80061ba:	fa22 f303 	lsr.w	r3, r2, r3
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061c0:	e00f      	b.n	80061e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80061c2:	4b62      	ldr	r3, [pc, #392]	; (800634c <UART_SetConfig+0xc30>)
 80061c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061c6:	e00c      	b.n	80061e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061c8:	4b61      	ldr	r3, [pc, #388]	; (8006350 <UART_SetConfig+0xc34>)
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061cc:	e009      	b.n	80061e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061d4:	e005      	b.n	80061e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80061e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80ea 	beq.w	80063be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	4a55      	ldr	r2, [pc, #340]	; (8006344 <UART_SetConfig+0xc28>)
 80061f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fc:	005a      	lsls	r2, r3, #1
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	441a      	add	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d916      	bls.n	8006244 <UART_SetConfig+0xb28>
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621c:	d212      	bcs.n	8006244 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	b29b      	uxth	r3, r3
 8006222:	f023 030f 	bic.w	r3, r3, #15
 8006226:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	b29a      	uxth	r2, r3
 8006234:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006236:	4313      	orrs	r3, r2
 8006238:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	e0bc      	b.n	80063be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800624a:	e0b8      	b.n	80063be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800624c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006250:	2b20      	cmp	r3, #32
 8006252:	dc4b      	bgt.n	80062ec <UART_SetConfig+0xbd0>
 8006254:	2b00      	cmp	r3, #0
 8006256:	f2c0 8087 	blt.w	8006368 <UART_SetConfig+0xc4c>
 800625a:	2b20      	cmp	r3, #32
 800625c:	f200 8084 	bhi.w	8006368 <UART_SetConfig+0xc4c>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <UART_SetConfig+0xb4c>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	080062f3 	.word	0x080062f3
 800626c:	080062fb 	.word	0x080062fb
 8006270:	08006369 	.word	0x08006369
 8006274:	08006369 	.word	0x08006369
 8006278:	08006303 	.word	0x08006303
 800627c:	08006369 	.word	0x08006369
 8006280:	08006369 	.word	0x08006369
 8006284:	08006369 	.word	0x08006369
 8006288:	08006313 	.word	0x08006313
 800628c:	08006369 	.word	0x08006369
 8006290:	08006369 	.word	0x08006369
 8006294:	08006369 	.word	0x08006369
 8006298:	08006369 	.word	0x08006369
 800629c:	08006369 	.word	0x08006369
 80062a0:	08006369 	.word	0x08006369
 80062a4:	08006369 	.word	0x08006369
 80062a8:	08006323 	.word	0x08006323
 80062ac:	08006369 	.word	0x08006369
 80062b0:	08006369 	.word	0x08006369
 80062b4:	08006369 	.word	0x08006369
 80062b8:	08006369 	.word	0x08006369
 80062bc:	08006369 	.word	0x08006369
 80062c0:	08006369 	.word	0x08006369
 80062c4:	08006369 	.word	0x08006369
 80062c8:	08006369 	.word	0x08006369
 80062cc:	08006369 	.word	0x08006369
 80062d0:	08006369 	.word	0x08006369
 80062d4:	08006369 	.word	0x08006369
 80062d8:	08006369 	.word	0x08006369
 80062dc:	08006369 	.word	0x08006369
 80062e0:	08006369 	.word	0x08006369
 80062e4:	08006369 	.word	0x08006369
 80062e8:	0800635b 	.word	0x0800635b
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d037      	beq.n	8006360 <UART_SetConfig+0xc44>
 80062f0:	e03a      	b.n	8006368 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f2:	f7fc ff03 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 80062f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062f8:	e03c      	b.n	8006374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062fa:	f7fc ff15 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 80062fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006300:	e038      	b.n	8006374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe f8f8 	bl	80044fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006310:	e030      	b.n	8006374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006312:	f107 0318 	add.w	r3, r7, #24
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fa44 	bl	80047a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006320:	e028      	b.n	8006374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <UART_SetConfig+0xc2c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d012      	beq.n	8006354 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <UART_SetConfig+0xc2c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	08db      	lsrs	r3, r3, #3
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <UART_SetConfig+0xc30>)
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006340:	e018      	b.n	8006374 <UART_SetConfig+0xc58>
 8006342:	bf00      	nop
 8006344:	08007808 	.word	0x08007808
 8006348:	58024400 	.word	0x58024400
 800634c:	03d09000 	.word	0x03d09000
 8006350:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006354:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <UART_SetConfig+0xccc>)
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006358:	e00c      	b.n	8006374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800635a:	4b24      	ldr	r3, [pc, #144]	; (80063ec <UART_SetConfig+0xcd0>)
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800635e:	e009      	b.n	8006374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006366:	e005      	b.n	8006374 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006372:	bf00      	nop
    }

    if (pclk != 0U)
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d021      	beq.n	80063be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	4a1c      	ldr	r2, [pc, #112]	; (80063f0 <UART_SetConfig+0xcd4>)
 8006380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006384:	461a      	mov	r2, r3
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	fbb3 f2f2 	udiv	r2, r3, r2
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	441a      	add	r2, r3
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	2b0f      	cmp	r3, #15
 80063a2:	d909      	bls.n	80063b8 <UART_SetConfig+0xc9c>
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063aa:	d205      	bcs.n	80063b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60da      	str	r2, [r3, #12]
 80063b6:	e002      	b.n	80063be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2200      	movs	r2, #0
 80063d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2200      	movs	r2, #0
 80063d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80063da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3748      	adds	r7, #72	; 0x48
 80063e2:	46bd      	mov	sp, r7
 80063e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e8:	03d09000 	.word	0x03d09000
 80063ec:	003d0900 	.word	0x003d0900
 80063f0:	08007808 	.word	0x08007808

080063f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f2:	d10a      	bne.n	800650a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b098      	sub	sp, #96	; 0x60
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006548:	f7fa fd64 	bl	8001014 <HAL_GetTick>
 800654c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d12f      	bne.n	80065bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f88e 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d022      	beq.n	80065bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800658a:	653b      	str	r3, [r7, #80]	; 0x50
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
 8006596:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800659a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e063      	b.n	8006684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d149      	bne.n	800665e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d2:	2200      	movs	r2, #0
 80065d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f857 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d03c      	beq.n	800665e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	623b      	str	r3, [r7, #32]
   return(result);
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006602:	633b      	str	r3, [r7, #48]	; 0x30
 8006604:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e6      	bne.n	80065e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3308      	adds	r3, #8
 800661c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	60fb      	str	r3, [r7, #12]
   return(result);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	64bb      	str	r3, [r7, #72]	; 0x48
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006636:	61fa      	str	r2, [r7, #28]
 8006638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	69b9      	ldr	r1, [r7, #24]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	617b      	str	r3, [r7, #20]
   return(result);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e012      	b.n	8006684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3758      	adds	r7, #88	; 0x58
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	e049      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a4:	d045      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fa fcb5 	bl	8001014 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <UART_WaitOnFlagUntilTimeout+0x30>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e048      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d031      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d110      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f95b 	bl	80069a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2208      	movs	r2, #8
 80066ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e029      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670c:	d111      	bne.n	8006732 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f941 	bl	80069a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e00f      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	429a      	cmp	r2, r3
 800674e:	d0a6      	beq.n	800669e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800675c:	b480      	push	{r7}
 800675e:	b0a3      	sub	sp, #140	; 0x8c
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678e:	d10e      	bne.n	80067ae <UART_Start_Receive_IT+0x52>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <UART_Start_Receive_IT+0x48>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800679e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067a2:	e02d      	b.n	8006800 <UART_Start_Receive_IT+0xa4>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	22ff      	movs	r2, #255	; 0xff
 80067a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067ac:	e028      	b.n	8006800 <UART_Start_Receive_IT+0xa4>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10d      	bne.n	80067d2 <UART_Start_Receive_IT+0x76>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <UART_Start_Receive_IT+0x6c>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	22ff      	movs	r2, #255	; 0xff
 80067c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067c6:	e01b      	b.n	8006800 <UART_Start_Receive_IT+0xa4>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	227f      	movs	r2, #127	; 0x7f
 80067cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067d0:	e016      	b.n	8006800 <UART_Start_Receive_IT+0xa4>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067da:	d10d      	bne.n	80067f8 <UART_Start_Receive_IT+0x9c>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d104      	bne.n	80067ee <UART_Start_Receive_IT+0x92>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	227f      	movs	r2, #127	; 0x7f
 80067e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067ec:	e008      	b.n	8006800 <UART_Start_Receive_IT+0xa4>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	223f      	movs	r2, #63	; 0x3f
 80067f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067f6:	e003      	b.n	8006800 <UART_Start_Receive_IT+0xa4>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2222      	movs	r2, #34	; 0x22
 800680c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006834:	673a      	str	r2, [r7, #112]	; 0x70
 8006836:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800683a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e3      	bne.n	8006810 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800684c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006850:	d14f      	bne.n	80068f2 <UART_Start_Receive_IT+0x196>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	429a      	cmp	r2, r3
 800685c:	d349      	bcc.n	80068f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d107      	bne.n	8006878 <UART_Start_Receive_IT+0x11c>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d103      	bne.n	8006878 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a47      	ldr	r2, [pc, #284]	; (8006990 <UART_Start_Receive_IT+0x234>)
 8006874:	675a      	str	r2, [r3, #116]	; 0x74
 8006876:	e002      	b.n	800687e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4a46      	ldr	r2, [pc, #280]	; (8006994 <UART_Start_Receive_IT+0x238>)
 800687c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01a      	beq.n	80068bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e4      	bne.n	8006886 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80068dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80068de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e5      	bne.n	80068bc <UART_Start_Receive_IT+0x160>
 80068f0:	e046      	b.n	8006980 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fa:	d107      	bne.n	800690c <UART_Start_Receive_IT+0x1b0>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a24      	ldr	r2, [pc, #144]	; (8006998 <UART_Start_Receive_IT+0x23c>)
 8006908:	675a      	str	r2, [r3, #116]	; 0x74
 800690a:	e002      	b.n	8006912 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a23      	ldr	r2, [pc, #140]	; (800699c <UART_Start_Receive_IT+0x240>)
 8006910:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d019      	beq.n	800694e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800692e:	677b      	str	r3, [r7, #116]	; 0x74
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
 800693a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_Start_Receive_IT+0x1be>
 800694c:	e018      	b.n	8006980 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	613b      	str	r3, [r7, #16]
   return(result);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f043 0320 	orr.w	r3, r3, #32
 8006962:	67bb      	str	r3, [r7, #120]	; 0x78
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800696c:	623b      	str	r3, [r7, #32]
 800696e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	69f9      	ldr	r1, [r7, #28]
 8006972:	6a3a      	ldr	r2, [r7, #32]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	61bb      	str	r3, [r7, #24]
   return(result);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	378c      	adds	r7, #140	; 0x8c
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	080071c1 	.word	0x080071c1
 8006994:	08006e61 	.word	0x08006e61
 8006998:	08006ca9 	.word	0x08006ca9
 800699c:	08006af1 	.word	0x08006af1

080069a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b095      	sub	sp, #84	; 0x54
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	643b      	str	r3, [r7, #64]	; 0x40
 80069c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e6      	bne.n	80069a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <UART_EndRxTransfer+0xc8>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e5      	bne.n	80069da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d118      	bne.n	8006a48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f023 0310 	bic.w	r3, r3, #16
 8006a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6979      	ldr	r1, [r7, #20]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	613b      	str	r3, [r7, #16]
   return(result);
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a5c:	bf00      	nop
 8006a5e:	3754      	adds	r7, #84	; 0x54
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	effffffe 	.word	0xeffffffe

08006a6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7fe fe30 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	613b      	str	r3, [r7, #16]
   return(result);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e6      	bne.n	8006aa0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fe fdfb 	bl	80056dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae6:	bf00      	nop
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b09c      	sub	sp, #112	; 0x70
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006afe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b08:	2b22      	cmp	r3, #34	; 0x22
 8006b0a:	f040 80be 	bne.w	8006c8a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006b1c:	b2d9      	uxtb	r1, r3
 8006b1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b28:	400a      	ands	r2, r1
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 80a1 	bne.w	8006c9a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b76:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e6      	bne.n	8006b58 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006baa:	647a      	str	r2, [r7, #68]	; 0x44
 8006bac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e5      	bne.n	8006b8a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a33      	ldr	r2, [pc, #204]	; (8006ca4 <UART_RxISR_8BIT+0x1b4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d01f      	beq.n	8006c1c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30
 8006c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d12e      	bne.n	8006c82 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0310 	bic.w	r3, r3, #16
 8006c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	69b9      	ldr	r1, [r7, #24]
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	617b      	str	r3, [r7, #20]
   return(result);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e6      	bne.n	8006c2a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d103      	bne.n	8006c72 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2210      	movs	r2, #16
 8006c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fe fd42 	bl	8005704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c80:	e00b      	b.n	8006c9a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fa f8fa 	bl	8000e7c <HAL_UART_RxCpltCallback>
}
 8006c88:	e007      	b.n	8006c9a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0208 	orr.w	r2, r2, #8
 8006c98:	619a      	str	r2, [r3, #24]
}
 8006c9a:	bf00      	nop
 8006c9c:	3770      	adds	r7, #112	; 0x70
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	58000c00 	.word	0x58000c00

08006ca8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b09c      	sub	sp, #112	; 0x70
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cb6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc0:	2b22      	cmp	r3, #34	; 0x22
 8006cc2:	f040 80be 	bne.w	8006e42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cd6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006cda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006cde:	4013      	ands	r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	1c9a      	adds	r2, r3, #2
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 80a1 	bne.w	8006e52 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d24:	667b      	str	r3, [r7, #100]	; 0x64
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d30:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e6      	bne.n	8006d10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	663b      	str	r3, [r7, #96]	; 0x60
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d62:	643a      	str	r2, [r7, #64]	; 0x40
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a33      	ldr	r2, [pc, #204]	; (8006e5c <UART_RxISR_16BIT+0x1b4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d01f      	beq.n	8006dd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d018      	beq.n	8006dd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e6      	bne.n	8006da2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d12e      	bne.n	8006e3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f023 0310 	bic.w	r3, r3, #16
 8006df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6979      	ldr	r1, [r7, #20]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e6      	bne.n	8006de2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d103      	bne.n	8006e2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2210      	movs	r2, #16
 8006e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fe fc66 	bl	8005704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e38:	e00b      	b.n	8006e52 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fa f81e 	bl	8000e7c <HAL_UART_RxCpltCallback>
}
 8006e40:	e007      	b.n	8006e52 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0208 	orr.w	r2, r2, #8
 8006e50:	619a      	str	r2, [r3, #24]
}
 8006e52:	bf00      	nop
 8006e54:	3770      	adds	r7, #112	; 0x70
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	58000c00 	.word	0x58000c00

08006e60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b0ac      	sub	sp, #176	; 0xb0
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e96:	2b22      	cmp	r3, #34	; 0x22
 8006e98:	f040 8180 	bne.w	800719c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ea2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ea6:	e123      	b.n	80070f0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006eb2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006eb6:	b2d9      	uxtb	r1, r3
 8006eb8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec2:	400a      	ands	r2, r1
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d053      	beq.n	8006fa2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d011      	beq.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2201      	movs	r2, #1
 8006f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	f043 0201 	orr.w	r2, r3, #1
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d011      	beq.n	8006f5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2202      	movs	r2, #2
 8006f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f50:	f043 0204 	orr.w	r2, r3, #4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d011      	beq.n	8006f8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2204      	movs	r2, #4
 8006f78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	f043 0202 	orr.w	r2, r3, #2
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d006      	beq.n	8006fa2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fe fbab 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 80a0 	bne.w	80070f0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fd4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006fd8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e4      	bne.n	8006fb0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006ff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ff8:	4b6e      	ldr	r3, [pc, #440]	; (80071b4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800700a:	66ba      	str	r2, [r7, #104]	; 0x68
 800700c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007010:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e3      	bne.n	8006fe6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a60      	ldr	r2, [pc, #384]	; (80071b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d021      	beq.n	8007080 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01a      	beq.n	8007080 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800705e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800706c:	657b      	str	r3, [r7, #84]	; 0x54
 800706e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007072:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800707a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e4      	bne.n	800704a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d130      	bne.n	80070ea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	f023 0310 	bic.w	r3, r3, #16
 80070a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070b0:	643b      	str	r3, [r7, #64]	; 0x40
 80070b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e4      	bne.n	800708e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f003 0310 	and.w	r3, r3, #16
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d103      	bne.n	80070da <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2210      	movs	r2, #16
 80070d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fe fb0e 	bl	8005704 <HAL_UARTEx_RxEventCallback>
 80070e8:	e002      	b.n	80070f0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7f9 fec6 	bl	8000e7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80070f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	f47f aed1 	bne.w	8006ea8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800710c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007110:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007114:	2b00      	cmp	r3, #0
 8007116:	d049      	beq.n	80071ac <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800711e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007122:	429a      	cmp	r2, r3
 8007124:	d242      	bcs.n	80071ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	61fb      	str	r3, [r7, #28]
   return(result);
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800713c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800714a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e3      	bne.n	8007126 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a16      	ldr	r2, [pc, #88]	; (80071bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007162:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	60bb      	str	r3, [r7, #8]
   return(result);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f043 0320 	orr.w	r3, r3, #32
 8007178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6979      	ldr	r1, [r7, #20]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	613b      	str	r3, [r7, #16]
   return(result);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e4      	bne.n	8007164 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800719a:	e007      	b.n	80071ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0208 	orr.w	r2, r2, #8
 80071aa:	619a      	str	r2, [r3, #24]
}
 80071ac:	bf00      	nop
 80071ae:	37b0      	adds	r7, #176	; 0xb0
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	effffffe 	.word	0xeffffffe
 80071b8:	58000c00 	.word	0x58000c00
 80071bc:	08006af1 	.word	0x08006af1

080071c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b0ae      	sub	sp, #184	; 0xb8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f6:	2b22      	cmp	r3, #34	; 0x22
 80071f8:	f040 8184 	bne.w	8007504 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007202:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007206:	e127      	b.n	8007458 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800721a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800721e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007222:	4013      	ands	r3, r2
 8007224:	b29a      	uxth	r2, r3
 8007226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800722a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	1c9a      	adds	r2, r3, #2
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b00      	cmp	r3, #0
 800725c:	d053      	beq.n	8007306 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800725e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d011      	beq.n	800728e <UART_RxISR_16BIT_FIFOEN+0xce>
 800726a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2201      	movs	r2, #1
 800727c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d011      	beq.n	80072be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800729a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2202      	movs	r2, #2
 80072ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b4:	f043 0204 	orr.w	r2, r3, #4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d011      	beq.n	80072ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80072ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00b      	beq.n	80072ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2204      	movs	r2, #4
 80072dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e4:	f043 0202 	orr.w	r2, r3, #2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7fe f9f9 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 80a2 	bne.w	8007458 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800733a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800733e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e2      	bne.n	8007314 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3308      	adds	r3, #8
 8007354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800735e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007360:	4b6e      	ldr	r3, [pc, #440]	; (800751c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007362:	4013      	ands	r3, r2
 8007364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e3      	bne.n	800734e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a60      	ldr	r2, [pc, #384]	; (8007520 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d021      	beq.n	80073e8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01a      	beq.n	80073e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80073d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80073d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e4      	bne.n	80073b2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d130      	bne.n	8007452 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007406:	f023 0310 	bic.w	r3, r3, #16
 800740a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007418:	647b      	str	r3, [r7, #68]	; 0x44
 800741a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800741e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e4      	bne.n	80073f6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b10      	cmp	r3, #16
 8007438:	d103      	bne.n	8007442 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2210      	movs	r2, #16
 8007440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fe f95a 	bl	8005704 <HAL_UARTEx_RxEventCallback>
 8007450:	e002      	b.n	8007458 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7f9 fd12 	bl	8000e7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007458:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	f47f aecd 	bne.w	8007208 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007474:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007478:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800747c:	2b00      	cmp	r3, #0
 800747e:	d049      	beq.n	8007514 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007486:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800748a:	429a      	cmp	r2, r3
 800748c:	d242      	bcs.n	8007514 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	623b      	str	r3, [r7, #32]
   return(result);
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80074b2:	633a      	str	r2, [r7, #48]	; 0x30
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e3      	bne.n	800748e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a16      	ldr	r2, [pc, #88]	; (8007524 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80074ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	69b9      	ldr	r1, [r7, #24]
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	617b      	str	r3, [r7, #20]
   return(result);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e4      	bne.n	80074cc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007502:	e007      	b.n	8007514 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0208 	orr.w	r2, r2, #8
 8007512:	619a      	str	r2, [r3, #24]
}
 8007514:	bf00      	nop
 8007516:	37b8      	adds	r7, #184	; 0xb8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	effffffe 	.word	0xeffffffe
 8007520:	58000c00 	.word	0x58000c00
 8007524:	08006ca9 	.word	0x08006ca9

08007528 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_UARTEx_DisableFifoMode+0x16>
 8007576:	2302      	movs	r3, #2
 8007578:	e027      	b.n	80075ca <HAL_UARTEx_DisableFifoMode+0x66>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2224      	movs	r2, #36	; 0x24
 8007586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e02d      	b.n	800764a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2224      	movs	r2, #36	; 0x24
 80075fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f850 	bl	80076d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007666:	2302      	movs	r3, #2
 8007668:	e02d      	b.n	80076c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2224      	movs	r2, #36	; 0x24
 8007676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f812 	bl	80076d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d108      	bne.n	80076f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076f0:	e031      	b.n	8007756 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076f2:	2310      	movs	r3, #16
 80076f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076f6:	2310      	movs	r3, #16
 80076f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	0e5b      	lsrs	r3, r3, #25
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	0f5b      	lsrs	r3, r3, #29
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	7b3a      	ldrb	r2, [r7, #12]
 800771e:	4911      	ldr	r1, [pc, #68]	; (8007764 <UARTEx_SetNbDataToProcess+0x94>)
 8007720:	5c8a      	ldrb	r2, [r1, r2]
 8007722:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007726:	7b3a      	ldrb	r2, [r7, #12]
 8007728:	490f      	ldr	r1, [pc, #60]	; (8007768 <UARTEx_SetNbDataToProcess+0x98>)
 800772a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800772c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	7b7a      	ldrb	r2, [r7, #13]
 800773c:	4909      	ldr	r1, [pc, #36]	; (8007764 <UARTEx_SetNbDataToProcess+0x94>)
 800773e:	5c8a      	ldrb	r2, [r1, r2]
 8007740:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007744:	7b7a      	ldrb	r2, [r7, #13]
 8007746:	4908      	ldr	r1, [pc, #32]	; (8007768 <UARTEx_SetNbDataToProcess+0x98>)
 8007748:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800774a:	fb93 f3f2 	sdiv	r3, r3, r2
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007756:	bf00      	nop
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	08007820 	.word	0x08007820
 8007768:	08007828 	.word	0x08007828

0800776c <__libc_init_array>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	4d0d      	ldr	r5, [pc, #52]	; (80077a4 <__libc_init_array+0x38>)
 8007770:	4c0d      	ldr	r4, [pc, #52]	; (80077a8 <__libc_init_array+0x3c>)
 8007772:	1b64      	subs	r4, r4, r5
 8007774:	10a4      	asrs	r4, r4, #2
 8007776:	2600      	movs	r6, #0
 8007778:	42a6      	cmp	r6, r4
 800777a:	d109      	bne.n	8007790 <__libc_init_array+0x24>
 800777c:	4d0b      	ldr	r5, [pc, #44]	; (80077ac <__libc_init_array+0x40>)
 800777e:	4c0c      	ldr	r4, [pc, #48]	; (80077b0 <__libc_init_array+0x44>)
 8007780:	f000 f820 	bl	80077c4 <_init>
 8007784:	1b64      	subs	r4, r4, r5
 8007786:	10a4      	asrs	r4, r4, #2
 8007788:	2600      	movs	r6, #0
 800778a:	42a6      	cmp	r6, r4
 800778c:	d105      	bne.n	800779a <__libc_init_array+0x2e>
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	f855 3b04 	ldr.w	r3, [r5], #4
 8007794:	4798      	blx	r3
 8007796:	3601      	adds	r6, #1
 8007798:	e7ee      	b.n	8007778 <__libc_init_array+0xc>
 800779a:	f855 3b04 	ldr.w	r3, [r5], #4
 800779e:	4798      	blx	r3
 80077a0:	3601      	adds	r6, #1
 80077a2:	e7f2      	b.n	800778a <__libc_init_array+0x1e>
 80077a4:	08007838 	.word	0x08007838
 80077a8:	08007838 	.word	0x08007838
 80077ac:	08007838 	.word	0x08007838
 80077b0:	0800783c 	.word	0x0800783c

080077b4 <memset>:
 80077b4:	4402      	add	r2, r0
 80077b6:	4603      	mov	r3, r0
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d100      	bne.n	80077be <memset+0xa>
 80077bc:	4770      	bx	lr
 80077be:	f803 1b01 	strb.w	r1, [r3], #1
 80077c2:	e7f9      	b.n	80077b8 <memset+0x4>

080077c4 <_init>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	bf00      	nop
 80077c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ca:	bc08      	pop	{r3}
 80077cc:	469e      	mov	lr, r3
 80077ce:	4770      	bx	lr

080077d0 <_fini>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	bf00      	nop
 80077d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d6:	bc08      	pop	{r3}
 80077d8:	469e      	mov	lr, r3
 80077da:	4770      	bx	lr
