
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000016c  24000074  08008398  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001e0  08008398  000201e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000120bc  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002411  00000000  00000000  0003215e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b88  00000000  00000000  00034570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a90  00000000  00000000  000350f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002fcc4  00000000  00000000  00035b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012db9  00000000  00000000  0006584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132de2  00000000  00000000  00078605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ab3e7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000031bc  00000000  00000000  001ab438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008258 	.word	0x08008258

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08008258 	.word	0x08008258

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <RPICom_Init>:
#include <RPICom.h>

uint8_t uartRpiRxBuffer[UART_RPI_RX_BUFFER_SIZE];
commandMsg binaryMessage;

void RPICom_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	RPICom_UartActivate();
 8000698:	f000 f802 	bl	80006a0 <RPICom_UartActivate>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <RPICom_UartActivate>:

void RPICom_UartActivate(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, uartRpiRxBuffer, UART_RPI_RX_BUFFER_SIZE);
 80006a4:	2208      	movs	r2, #8
 80006a6:	4903      	ldr	r1, [pc, #12]	; (80006b4 <RPICom_UartActivate+0x14>)
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <RPICom_UartActivate+0x18>)
 80006aa:	f004 fce7 	bl	800507c <HAL_UART_Receive_IT>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	24000090 	.word	0x24000090
 80006b8:	240000a4 	.word	0x240000a4

080006bc <checkSum>:

uint8_t checkSum(void){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
	uint8_t checkSum = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	e009      	b.n	80006e0 <checkSum+0x24>
	        checkSum ^= uartRpiRxBuffer[i];
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <checkSum+0x38>)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	4413      	add	r3, r2
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4053      	eors	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	ddf2      	ble.n	80006cc <checkSum+0x10>
	    }
	return checkSum;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	24000090 	.word	0x24000090

080006f8 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af00      	add	r7, sp, #0
	char error = '0';
 80006fe:	2330      	movs	r3, #48	; 0x30
 8000700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// Check Header
	if (  HEADER_CheckValue1 != uartRpiRxBuffer[0] || HEADER_CheckValue2 != uartRpiRxBuffer[1]){//On envoie une erreur à la raspberry
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2bff      	cmp	r3, #255	; 0xff
 800070a:	d103      	bne.n	8000714 <RPICom_DecodeBinaryMessage+0x1c>
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	2bfe      	cmp	r3, #254	; 0xfe
 8000712:	d002      	beq.n	800071a <RPICom_DecodeBinaryMessage+0x22>
		error ='1';}
 8000714:	2331      	movs	r3, #49	; 0x31
 8000716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != uartRpiRxBuffer[2]){// Il nous manque des informations
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b08      	cmp	r3, #8
 8000720:	d002      	beq.n	8000728 <RPICom_DecodeBinaryMessage+0x30>
	error='2';
 8000722:	2332      	movs	r3, #50	; 0x32
 8000724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	binaryMessage.thrust = uartRpiRxBuffer[3];
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 800072a:	78da      	ldrb	r2, [r3, #3]
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <RPICom_DecodeBinaryMessage+0xa8>)
 800072e:	701a      	strb	r2, [r3, #0]
	binaryMessage.angle = uartRpiRxBuffer[4];
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	b25a      	sxtb	r2, r3
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <RPICom_DecodeBinaryMessage+0xa8>)
 8000738:	705a      	strb	r2, [r3, #1]
	binaryMessage.depth = ((uint16_t)uartRpiRxBuffer[5]+(uint16_t)(uartRpiRxBuffer[6]<<8));
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 8000742:	799b      	ldrb	r3, [r3, #6]
 8000744:	b29b      	uxth	r3, r3
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	b29b      	uxth	r3, r3
 800074a:	4413      	add	r3, r2
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <RPICom_DecodeBinaryMessage+0xa8>)
 8000750:	805a      	strh	r2, [r3, #2]
	binaryMessage.paquetNumber = uartRpiRxBuffer[7];
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 8000754:	79da      	ldrb	r2, [r3, #7]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <RPICom_DecodeBinaryMessage+0xa8>)
 8000758:	711a      	strb	r2, [r3, #4]

	//Checksum
	if (checkSum() !=  uartRpiRxBuffer[8]){
 800075a:	f7ff ffaf 	bl	80006bc <checkSum>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <RPICom_DecodeBinaryMessage+0xa4>)
 8000764:	7a1b      	ldrb	r3, [r3, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d002      	beq.n	8000770 <RPICom_DecodeBinaryMessage+0x78>
		error='3';
 800076a:	2333      	movs	r3, #51	; 0x33
 800076c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	//Response RPI
	char RPI_Response[50];
	sprintf(RPI_Response, "Paquet: %u\r\nStatut: %c\r\n", binaryMessage.paquetNumber,error);
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <RPICom_DecodeBinaryMessage+0xa8>)
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	461a      	mov	r2, r3
 8000776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800077a:	1d38      	adds	r0, r7, #4
 800077c:	4909      	ldr	r1, [pc, #36]	; (80007a4 <RPICom_DecodeBinaryMessage+0xac>)
 800077e:	f007 f8fd 	bl	800797c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)RPI_Response, sizeof(RPI_Response), 10);
 8000782:	1d39      	adds	r1, r7, #4
 8000784:	230a      	movs	r3, #10
 8000786:	2232      	movs	r2, #50	; 0x32
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <RPICom_DecodeBinaryMessage+0xb0>)
 800078a:	f004 fbe9 	bl	8004f60 <HAL_UART_Transmit>
	RPICom_UartActivate();
 800078e:	f7ff ff87 	bl	80006a0 <RPICom_UartActivate>
	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement


	//Process(&binaryMessage);
}
 8000792:	bf00      	nop
 8000794:	3738      	adds	r7, #56	; 0x38
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	24000090 	.word	0x24000090
 80007a0:	24000098 	.word	0x24000098
 80007a4:	08008270 	.word	0x08008270
 80007a8:	24000138 	.word	0x24000138

080007ac <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b80      	ldr	r3, [pc, #512]	; (80009c4 <MX_GPIO_Init+0x218>)
 80007c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c8:	4a7e      	ldr	r2, [pc, #504]	; (80009c4 <MX_GPIO_Init+0x218>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007d2:	4b7c      	ldr	r3, [pc, #496]	; (80009c4 <MX_GPIO_Init+0x218>)
 80007d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	623b      	str	r3, [r7, #32]
 80007de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e0:	4b78      	ldr	r3, [pc, #480]	; (80009c4 <MX_GPIO_Init+0x218>)
 80007e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e6:	4a77      	ldr	r2, [pc, #476]	; (80009c4 <MX_GPIO_Init+0x218>)
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f0:	4b74      	ldr	r3, [pc, #464]	; (80009c4 <MX_GPIO_Init+0x218>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b71      	ldr	r3, [pc, #452]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000800:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000804:	4a6f      	ldr	r2, [pc, #444]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800080e:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000810:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b69      	ldr	r3, [pc, #420]	; (80009c4 <MX_GPIO_Init+0x218>)
 800081e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000822:	4a68      	ldr	r2, [pc, #416]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082c:	4b65      	ldr	r3, [pc, #404]	; (80009c4 <MX_GPIO_Init+0x218>)
 800082e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b62      	ldr	r3, [pc, #392]	; (80009c4 <MX_GPIO_Init+0x218>)
 800083c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000840:	4a60      	ldr	r2, [pc, #384]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084a:	4b5e      	ldr	r3, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x218>)
 800084c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <MX_GPIO_Init+0x218>)
 800085a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085e:	4a59      	ldr	r2, [pc, #356]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000868:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <MX_GPIO_Init+0x218>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087c:	4a51      	ldr	r2, [pc, #324]	; (80009c4 <MX_GPIO_Init+0x218>)
 800087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000882:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000886:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000894:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <MX_GPIO_Init+0x218>)
 8000896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089a:	4a4a      	ldr	r2, [pc, #296]	; (80009c4 <MX_GPIO_Init+0x218>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a4:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <MX_GPIO_Init+0x218>)
 80008a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b8:	4843      	ldr	r0, [pc, #268]	; (80009c8 <MX_GPIO_Init+0x21c>)
 80008ba:	f001 fcd5 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f244 0101 	movw	r1, #16385	; 0x4001
 80008c4:	4841      	ldr	r0, [pc, #260]	; (80009cc <MX_GPIO_Init+0x220>)
 80008c6:	f001 fccf 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2102      	movs	r1, #2
 80008ce:	4840      	ldr	r0, [pc, #256]	; (80009d0 <MX_GPIO_Init+0x224>)
 80008d0:	f001 fcca 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	483a      	ldr	r0, [pc, #232]	; (80009d4 <MX_GPIO_Init+0x228>)
 80008ea:	f001 fb0d 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	4830      	ldr	r0, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x21c>)
 8000908:	f001 fafe 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800090c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4829      	ldr	r0, [pc, #164]	; (80009cc <MX_GPIO_Init+0x220>)
 8000926:	f001 faef 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	4826      	ldr	r0, [pc, #152]	; (80009d8 <MX_GPIO_Init+0x22c>)
 8000940:	f001 fae2 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4820      	ldr	r0, [pc, #128]	; (80009dc <MX_GPIO_Init+0x230>)
 800095a:	f001 fad5 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000970:	230a      	movs	r3, #10
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4818      	ldr	r0, [pc, #96]	; (80009dc <MX_GPIO_Init+0x230>)
 800097c:	f001 fac4 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000980:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <MX_GPIO_Init+0x230>)
 800099a:	f001 fab5 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099e:	2302      	movs	r3, #2
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_GPIO_Init+0x224>)
 80009b6:	f001 faa7 	bl	8001f08 <HAL_GPIO_Init>

}
 80009ba:	bf00      	nop
 80009bc:	3738      	adds	r7, #56	; 0x38
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	58024400 	.word	0x58024400
 80009c8:	58021400 	.word	0x58021400
 80009cc:	58020400 	.word	0x58020400
 80009d0:	58021000 	.word	0x58021000
 80009d4:	58020800 	.word	0x58020800
 80009d8:	58021800 	.word	0x58021800
 80009dc:	58020000 	.word	0x58020000

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fb66 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f828 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ec:	f7ff fede 	bl	80007ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009f0:	f000 f9e8 	bl	8000dc4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009f4:	f000 fb2c 	bl	8001050 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 80009f8:	f000 f998 	bl	8000d2c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "Starting...\r\n", 13, 10);
 80009fc:	230a      	movs	r3, #10
 80009fe:	220d      	movs	r2, #13
 8000a00:	490a      	ldr	r1, [pc, #40]	; (8000a2c <main+0x4c>)
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <main+0x50>)
 8000a04:	f004 faac 	bl	8004f60 <HAL_UART_Transmit>
	RPICom_Init();
 8000a08:	f7ff fe44 	bl	8000694 <RPICom_Init>
	HAL_UART_Transmit(&huart3, "Init Done\r\n", 11, 10);
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	220b      	movs	r2, #11
 8000a10:	4908      	ldr	r1, [pc, #32]	; (8000a34 <main+0x54>)
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <main+0x50>)
 8000a14:	f004 faa4 	bl	8004f60 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <main+0x58>)
 8000a1c:	f001 fc3d 	bl	800229a <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 8000a20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a24:	f000 fbd8 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000a28:	e7f6      	b.n	8000a18 <main+0x38>
 8000a2a:	bf00      	nop
 8000a2c:	0800828c 	.word	0x0800828c
 8000a30:	24000138 	.word	0x24000138
 8000a34:	0800829c 	.word	0x0800829c
 8000a38:	58020400 	.word	0x58020400

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b09c      	sub	sp, #112	; 0x70
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	224c      	movs	r2, #76	; 0x4c
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 ff8e 	bl	800796c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2220      	movs	r2, #32
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f006 ff88 	bl	800796c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <SystemClock_Config+0xe4>)
 8000a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a66:	2004      	movs	r0, #4
 8000a68:	f001 fc32 	bl	80022d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <SystemClock_Config+0xe8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a2b      	ldr	r2, [pc, #172]	; (8000b24 <SystemClock_Config+0xe8>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <SystemClock_Config+0xe8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a88:	bf00      	nop
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <SystemClock_Config+0xe8>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a96:	d1f8      	bne.n	8000a8a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a98:	2321      	movs	r3, #33	; 0x21
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ab2:	2318      	movs	r3, #24
 8000ab4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fc56 	bl	8002384 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ade:	f000 f823 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	233f      	movs	r3, #63	; 0x3f
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2102      	movs	r1, #2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f86e 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b12:	f000 f809 	bl	8000b28 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3770      	adds	r7, #112	; 0x70
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	58024400 	.word	0x58024400
 8000b24:	58024800 	.word	0x58024800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b40:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x30>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	58024400 	.word	0x58024400

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 faf0 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <UART4_IRQHandler+0x10>)
 8000bc2:	f004 faa7 	bl	8005114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	240000a4 	.word	0x240000a4

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f006 fe8a 	bl	8007918 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24100000 	.word	0x24100000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	240000a0 	.word	0x240000a0
 8000c38:	240001e0 	.word	0x240001e0

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c40:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <SystemInit+0xd0>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <SystemInit+0xd0>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <SystemInit+0xd4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d807      	bhi.n	8000c6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <SystemInit+0xd4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f023 030f 	bic.w	r3, r3, #15
 8000c64:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <SystemInit+0xd4>)
 8000c66:	f043 0303 	orr.w	r3, r3, #3
 8000c6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemInit+0xd8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <SystemInit+0xd8>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SystemInit+0xd8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <SystemInit+0xd8>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4924      	ldr	r1, [pc, #144]	; (8000d14 <SystemInit+0xd8>)
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <SystemInit+0xdc>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <SystemInit+0xd4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <SystemInit+0xd4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f023 030f 	bic.w	r3, r3, #15
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <SystemInit+0xd4>)
 8000ca0:	f043 0303 	orr.w	r3, r3, #3
 8000ca4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <SystemInit+0xd8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <SystemInit+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <SystemInit+0xd8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <SystemInit+0xd8>)
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <SystemInit+0xe0>)
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <SystemInit+0xd8>)
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <SystemInit+0xe4>)
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <SystemInit+0xd8>)
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <SystemInit+0xe8>)
 8000cc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <SystemInit+0xd8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <SystemInit+0xd8>)
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <SystemInit+0xe8>)
 8000cd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <SystemInit+0xd8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <SystemInit+0xd8>)
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <SystemInit+0xe8>)
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <SystemInit+0xd8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <SystemInit+0xd8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <SystemInit+0xd8>)
 8000cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <SystemInit+0xd8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <SystemInit+0xec>)
 8000cfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00
 8000d10:	52002000 	.word	0x52002000
 8000d14:	58024400 	.word	0x58024400
 8000d18:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d1c:	02020200 	.word	0x02020200
 8000d20:	01ff0000 	.word	0x01ff0000
 8000d24:	01010280 	.word	0x01010280
 8000d28:	52004000 	.word	0x52004000

08000d2c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <MX_UART4_Init+0x94>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d76:	f004 f8a3 	bl	8004ec0 <HAL_UART_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d80:	f7ff fed2 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d88:	f006 fcfb 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f7ff fec9 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4808      	ldr	r0, [pc, #32]	; (8000dbc <MX_UART4_Init+0x90>)
 8000d9a:	f006 fd30 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f7ff fec0 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_UART4_Init+0x90>)
 8000daa:	f006 fcb1 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000db4:	f7ff feb8 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	240000a4 	.word	0x240000a4
 8000dc0:	40004c00 	.word	0x40004c00

08000dc4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_USART3_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e0e:	f004 f857 	bl	8004ec0 <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f7ff fe86 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e20:	f006 fcaf 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f7ff fe7d 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e32:	f006 fce4 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f7ff fe74 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e42:	f006 fc65 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f7ff fe6c 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000138 	.word	0x24000138
 8000e58:	40004800 	.word	0x40004800

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0be      	sub	sp, #248	; 0xf8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	22c0      	movs	r2, #192	; 0xc0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 fd75 	bl	800796c <memset>
  if(uartHandle->Instance==UART4)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a63      	ldr	r2, [pc, #396]	; (8001014 <HAL_UART_MspInit+0x1b8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d172      	bne.n	8000f72 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e8c:	f04f 0202 	mov.w	r2, #2
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fa2c 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eae:	f7ff fe3b 	bl	8000b28 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eb2:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000eb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000eb8:	4a57      	ldr	r2, [pc, #348]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ebe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ec2:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000ec4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b51      	ldr	r3, [pc, #324]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000ed2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed6:	4a50      	ldr	r2, [pc, #320]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000ef0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef4:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000f00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f24:	2308      	movs	r3, #8
 8000f26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	483a      	ldr	r0, [pc, #232]	; (800101c <HAL_UART_MspInit+0x1c0>)
 8000f32:	f000 ffe9 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4831      	ldr	r0, [pc, #196]	; (8001020 <HAL_UART_MspInit+0x1c4>)
 8000f5c:	f000 ffd4 	bl	8001f08 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2034      	movs	r0, #52	; 0x34
 8000f66:	f000 fa36 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f6a:	2034      	movs	r0, #52	; 0x34
 8000f6c:	f000 fa4d 	bl	800140a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f70:	e04b      	b.n	800100a <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <HAL_UART_MspInit+0x1c8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d146      	bne.n	800100a <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f7c:	f04f 0202 	mov.w	r2, #2
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f9b4 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8000f9e:	f7ff fdc3 	bl	8000b28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000fa4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000faa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000fb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000fc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x1bc>)
 8000fd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001002:	4619      	mov	r1, r3
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <HAL_UART_MspInit+0x1c4>)
 8001006:	f000 ff7f 	bl	8001f08 <HAL_GPIO_Init>
}
 800100a:	bf00      	nop
 800100c:	37f8      	adds	r7, #248	; 0xf8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004c00 	.word	0x40004c00
 8001018:	58024400 	.word	0x58024400
 800101c:	58020000 	.word	0x58020000
 8001020:	58020c00 	.word	0x58020c00
 8001024:	40004800 	.word	0x40004800

08001028 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a05      	ldr	r2, [pc, #20]	; (800104c <HAL_UART_RxCpltCallback+0x24>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d103      	bne.n	8001042 <HAL_UART_RxCpltCallback+0x1a>
	{
		RPICom_DecodeBinaryMessage();
 800103a:	f7ff fb5d 	bl	80006f8 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate();
 800103e:	f7ff fb2f 	bl	80006a0 <RPICom_UartActivate>
	}
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004c00 	.word	0x40004c00

08001050 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001064:	f7ff fdea 	bl	8000c3c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800108e:	f006 fc49 	bl	8007924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fca5 	bl	80009e0 <main>
  bx  lr
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800109c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010a0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80010a4:	08008324 	.word	0x08008324
  ldr r2, =_sbss
 80010a8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80010ac:	240001e0 	.word	0x240001e0

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f980 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010c0:	f001 ff48 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_Init+0x68>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	4913      	ldr	r1, [pc, #76]	; (8001120 <HAL_Init+0x6c>)
 80010d2:	5ccb      	ldrb	r3, [r1, r3]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_Init+0x68>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_Init+0x6c>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_Init+0x70>)
 80010f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_Init+0x74>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f814 	bl	800112c <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e002      	b.n	8001114 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800110e:	f7ff fd11 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58024400 	.word	0x58024400
 8001120:	080082a8 	.word	0x080082a8
 8001124:	24000004 	.word	0x24000004
 8001128:	24000000 	.word	0x24000000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_InitTick+0x60>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e021      	b.n	8001184 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_InitTick+0x64>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_InitTick+0x60>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f965 	bl	8001426 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001174:	f000 f92f 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x68>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2400000c 	.word	0x2400000c
 8001190:	24000000 	.word	0x24000000
 8001194:	24000008 	.word	0x24000008

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2400000c 	.word	0x2400000c
 80011bc:	240001cc 	.word	0x240001cc

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	240001cc 	.word	0x240001cc

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2400000c 	.word	0x2400000c

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	4313      	orrs	r3, r2
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	05fa0000 	.word	0x05fa0000

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff40 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff90 	bl	8001314 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5f 	bl	80012c0 <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff33 	bl	8001284 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa4 	bl	800137c <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff feba 	bl	80011c0 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e2dc      	b.n	8001a12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d008      	beq.n	8001476 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e2cd      	b.n	8001a12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a76      	ldr	r2, [pc, #472]	; (8001654 <HAL_DMA_Abort+0x214>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d04a      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a74      	ldr	r2, [pc, #464]	; (8001658 <HAL_DMA_Abort+0x218>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d045      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a73      	ldr	r2, [pc, #460]	; (800165c <HAL_DMA_Abort+0x21c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d040      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a71      	ldr	r2, [pc, #452]	; (8001660 <HAL_DMA_Abort+0x220>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d03b      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a70      	ldr	r2, [pc, #448]	; (8001664 <HAL_DMA_Abort+0x224>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d036      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_DMA_Abort+0x228>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d031      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6d      	ldr	r2, [pc, #436]	; (800166c <HAL_DMA_Abort+0x22c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d02c      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a6b      	ldr	r2, [pc, #428]	; (8001670 <HAL_DMA_Abort+0x230>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d027      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6a      	ldr	r2, [pc, #424]	; (8001674 <HAL_DMA_Abort+0x234>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d022      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a68      	ldr	r2, [pc, #416]	; (8001678 <HAL_DMA_Abort+0x238>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01d      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a67      	ldr	r2, [pc, #412]	; (800167c <HAL_DMA_Abort+0x23c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d018      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a65      	ldr	r2, [pc, #404]	; (8001680 <HAL_DMA_Abort+0x240>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a64      	ldr	r2, [pc, #400]	; (8001684 <HAL_DMA_Abort+0x244>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00e      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a62      	ldr	r2, [pc, #392]	; (8001688 <HAL_DMA_Abort+0x248>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d009      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a61      	ldr	r2, [pc, #388]	; (800168c <HAL_DMA_Abort+0x24c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d004      	beq.n	8001516 <HAL_DMA_Abort+0xd6>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a5f      	ldr	r2, [pc, #380]	; (8001690 <HAL_DMA_Abort+0x250>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_DMA_Abort+0xda>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_DMA_Abort+0xdc>
 800151a:	2300      	movs	r3, #0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 021e 	bic.w	r2, r2, #30
 800152e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800153e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e00a      	b.n	800155e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 020e 	bic.w	r2, r2, #14
 8001556:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a3c      	ldr	r2, [pc, #240]	; (8001654 <HAL_DMA_Abort+0x214>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d072      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a3a      	ldr	r2, [pc, #232]	; (8001658 <HAL_DMA_Abort+0x218>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d06d      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a39      	ldr	r2, [pc, #228]	; (800165c <HAL_DMA_Abort+0x21c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d068      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a37      	ldr	r2, [pc, #220]	; (8001660 <HAL_DMA_Abort+0x220>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d063      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a36      	ldr	r2, [pc, #216]	; (8001664 <HAL_DMA_Abort+0x224>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d05e      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a34      	ldr	r2, [pc, #208]	; (8001668 <HAL_DMA_Abort+0x228>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d059      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a33      	ldr	r2, [pc, #204]	; (800166c <HAL_DMA_Abort+0x22c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d054      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DMA_Abort+0x230>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d04f      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <HAL_DMA_Abort+0x234>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d04a      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <HAL_DMA_Abort+0x238>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d045      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a2d      	ldr	r2, [pc, #180]	; (800167c <HAL_DMA_Abort+0x23c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d040      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <HAL_DMA_Abort+0x240>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d03b      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <HAL_DMA_Abort+0x244>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d036      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a28      	ldr	r2, [pc, #160]	; (8001688 <HAL_DMA_Abort+0x248>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d031      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a27      	ldr	r2, [pc, #156]	; (800168c <HAL_DMA_Abort+0x24c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d02c      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <HAL_DMA_Abort+0x250>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d027      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a24      	ldr	r2, [pc, #144]	; (8001694 <HAL_DMA_Abort+0x254>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d022      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <HAL_DMA_Abort+0x258>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01d      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a21      	ldr	r2, [pc, #132]	; (800169c <HAL_DMA_Abort+0x25c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d018      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_DMA_Abort+0x260>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <HAL_DMA_Abort+0x264>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00e      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_DMA_Abort+0x268>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d009      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_DMA_Abort+0x26c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d004      	beq.n	800164e <HAL_DMA_Abort+0x20e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_DMA_Abort+0x270>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d132      	bne.n	80016b4 <HAL_DMA_Abort+0x274>
 800164e:	2301      	movs	r3, #1
 8001650:	e031      	b.n	80016b6 <HAL_DMA_Abort+0x276>
 8001652:	bf00      	nop
 8001654:	40020010 	.word	0x40020010
 8001658:	40020028 	.word	0x40020028
 800165c:	40020040 	.word	0x40020040
 8001660:	40020058 	.word	0x40020058
 8001664:	40020070 	.word	0x40020070
 8001668:	40020088 	.word	0x40020088
 800166c:	400200a0 	.word	0x400200a0
 8001670:	400200b8 	.word	0x400200b8
 8001674:	40020410 	.word	0x40020410
 8001678:	40020428 	.word	0x40020428
 800167c:	40020440 	.word	0x40020440
 8001680:	40020458 	.word	0x40020458
 8001684:	40020470 	.word	0x40020470
 8001688:	40020488 	.word	0x40020488
 800168c:	400204a0 	.word	0x400204a0
 8001690:	400204b8 	.word	0x400204b8
 8001694:	58025408 	.word	0x58025408
 8001698:	5802541c 	.word	0x5802541c
 800169c:	58025430 	.word	0x58025430
 80016a0:	58025444 	.word	0x58025444
 80016a4:	58025458 	.word	0x58025458
 80016a8:	5802546c 	.word	0x5802546c
 80016ac:	58025480 	.word	0x58025480
 80016b0:	58025494 	.word	0x58025494
 80016b4:	2300      	movs	r3, #0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6d      	ldr	r2, [pc, #436]	; (8001884 <HAL_DMA_Abort+0x444>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d04a      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6b      	ldr	r2, [pc, #428]	; (8001888 <HAL_DMA_Abort+0x448>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d045      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6a      	ldr	r2, [pc, #424]	; (800188c <HAL_DMA_Abort+0x44c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d040      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a68      	ldr	r2, [pc, #416]	; (8001890 <HAL_DMA_Abort+0x450>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d03b      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a67      	ldr	r2, [pc, #412]	; (8001894 <HAL_DMA_Abort+0x454>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d036      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a65      	ldr	r2, [pc, #404]	; (8001898 <HAL_DMA_Abort+0x458>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d031      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a64      	ldr	r2, [pc, #400]	; (800189c <HAL_DMA_Abort+0x45c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d02c      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a62      	ldr	r2, [pc, #392]	; (80018a0 <HAL_DMA_Abort+0x460>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d027      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a61      	ldr	r2, [pc, #388]	; (80018a4 <HAL_DMA_Abort+0x464>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d022      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a5f      	ldr	r2, [pc, #380]	; (80018a8 <HAL_DMA_Abort+0x468>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d01d      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_DMA_Abort+0x46c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d018      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a5c      	ldr	r2, [pc, #368]	; (80018b0 <HAL_DMA_Abort+0x470>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_DMA_Abort+0x474>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00e      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a59      	ldr	r2, [pc, #356]	; (80018b8 <HAL_DMA_Abort+0x478>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d009      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_DMA_Abort+0x47c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d004      	beq.n	800176a <HAL_DMA_Abort+0x32a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a56      	ldr	r2, [pc, #344]	; (80018c0 <HAL_DMA_Abort+0x480>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d108      	bne.n	800177c <HAL_DMA_Abort+0x33c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_DMA_Abort+0x34c>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800178c:	e013      	b.n	80017b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800178e:	f7ff fd17 	bl	80011c0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b05      	cmp	r3, #5
 800179a:	d90c      	bls.n	80017b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2220      	movs	r2, #32
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e12d      	b.n	8001a12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e5      	bne.n	800178e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2f      	ldr	r2, [pc, #188]	; (8001884 <HAL_DMA_Abort+0x444>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04a      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <HAL_DMA_Abort+0x448>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d045      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2c      	ldr	r2, [pc, #176]	; (800188c <HAL_DMA_Abort+0x44c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d040      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <HAL_DMA_Abort+0x450>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d03b      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <HAL_DMA_Abort+0x454>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d036      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a27      	ldr	r2, [pc, #156]	; (8001898 <HAL_DMA_Abort+0x458>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d031      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_DMA_Abort+0x45c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d02c      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <HAL_DMA_Abort+0x460>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d027      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_DMA_Abort+0x464>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d022      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_DMA_Abort+0x468>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01d      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a20      	ldr	r2, [pc, #128]	; (80018ac <HAL_DMA_Abort+0x46c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d018      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_DMA_Abort+0x470>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_DMA_Abort+0x474>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <HAL_DMA_Abort+0x478>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <HAL_DMA_Abort+0x47c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d004      	beq.n	8001862 <HAL_DMA_Abort+0x422>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_DMA_Abort+0x480>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_DMA_Abort+0x426>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_DMA_Abort+0x428>
 8001866:	2300      	movs	r3, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d02b      	beq.n	80018c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	223f      	movs	r2, #63	; 0x3f
 800187c:	409a      	lsls	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	e02a      	b.n	80018da <HAL_DMA_Abort+0x49a>
 8001884:	40020010 	.word	0x40020010
 8001888:	40020028 	.word	0x40020028
 800188c:	40020040 	.word	0x40020040
 8001890:	40020058 	.word	0x40020058
 8001894:	40020070 	.word	0x40020070
 8001898:	40020088 	.word	0x40020088
 800189c:	400200a0 	.word	0x400200a0
 80018a0:	400200b8 	.word	0x400200b8
 80018a4:	40020410 	.word	0x40020410
 80018a8:	40020428 	.word	0x40020428
 80018ac:	40020440 	.word	0x40020440
 80018b0:	40020458 	.word	0x40020458
 80018b4:	40020470 	.word	0x40020470
 80018b8:	40020488 	.word	0x40020488
 80018bc:	400204a0 	.word	0x400204a0
 80018c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	2201      	movs	r2, #1
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a4f      	ldr	r2, [pc, #316]	; (8001a1c <HAL_DMA_Abort+0x5dc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d072      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a4d      	ldr	r2, [pc, #308]	; (8001a20 <HAL_DMA_Abort+0x5e0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d06d      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <HAL_DMA_Abort+0x5e4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d068      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4a      	ldr	r2, [pc, #296]	; (8001a28 <HAL_DMA_Abort+0x5e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d063      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a49      	ldr	r2, [pc, #292]	; (8001a2c <HAL_DMA_Abort+0x5ec>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d05e      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <HAL_DMA_Abort+0x5f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d059      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a46      	ldr	r2, [pc, #280]	; (8001a34 <HAL_DMA_Abort+0x5f4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d054      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a44      	ldr	r2, [pc, #272]	; (8001a38 <HAL_DMA_Abort+0x5f8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d04f      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <HAL_DMA_Abort+0x5fc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <HAL_DMA_Abort+0x600>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <HAL_DMA_Abort+0x604>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3e      	ldr	r2, [pc, #248]	; (8001a48 <HAL_DMA_Abort+0x608>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a3d      	ldr	r2, [pc, #244]	; (8001a4c <HAL_DMA_Abort+0x60c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <HAL_DMA_Abort+0x610>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_DMA_Abort+0x614>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a38      	ldr	r2, [pc, #224]	; (8001a58 <HAL_DMA_Abort+0x618>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <HAL_DMA_Abort+0x61c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a35      	ldr	r2, [pc, #212]	; (8001a60 <HAL_DMA_Abort+0x620>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <HAL_DMA_Abort+0x624>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_DMA_Abort+0x628>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <HAL_DMA_Abort+0x62c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2f      	ldr	r2, [pc, #188]	; (8001a70 <HAL_DMA_Abort+0x630>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <HAL_DMA_Abort+0x634>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <HAL_DMA_Abort+0x58a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <HAL_DMA_Abort+0x638>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_DMA_Abort+0x58e>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_DMA_Abort+0x590>
 80019ce:	2300      	movs	r3, #0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d015      	beq.n	8001a00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00c      	beq.n	8001a00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40020010 	.word	0x40020010
 8001a20:	40020028 	.word	0x40020028
 8001a24:	40020040 	.word	0x40020040
 8001a28:	40020058 	.word	0x40020058
 8001a2c:	40020070 	.word	0x40020070
 8001a30:	40020088 	.word	0x40020088
 8001a34:	400200a0 	.word	0x400200a0
 8001a38:	400200b8 	.word	0x400200b8
 8001a3c:	40020410 	.word	0x40020410
 8001a40:	40020428 	.word	0x40020428
 8001a44:	40020440 	.word	0x40020440
 8001a48:	40020458 	.word	0x40020458
 8001a4c:	40020470 	.word	0x40020470
 8001a50:	40020488 	.word	0x40020488
 8001a54:	400204a0 	.word	0x400204a0
 8001a58:	400204b8 	.word	0x400204b8
 8001a5c:	58025408 	.word	0x58025408
 8001a60:	5802541c 	.word	0x5802541c
 8001a64:	58025430 	.word	0x58025430
 8001a68:	58025444 	.word	0x58025444
 8001a6c:	58025458 	.word	0x58025458
 8001a70:	5802546c 	.word	0x5802546c
 8001a74:	58025480 	.word	0x58025480
 8001a78:	58025494 	.word	0x58025494

08001a7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e237      	b.n	8001efe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d004      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e22c      	b.n	8001efe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5c      	ldr	r2, [pc, #368]	; (8001c1c <HAL_DMA_Abort_IT+0x1a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d04a      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	; (8001c20 <HAL_DMA_Abort_IT+0x1a4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d045      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a59      	ldr	r2, [pc, #356]	; (8001c24 <HAL_DMA_Abort_IT+0x1a8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d040      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_DMA_Abort_IT+0x1ac>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d03b      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <HAL_DMA_Abort_IT+0x1b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d036      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a55      	ldr	r2, [pc, #340]	; (8001c30 <HAL_DMA_Abort_IT+0x1b4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d031      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a53      	ldr	r2, [pc, #332]	; (8001c34 <HAL_DMA_Abort_IT+0x1b8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d02c      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_DMA_Abort_IT+0x1bc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d027      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a50      	ldr	r2, [pc, #320]	; (8001c3c <HAL_DMA_Abort_IT+0x1c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d022      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_DMA_Abort_IT+0x1c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d01d      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4d      	ldr	r2, [pc, #308]	; (8001c44 <HAL_DMA_Abort_IT+0x1c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d018      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a4c      	ldr	r2, [pc, #304]	; (8001c48 <HAL_DMA_Abort_IT+0x1cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_DMA_Abort_IT+0x1d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00e      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_DMA_Abort_IT+0x1d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <HAL_DMA_Abort_IT+0x1d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <HAL_DMA_Abort_IT+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA_Abort_IT+0xcc>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_DMA_Abort_IT+0xce>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8086 	beq.w	8001c5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2204      	movs	r2, #4
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2f      	ldr	r2, [pc, #188]	; (8001c1c <HAL_DMA_Abort_IT+0x1a0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d04a      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2e      	ldr	r2, [pc, #184]	; (8001c20 <HAL_DMA_Abort_IT+0x1a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d045      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <HAL_DMA_Abort_IT+0x1a8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d040      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <HAL_DMA_Abort_IT+0x1ac>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d03b      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_DMA_Abort_IT+0x1b0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d036      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <HAL_DMA_Abort_IT+0x1b4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d031      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <HAL_DMA_Abort_IT+0x1b8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02c      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <HAL_DMA_Abort_IT+0x1bc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d027      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_DMA_Abort_IT+0x1c0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d022      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_DMA_Abort_IT+0x1c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d01d      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a20      	ldr	r2, [pc, #128]	; (8001c44 <HAL_DMA_Abort_IT+0x1c8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d018      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_DMA_Abort_IT+0x1cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_DMA_Abort_IT+0x1d0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_DMA_Abort_IT+0x1d4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_DMA_Abort_IT+0x1d8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_DMA_Abort_IT+0x1dc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <HAL_DMA_Abort_IT+0x18e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e178      	b.n	8001efc <HAL_DMA_Abort_IT+0x480>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e16f      	b.n	8001efc <HAL_DMA_Abort_IT+0x480>
 8001c1c:	40020010 	.word	0x40020010
 8001c20:	40020028 	.word	0x40020028
 8001c24:	40020040 	.word	0x40020040
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	40020070 	.word	0x40020070
 8001c30:	40020088 	.word	0x40020088
 8001c34:	400200a0 	.word	0x400200a0
 8001c38:	400200b8 	.word	0x400200b8
 8001c3c:	40020410 	.word	0x40020410
 8001c40:	40020428 	.word	0x40020428
 8001c44:	40020440 	.word	0x40020440
 8001c48:	40020458 	.word	0x40020458
 8001c4c:	40020470 	.word	0x40020470
 8001c50:	40020488 	.word	0x40020488
 8001c54:	400204a0 	.word	0x400204a0
 8001c58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6c      	ldr	r2, [pc, #432]	; (8001e24 <HAL_DMA_Abort_IT+0x3a8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04a      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6b      	ldr	r2, [pc, #428]	; (8001e28 <HAL_DMA_Abort_IT+0x3ac>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d045      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_DMA_Abort_IT+0x3b0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a68      	ldr	r2, [pc, #416]	; (8001e30 <HAL_DMA_Abort_IT+0x3b4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d03b      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a66      	ldr	r2, [pc, #408]	; (8001e34 <HAL_DMA_Abort_IT+0x3b8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a65      	ldr	r2, [pc, #404]	; (8001e38 <HAL_DMA_Abort_IT+0x3bc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d031      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a63      	ldr	r2, [pc, #396]	; (8001e3c <HAL_DMA_Abort_IT+0x3c0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02c      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a62      	ldr	r2, [pc, #392]	; (8001e40 <HAL_DMA_Abort_IT+0x3c4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d027      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a60      	ldr	r2, [pc, #384]	; (8001e44 <HAL_DMA_Abort_IT+0x3c8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d022      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5f      	ldr	r2, [pc, #380]	; (8001e48 <HAL_DMA_Abort_IT+0x3cc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01d      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a5d      	ldr	r2, [pc, #372]	; (8001e4c <HAL_DMA_Abort_IT+0x3d0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5c      	ldr	r2, [pc, #368]	; (8001e50 <HAL_DMA_Abort_IT+0x3d4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5a      	ldr	r2, [pc, #360]	; (8001e54 <HAL_DMA_Abort_IT+0x3d8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a59      	ldr	r2, [pc, #356]	; (8001e58 <HAL_DMA_Abort_IT+0x3dc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <HAL_DMA_Abort_IT+0x3e0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a56      	ldr	r2, [pc, #344]	; (8001e60 <HAL_DMA_Abort_IT+0x3e4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d108      	bne.n	8001d1e <HAL_DMA_Abort_IT+0x2a2>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e007      	b.n	8001d2e <HAL_DMA_Abort_IT+0x2b2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a3c      	ldr	r2, [pc, #240]	; (8001e24 <HAL_DMA_Abort_IT+0x3a8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d072      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <HAL_DMA_Abort_IT+0x3ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d06d      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a39      	ldr	r2, [pc, #228]	; (8001e2c <HAL_DMA_Abort_IT+0x3b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d068      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <HAL_DMA_Abort_IT+0x3b4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d063      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a36      	ldr	r2, [pc, #216]	; (8001e34 <HAL_DMA_Abort_IT+0x3b8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_DMA_Abort_IT+0x3bc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d059      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <HAL_DMA_Abort_IT+0x3c0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d054      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <HAL_DMA_Abort_IT+0x3c4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d04f      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a30      	ldr	r2, [pc, #192]	; (8001e44 <HAL_DMA_Abort_IT+0x3c8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04a      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <HAL_DMA_Abort_IT+0x3cc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d045      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_DMA_Abort_IT+0x3d0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d040      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <HAL_DMA_Abort_IT+0x3d4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d03b      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <HAL_DMA_Abort_IT+0x3d8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d036      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <HAL_DMA_Abort_IT+0x3dc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d031      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <HAL_DMA_Abort_IT+0x3e0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d02c      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <HAL_DMA_Abort_IT+0x3e4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d027      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_DMA_Abort_IT+0x3e8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <HAL_DMA_Abort_IT+0x3ec>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01d      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <HAL_DMA_Abort_IT+0x3f0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_DMA_Abort_IT+0x3f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <HAL_DMA_Abort_IT+0x3f8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00e      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_DMA_Abort_IT+0x3fc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_DMA_Abort_IT+0x400>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_DMA_Abort_IT+0x404>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d132      	bne.n	8001e84 <HAL_DMA_Abort_IT+0x408>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e031      	b.n	8001e86 <HAL_DMA_Abort_IT+0x40a>
 8001e22:	bf00      	nop
 8001e24:	40020010 	.word	0x40020010
 8001e28:	40020028 	.word	0x40020028
 8001e2c:	40020040 	.word	0x40020040
 8001e30:	40020058 	.word	0x40020058
 8001e34:	40020070 	.word	0x40020070
 8001e38:	40020088 	.word	0x40020088
 8001e3c:	400200a0 	.word	0x400200a0
 8001e40:	400200b8 	.word	0x400200b8
 8001e44:	40020410 	.word	0x40020410
 8001e48:	40020428 	.word	0x40020428
 8001e4c:	40020440 	.word	0x40020440
 8001e50:	40020458 	.word	0x40020458
 8001e54:	40020470 	.word	0x40020470
 8001e58:	40020488 	.word	0x40020488
 8001e5c:	400204a0 	.word	0x400204a0
 8001e60:	400204b8 	.word	0x400204b8
 8001e64:	58025408 	.word	0x58025408
 8001e68:	5802541c 	.word	0x5802541c
 8001e6c:	58025430 	.word	0x58025430
 8001e70:	58025444 	.word	0x58025444
 8001e74:	58025458 	.word	0x58025458
 8001e78:	5802546c 	.word	0x5802546c
 8001e7c:	58025480 	.word	0x58025480
 8001e80:	58025494 	.word	0x58025494
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d028      	beq.n	8001edc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001eb8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001eda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_GPIO_Init+0x234>)
 8001f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f1a:	e194      	b.n	8002246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8186 	beq.w	8002240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d005      	beq.n	8001f4c <HAL_GPIO_Init+0x44>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d130      	bne.n	8001fae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f82:	2201      	movs	r2, #1
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 0201 	and.w	r2, r3, #1
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d017      	beq.n	8001fea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d123      	bne.n	800203e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	69b9      	ldr	r1, [r7, #24]
 800203a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0203 	and.w	r2, r3, #3
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80e0 	beq.w	8002240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x238>)
 8002082:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002086:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_GPIO_Init+0x238>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_GPIO_Init+0x238>)
 8002092:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209e:	4a29      	ldr	r2, [pc, #164]	; (8002144 <HAL_GPIO_Init+0x23c>)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_GPIO_Init+0x240>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d052      	beq.n	8002170 <HAL_GPIO_Init+0x268>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_GPIO_Init+0x244>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d031      	beq.n	8002136 <HAL_GPIO_Init+0x22e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_GPIO_Init+0x248>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02b      	beq.n	8002132 <HAL_GPIO_Init+0x22a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_GPIO_Init+0x24c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x226>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_GPIO_Init+0x250>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x222>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_GPIO_Init+0x254>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x21e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_GPIO_Init+0x258>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_GPIO_Init+0x25c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x216>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_GPIO_Init+0x260>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x212>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_GPIO_Init+0x264>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x20e>
 8002112:	2309      	movs	r3, #9
 8002114:	e02d      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002116:	230a      	movs	r3, #10
 8002118:	e02b      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800211a:	2308      	movs	r3, #8
 800211c:	e029      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800211e:	2307      	movs	r3, #7
 8002120:	e027      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002122:	2306      	movs	r3, #6
 8002124:	e025      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002126:	2305      	movs	r3, #5
 8002128:	e023      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800212a:	2304      	movs	r3, #4
 800212c:	e021      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800212e:	2303      	movs	r3, #3
 8002130:	e01f      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002132:	2302      	movs	r3, #2
 8002134:	e01d      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 8002136:	2301      	movs	r3, #1
 8002138:	e01b      	b.n	8002172 <HAL_GPIO_Init+0x26a>
 800213a:	bf00      	nop
 800213c:	58000080 	.word	0x58000080
 8002140:	58024400 	.word	0x58024400
 8002144:	58000400 	.word	0x58000400
 8002148:	58020000 	.word	0x58020000
 800214c:	58020400 	.word	0x58020400
 8002150:	58020800 	.word	0x58020800
 8002154:	58020c00 	.word	0x58020c00
 8002158:	58021000 	.word	0x58021000
 800215c:	58021400 	.word	0x58021400
 8002160:	58021800 	.word	0x58021800
 8002164:	58021c00 	.word	0x58021c00
 8002168:	58022000 	.word	0x58022000
 800216c:	58022400 	.word	0x58022400
 8002170:	2300      	movs	r3, #0
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	f002 0203 	and.w	r2, r2, #3
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	4093      	lsls	r3, r2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002182:	4938      	ldr	r1, [pc, #224]	; (8002264 <HAL_GPIO_Init+0x35c>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f ae63 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	3724      	adds	r7, #36	; 0x24
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	58000400 	.word	0x58000400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002284:	e003      	b.n	800228e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	619a      	str	r2, [r3, #24]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	041a      	lsls	r2, r3, #16
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	887b      	ldrh	r3, [r7, #2]
 80022ba:	400b      	ands	r3, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	d00a      	beq.n	80022fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e040      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e03e      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002302:	491f      	ldr	r1, [pc, #124]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800230a:	f7fe ff59 	bl	80011c0 <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002310:	e009      	b.n	8002326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002312:	f7fe ff55 	bl	80011c0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002320:	d901      	bls.n	8002326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e028      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	d1ee      	bne.n	8002312 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b1e      	cmp	r3, #30
 8002338:	d008      	beq.n	800234c <HAL_PWREx_ConfigSupply+0x7c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b2e      	cmp	r3, #46	; 0x2e
 800233e:	d005      	beq.n	800234c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b1d      	cmp	r3, #29
 8002344:	d002      	beq.n	800234c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b2d      	cmp	r3, #45	; 0x2d
 800234a:	d114      	bne.n	8002376 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800234c:	f7fe ff38 	bl	80011c0 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002352:	e009      	b.n	8002368 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002354:	f7fe ff34 	bl	80011c0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002362:	d901      	bls.n	8002368 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e007      	b.n	8002378 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_PWREx_ConfigSupply+0xb0>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d1ee      	bne.n	8002354 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	58024800 	.word	0x58024800

08002384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	f000 bc1f 	b.w	8002bd6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80b3 	beq.w	800250c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4b95      	ldr	r3, [pc, #596]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b0:	4b92      	ldr	r3, [pc, #584]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d007      	beq.n	80023cc <HAL_RCC_OscConfig+0x48>
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	2b18      	cmp	r3, #24
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x64>
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	4b8b      	ldr	r3, [pc, #556]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8098 	beq.w	800250a <HAL_RCC_OscConfig+0x186>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8093 	bne.w	800250a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e3f6      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x7c>
 80023f2:	4b82      	ldr	r3, [pc, #520]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a81      	ldr	r2, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e058      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d112      	bne.n	800242e <HAL_RCC_OscConfig+0xaa>
 8002408:	4b7c      	ldr	r3, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7b      	ldr	r2, [pc, #492]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b79      	ldr	r3, [pc, #484]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a78      	ldr	r2, [pc, #480]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800241a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e041      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002436:	d112      	bne.n	800245e <HAL_RCC_OscConfig+0xda>
 8002438:	4b70      	ldr	r3, [pc, #448]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a6f      	ldr	r2, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800243e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800244a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e029      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002466:	d112      	bne.n	800248e <HAL_RCC_OscConfig+0x10a>
 8002468:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a63      	ldr	r2, [pc, #396]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800246e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b61      	ldr	r3, [pc, #388]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a60      	ldr	r2, [pc, #384]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800247a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5d      	ldr	r2, [pc, #372]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e011      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a5a      	ldr	r2, [pc, #360]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a57      	ldr	r2, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b55      	ldr	r3, [pc, #340]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a54      	ldr	r2, [pc, #336]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80024ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d013      	beq.n	80024e2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fe81 	bl	80011c0 <HAL_GetTick>
 80024be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c2:	f7fe fe7d 	bl	80011c0 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e380      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d4:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x13e>
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fe6d 	bl	80011c0 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ea:	f7fe fe69 	bl	80011c0 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e36c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x166>
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 808c 	beq.w	8002632 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002522:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_RCC_OscConfig+0x1bc>
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	2b18      	cmp	r3, #24
 8002534:	d137      	bne.n	80025a6 <HAL_RCC_OscConfig+0x222>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d132      	bne.n	80025a6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002540:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x1d4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e33e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 0219 	bic.w	r2, r3, #25
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4925      	ldr	r1, [pc, #148]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fe29 	bl	80011c0 <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7fe fe25 	bl	80011c0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e328      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	4917      	ldr	r1, [pc, #92]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	e045      	b.n	8002632 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d028      	beq.n	8002600 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0219 	bic.w	r2, r3, #25
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fdfe 	bl	80011c0 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7fe fdfa 	bl	80011c0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e2fd      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	4901      	ldr	r1, [pc, #4]	; (80025fc <HAL_RCC_OscConfig+0x278>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
 80025fa:	e01a      	b.n	8002632 <HAL_RCC_OscConfig+0x2ae>
 80025fc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002600:	4b97      	ldr	r3, [pc, #604]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a96      	ldr	r2, [pc, #600]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fdd8 	bl	80011c0 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe fdd4 	bl	80011c0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e2d7      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002626:	4b8e      	ldr	r3, [pc, #568]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d06a      	beq.n	8002714 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800263e:	4b88      	ldr	r3, [pc, #544]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002646:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002648:	4b85      	ldr	r3, [pc, #532]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d007      	beq.n	8002664 <HAL_RCC_OscConfig+0x2e0>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b18      	cmp	r3, #24
 8002658:	d11b      	bne.n	8002692 <HAL_RCC_OscConfig+0x30e>
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d116      	bne.n	8002692 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002664:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_OscConfig+0x2f8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e2ac      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800267c:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	4975      	ldr	r1, [pc, #468]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002690:	e040      	b.n	8002714 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d023      	beq.n	80026e2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800269a:	4b71      	ldr	r3, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a70      	ldr	r2, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80026a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7fe fd8b 	bl	80011c0 <HAL_GetTick>
 80026aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026ae:	f7fe fd87 	bl	80011c0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e28a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026c0:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026cc:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	4961      	ldr	r1, [pc, #388]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
 80026e0:	e018      	b.n	8002714 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026e2:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a5e      	ldr	r2, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80026e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe fd67 	bl	80011c0 <HAL_GetTick>
 80026f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026f6:	f7fe fd63 	bl	80011c0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e266      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002708:	4b55      	ldr	r3, [pc, #340]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d036      	beq.n	800278e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d019      	beq.n	800275c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fd44 	bl	80011c0 <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe fd40 	bl	80011c0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e243      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800274e:	4b44      	ldr	r3, [pc, #272]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x3b8>
 800275a:	e018      	b.n	800278e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b40      	ldr	r3, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	4a3f      	ldr	r2, [pc, #252]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fd2a 	bl	80011c0 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe fd26 	bl	80011c0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e229      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d036      	beq.n	8002808 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d019      	beq.n	80027d6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a2:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80027a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fd07 	bl	80011c0 <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b6:	f7fe fd03 	bl	80011c0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e206      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x432>
 80027d4:	e018      	b.n	8002808 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80027dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027e2:	f7fe fced 	bl	80011c0 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ea:	f7fe fce9 	bl	80011c0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1ec      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80af 	beq.w	8002974 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCC_OscConfig+0x4e0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_RCC_OscConfig+0x4e0>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002822:	f7fe fccd 	bl	80011c0 <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fcc9 	bl	80011c0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1cc      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x4e0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x4e4>
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a02      	ldr	r2, [pc, #8]	; (8002860 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
 800285c:	e05b      	b.n	8002916 <HAL_RCC_OscConfig+0x592>
 800285e:	bf00      	nop
 8002860:	58024400 	.word	0x58024400
 8002864:	58024800 	.word	0x58024800
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d112      	bne.n	8002896 <HAL_RCC_OscConfig+0x512>
 8002870:	4b9d      	ldr	r3, [pc, #628]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a9c      	ldr	r2, [pc, #624]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	4b9a      	ldr	r3, [pc, #616]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a99      	ldr	r2, [pc, #612]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	4b97      	ldr	r3, [pc, #604]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a96      	ldr	r2, [pc, #600]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
 8002894:	e03f      	b.n	8002916 <HAL_RCC_OscConfig+0x592>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x540>
 800289e:	4b92      	ldr	r3, [pc, #584]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a91      	ldr	r2, [pc, #580]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	4b8f      	ldr	r3, [pc, #572]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a8e      	ldr	r2, [pc, #568]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
 80028b6:	4b8c      	ldr	r3, [pc, #560]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a8b      	ldr	r2, [pc, #556]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	e028      	b.n	8002916 <HAL_RCC_OscConfig+0x592>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b85      	cmp	r3, #133	; 0x85
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_OscConfig+0x56e>
 80028cc:	4b86      	ldr	r3, [pc, #536]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	4a85      	ldr	r2, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6713      	str	r3, [r2, #112]	; 0x70
 80028d8:	4b83      	ldr	r3, [pc, #524]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	4a82      	ldr	r2, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e2:	6713      	str	r3, [r2, #112]	; 0x70
 80028e4:	4b80      	ldr	r3, [pc, #512]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a7f      	ldr	r2, [pc, #508]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	e011      	b.n	8002916 <HAL_RCC_OscConfig+0x592>
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a7c      	ldr	r2, [pc, #496]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	4b7a      	ldr	r3, [pc, #488]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a79      	ldr	r2, [pc, #484]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b77      	ldr	r3, [pc, #476]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a76      	ldr	r2, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fc4f 	bl	80011c0 <HAL_GetTick>
 8002922:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fc4b 	bl	80011c0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e14c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x5a2>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe fc39 	bl	80011c0 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fc35 	bl	80011c0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e136      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002968:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 812b 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800297e:	4b5a      	ldr	r3, [pc, #360]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002986:	2b18      	cmp	r3, #24
 8002988:	f000 80bb 	beq.w	8002b02 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b02      	cmp	r3, #2
 8002992:	f040 8095 	bne.w	8002ac0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a53      	ldr	r2, [pc, #332]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 800299c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fc0d 	bl	80011c0 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fc09 	bl	80011c0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e10c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029bc:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c8:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80029ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029cc:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_OscConfig+0x768>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	430a      	orrs	r2, r1
 80029dc:	4942      	ldr	r1, [pc, #264]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	628b      	str	r3, [r1, #40]	; 0x28
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	3b01      	subs	r3, #1
 80029e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	3b01      	subs	r3, #1
 80029f2:	025b      	lsls	r3, r3, #9
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a12:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a18:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a28:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a30:	00d2      	lsls	r2, r2, #3
 8002a32:	492d      	ldr	r1, [pc, #180]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	f023 020c 	bic.w	r2, r3, #12
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4928      	ldr	r1, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	f023 0202 	bic.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4924      	ldr	r1, [pc, #144]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fb92 	bl	80011c0 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fb8e 	bl	80011c0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e091      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x71c>
 8002abe:	e089      	b.n	8002bd4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <HAL_RCC_OscConfig+0x764>)
 8002ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fb78 	bl	80011c0 <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad2:	e00f      	b.n	8002af4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fb74 	bl	80011c0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d908      	bls.n	8002af4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e077      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
 8002ae6:	bf00      	nop
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	fffffc0c 	.word	0xfffffc0c
 8002af0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af4:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e9      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x750>
 8002b00:	e068      	b.n	8002bd4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b02:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b08:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d031      	beq.n	8002b7a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d12a      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d122      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d11a      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0a5b      	lsrs	r3, r3, #9
 8002b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d111      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d108      	bne.n	8002b7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0e1b      	lsrs	r3, r3, #24
 8002b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e02b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	08db      	lsrs	r3, r3, #3
 8002b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b88:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d01f      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba0:	f7fe fb0e 	bl	80011c0 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ba6:	bf00      	nop
 8002ba8:	f7fe fb0a 	bl	80011c0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d0f9      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCC_OscConfig+0x860>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bc0:	00d2      	lsls	r2, r2, #3
 8002bc2:	4907      	ldr	r1, [pc, #28]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_RCC_OscConfig+0x85c>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3730      	adds	r7, #48	; 0x30
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	58024400 	.word	0x58024400
 8002be4:	ffff0007 	.word	0xffff0007

08002be8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e19c      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b8a      	ldr	r3, [pc, #552]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b87      	ldr	r3, [pc, #540]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	4985      	ldr	r1, [pc, #532]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b83      	ldr	r3, [pc, #524]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e184      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d908      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c48:	4b78      	ldr	r3, [pc, #480]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4975      	ldr	r1, [pc, #468]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d908      	bls.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	496a      	ldr	r1, [pc, #424]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d908      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ca4:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	495e      	ldr	r1, [pc, #376]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cd2:	4b56      	ldr	r3, [pc, #344]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4953      	ldr	r1, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f023 020f 	bic.w	r2, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4947      	ldr	r1, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d055      	beq.n	8002dca <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4940      	ldr	r1, [pc, #256]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d38:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d121      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0f6      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d115      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0ea      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0de      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0d6      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f023 0207 	bic.w	r2, r3, #7
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4925      	ldr	r1, [pc, #148]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9a:	f7fe fa11 	bl	80011c0 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da2:	f7fe fa0d 	bl	80011c0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0be      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d1eb      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d208      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d214      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 020f 	bic.w	r2, r3, #15
 8002e0e:	4906      	ldr	r1, [pc, #24]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e086      	b.n	8002f36 <HAL_RCC_ClockConfig+0x34e>
 8002e28:	52002000 	.word	0x52002000
 8002e2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d208      	bcs.n	8002e5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d208      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	492e      	ldr	r1, [pc, #184]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d208      	bcs.n	8002eba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4922      	ldr	r1, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d208      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4917      	ldr	r1, [pc, #92]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ee8:	f000 f834 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	4912      	ldr	r1, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x35c>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x358>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_RCC_ClockConfig+0x35c>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x360>)
 8002f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x364>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x368>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f8fe 	bl	800112c <HAL_InitTick>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	080082a8 	.word	0x080082a8
 8002f48:	24000004 	.word	0x24000004
 8002f4c:	24000000 	.word	0x24000000
 8002f50:	24000008 	.word	0x24000008

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5a:	4bb3      	ldr	r3, [pc, #716]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	f200 8155 	bhi.w	8003212 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08003213 	.word	0x08003213
 8002f78:	08003213 	.word	0x08003213
 8002f7c:	08003213 	.word	0x08003213
 8002f80:	08003213 	.word	0x08003213
 8002f84:	08003213 	.word	0x08003213
 8002f88:	08003213 	.word	0x08003213
 8002f8c:	08003213 	.word	0x08003213
 8002f90:	08002ffb 	.word	0x08002ffb
 8002f94:	08003213 	.word	0x08003213
 8002f98:	08003213 	.word	0x08003213
 8002f9c:	08003213 	.word	0x08003213
 8002fa0:	08003213 	.word	0x08003213
 8002fa4:	08003213 	.word	0x08003213
 8002fa8:	08003213 	.word	0x08003213
 8002fac:	08003213 	.word	0x08003213
 8002fb0:	08003001 	.word	0x08003001
 8002fb4:	08003213 	.word	0x08003213
 8002fb8:	08003213 	.word	0x08003213
 8002fbc:	08003213 	.word	0x08003213
 8002fc0:	08003213 	.word	0x08003213
 8002fc4:	08003213 	.word	0x08003213
 8002fc8:	08003213 	.word	0x08003213
 8002fcc:	08003213 	.word	0x08003213
 8002fd0:	08003007 	.word	0x08003007
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd4:	4b94      	ldr	r3, [pc, #592]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fe0:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	4a90      	ldr	r2, [pc, #576]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ff2:	e111      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ff4:	4b8d      	ldr	r3, [pc, #564]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ff6:	61bb      	str	r3, [r7, #24]
      break;
 8002ff8:	e10e      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ffa:	4b8d      	ldr	r3, [pc, #564]	; (8003230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ffc:	61bb      	str	r3, [r7, #24]
      break;
 8002ffe:	e10b      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003000:	4b8c      	ldr	r3, [pc, #560]	; (8003234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003002:	61bb      	str	r3, [r7, #24]
      break;
 8003004:	e108      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003010:	4b85      	ldr	r3, [pc, #532]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800301a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800301c:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003026:	4b80      	ldr	r3, [pc, #512]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80e1 	beq.w	800320c <HAL_RCC_GetSysClockFreq+0x2b8>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f000 8083 	beq.w	8003158 <HAL_RCC_GetSysClockFreq+0x204>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b02      	cmp	r3, #2
 8003056:	f200 80a1 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x248>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x114>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d056      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003066:	e099      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02d      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	4a6b      	ldr	r2, [pc, #428]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030ce:	e087      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800323c <HAL_RCC_GetSysClockFreq+0x2e8>
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	4b51      	ldr	r3, [pc, #324]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003112:	e065      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003240 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003126:	4b40      	ldr	r3, [pc, #256]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	ed97 6a02 	vldr	s12, [r7, #8]
 800313a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800314a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003156:	e043      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003244 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317a:	ed97 6a02 	vldr	s12, [r7, #8]
 800317e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800318e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800319a:	e021      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003240 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ae:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	0a5b      	lsrs	r3, r3, #9
 80031e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ea:	3301      	adds	r3, #1
 80031ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80031fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003204:	ee17 3a90 	vmov	r3, s15
 8003208:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800320a:	e005      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
      break;
 8003210:	e002      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003214:	61bb      	str	r3, [r7, #24]
      break;
 8003216:	bf00      	nop
  }

  return sysclockfreq;
 8003218:	69bb      	ldr	r3, [r7, #24]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	58024400 	.word	0x58024400
 800322c:	03d09000 	.word	0x03d09000
 8003230:	003d0900 	.word	0x003d0900
 8003234:	007a1200 	.word	0x007a1200
 8003238:	46000000 	.word	0x46000000
 800323c:	4c742400 	.word	0x4c742400
 8003240:	4a742400 	.word	0x4a742400
 8003244:	4af42400 	.word	0x4af42400

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800324e:	f7ff fe81 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_GetHCLKFreq+0x50>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490f      	ldr	r1, [pc, #60]	; (800329c <HAL_RCC_GetHCLKFreq+0x54>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_GetHCLKFreq+0x50>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_GetHCLKFreq+0x54>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	58024400 	.word	0x58024400
 800329c:	080082a8 	.word	0x080082a8
 80032a0:	24000004 	.word	0x24000004
 80032a4:	24000000 	.word	0x24000000

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80032ac:	f7ff ffcc 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4904      	ldr	r1, [pc, #16]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024400 	.word	0x58024400
 80032d0:	080082a8 	.word	0x080082a8

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80032d8:	f7ff ffb6 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4904      	ldr	r1, [pc, #16]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	58024400 	.word	0x58024400
 80032fc:	080082a8 	.word	0x080082a8

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b0c8      	sub	sp, #288	; 0x120
 8003306:	af00      	add	r7, sp, #0
 8003308:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003312:	2300      	movs	r3, #0
 8003314:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003324:	2500      	movs	r5, #0
 8003326:	ea54 0305 	orrs.w	r3, r4, r5
 800332a:	d049      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800332c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003336:	d02f      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800333c:	d828      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800333e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003342:	d01a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003348:	d822      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800334e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003352:	d007      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003354:	e01c      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003356:	4ba7      	ldr	r3, [pc, #668]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	4aa6      	ldr	r2, [pc, #664]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003362:	e01a      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003368:	3308      	adds	r3, #8
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fc43 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003378:	e00f      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337e:	3328      	adds	r3, #40	; 0x28
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f001 fcea 	bl	8004d5c <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800338e:	e004      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033a2:	4b94      	ldr	r3, [pc, #592]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b0:	4a90      	ldr	r2, [pc, #576]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6513      	str	r3, [r2, #80]	; 0x50
 80033b6:	e003      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033cc:	f04f 0900 	mov.w	r9, #0
 80033d0:	ea58 0309 	orrs.w	r3, r8, r9
 80033d4:	d047      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d82a      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	080033fd 	.word	0x080033fd
 80033ec:	0800340b 	.word	0x0800340b
 80033f0:	08003421 	.word	0x08003421
 80033f4:	0800343f 	.word	0x0800343f
 80033f8:	0800343f 	.word	0x0800343f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fc:	4b7d      	ldr	r3, [pc, #500]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4a7c      	ldr	r2, [pc, #496]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003408:	e01a      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800340e:	3308      	adds	r3, #8
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f001 fbf0 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800341e:	e00f      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003424:	3328      	adds	r3, #40	; 0x28
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f001 fc97 	bl	8004d5c <RCCEx_PLL3_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003434:	e004      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800343c:	e000      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800343e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003440:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003448:	4b6a      	ldr	r3, [pc, #424]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	f023 0107 	bic.w	r1, r3, #7
 8003450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4a67      	ldr	r2, [pc, #412]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003458:	430b      	orrs	r3, r1
 800345a:	6513      	str	r3, [r2, #80]	; 0x50
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003462:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003472:	f04f 0b00 	mov.w	fp, #0
 8003476:	ea5a 030b 	orrs.w	r3, sl, fp
 800347a:	d054      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800347c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003486:	d036      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003488:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800348c:	d82f      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003492:	d032      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003498:	d829      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800349a:	2bc0      	cmp	r3, #192	; 0xc0
 800349c:	d02f      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800349e:	2bc0      	cmp	r3, #192	; 0xc0
 80034a0:	d825      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034a2:	2b80      	cmp	r3, #128	; 0x80
 80034a4:	d018      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	d821      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d007      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80034b2:	e01c      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	4a4e      	ldr	r2, [pc, #312]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80034c0:	e01e      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c6:	3308      	adds	r3, #8
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fb94 	bl	8004bf8 <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80034d6:	e013      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034dc:	3328      	adds	r3, #40	; 0x28
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fc3b 	bl	8004d5c <RCCEx_PLL3_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80034ec:	e008      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034f4:	e004      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003500:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003508:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003518:	430b      	orrs	r3, r1
 800351a:	6513      	str	r3, [r2, #80]	; 0x50
 800351c:	e003      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003522:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003532:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800353c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003540:	460b      	mov	r3, r1
 8003542:	4313      	orrs	r3, r2
 8003544:	d05c      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003550:	d03b      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003552:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003556:	d834      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355c:	d037      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800355e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003562:	d82e      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003564:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003568:	d033      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800356a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800356e:	d828      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d01a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d822      	bhi.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003584:	d007      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003586:	e01c      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003594:	e01e      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359a:	3308      	adds	r3, #8
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fb2a 	bl	8004bf8 <RCCEx_PLL2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80035aa:	e013      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b0:	3328      	adds	r3, #40	; 0x28
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fbd1 	bl	8004d5c <RCCEx_PLL3_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80035c0:	e008      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035c8:	e004      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80035d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10d      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80035e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	4a02      	ldr	r2, [pc, #8]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6513      	str	r3, [r2, #80]	; 0x50
 80035f0:	e006      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80035f2:	bf00      	nop
 80035f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800360c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003616:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800361a:	460b      	mov	r3, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	d03a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	2b30      	cmp	r3, #48	; 0x30
 8003628:	d01f      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800362a:	2b30      	cmp	r3, #48	; 0x30
 800362c:	d819      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800362e:	2b20      	cmp	r3, #32
 8003630:	d00c      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003632:	2b20      	cmp	r3, #32
 8003634:	d815      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d019      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800363a:	2b10      	cmp	r3, #16
 800363c:	d111      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363e:	4bae      	ldr	r3, [pc, #696]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	4aad      	ldr	r2, [pc, #692]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800364c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003650:	3308      	adds	r3, #8
 8003652:	2102      	movs	r1, #2
 8003654:	4618      	mov	r0, r3
 8003656:	f001 facf 	bl	8004bf8 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003678:	4b9f      	ldr	r3, [pc, #636]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	4a9c      	ldr	r2, [pc, #624]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003688:	430b      	orrs	r3, r1
 800368a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003692:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80036a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80036ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d051      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c0:	d035      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c6:	d82e      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80036c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036cc:	d031      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80036ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036d2:	d828      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d8:	d01a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80036da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036de:	d822      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e8:	d007      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80036ea:	e01c      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ec:	4b82      	ldr	r3, [pc, #520]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a81      	ldr	r2, [pc, #516]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036f8:	e01c      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fe:	3308      	adds	r3, #8
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fa78 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800370e:	e011      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003714:	3328      	adds	r3, #40	; 0x28
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fb1f 	bl	8004d5c <RCCEx_PLL3_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003724:	e006      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003734:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800373c:	4b6e      	ldr	r3, [pc, #440]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374a:	4a6b      	ldr	r2, [pc, #428]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800374c:	430b      	orrs	r3, r1
 800374e:	6513      	str	r3, [r2, #80]	; 0x50
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003756:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800375a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003770:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003774:	460b      	mov	r3, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	d053      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800377a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003784:	d033      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378a:	d82c      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800378c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003790:	d02f      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003796:	d826      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800379c:	d02b      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800379e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037a2:	d820      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80037a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037a8:	d012      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80037aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ae:	d81a      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d022      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d115      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037be:	3308      	adds	r3, #8
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fa18 	bl	8004bf8 <RCCEx_PLL2_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037ce:	e015      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d4:	3328      	adds	r3, #40	; 0x28
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fabf 	bl	8004d5c <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037ee:	bf00      	nop
 80037f0:	e004      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003804:	4b3c      	ldr	r3, [pc, #240]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800380c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003812:	4a39      	ldr	r2, [pc, #228]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003814:	430b      	orrs	r3, r1
 8003816:	6513      	str	r3, [r2, #80]	; 0x50
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800381e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800382e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003838:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800383c:	460b      	mov	r3, r1
 800383e:	4313      	orrs	r3, r2
 8003840:	d060      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800384a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800384e:	d039      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003850:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003854:	d832      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800385a:	d035      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800385c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003860:	d82c      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d031      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d826      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800386e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003872:	d02d      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003874:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003878:	d820      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800387a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800387e:	d012      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003884:	d81a      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d024      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800388a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388e:	d115      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003894:	3308      	adds	r3, #8
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f001 f9ad 	bl	8004bf8 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038a4:	e017      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038aa:	3328      	adds	r3, #40	; 0x28
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fa54 	bl	8004d5c <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038ba:	e00c      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038c2:	e008      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038c4:	bf00      	nop
 80038c6:	e006      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038c8:	bf00      	nop
 80038ca:	e004      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038cc:	bf00      	nop
 80038ce:	e002      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10e      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038ee:	4a02      	ldr	r2, [pc, #8]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6593      	str	r3, [r2, #88]	; 0x58
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80038f6:	bf00      	nop
 80038f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003900:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800391a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d037      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392e:	d00e      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003934:	d816      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d018      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800393a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393e:	d111      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4bc4      	ldr	r3, [pc, #784]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4ac3      	ldr	r2, [pc, #780]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800394c:	e00f      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800394e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003952:	3308      	adds	r3, #8
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f94e 	bl	8004bf8 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003976:	4bb7      	ldr	r3, [pc, #732]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800397e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003984:	4ab3      	ldr	r2, [pc, #716]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003986:	430b      	orrs	r3, r1
 8003988:	6513      	str	r3, [r2, #80]	; 0x50
 800398a:	e003      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80039a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80039aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d039      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d81c      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	08003a01 	.word	0x08003a01
 80039c8:	080039d5 	.word	0x080039d5
 80039cc:	080039e3 	.word	0x080039e3
 80039d0:	08003a01 	.word	0x08003a01
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b9f      	ldr	r3, [pc, #636]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a9e      	ldr	r2, [pc, #632]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039e0:	e00f      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	3308      	adds	r3, #8
 80039e8:	2102      	movs	r1, #2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f904 	bl	8004bf8 <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039f6:	e004      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a0a:	4b92      	ldr	r3, [pc, #584]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	f023 0103 	bic.w	r1, r3, #3
 8003a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a18:	4a8e      	ldr	r2, [pc, #568]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f000 8099 	beq.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4a:	4b83      	ldr	r3, [pc, #524]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a82      	ldr	r2, [pc, #520]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a56:	f7fd fbb3 	bl	80011c0 <HAL_GetTick>
 8003a5a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7fd fbae 	bl	80011c0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	d903      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a78:	4b77      	ldr	r3, [pc, #476]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ed      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d173      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a8c:	4b71      	ldr	r3, [pc, #452]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a98:	4053      	eors	r3, r2
 8003a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d015      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa2:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aae:	4b69      	ldr	r3, [pc, #420]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a68      	ldr	r2, [pc, #416]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aba:	4b66      	ldr	r3, [pc, #408]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a65      	ldr	r2, [pc, #404]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ac6:	4a63      	ldr	r2, [pc, #396]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003acc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ada:	d118      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fb70 	bl	80011c0 <HAL_GetTick>
 8003ae0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae4:	e00d      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fb6b 	bl	80011c0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d903      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003b00:	e005      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b02:	4b54      	ldr	r3, [pc, #336]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0eb      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d129      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b26:	d10e      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b38:	091a      	lsrs	r2, r3, #4
 8003b3a:	4b48      	ldr	r3, [pc, #288]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	4a45      	ldr	r2, [pc, #276]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6113      	str	r3, [r2, #16]
 8003b44:	e005      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003b46:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	4a42      	ldr	r2, [pc, #264]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b50:	6113      	str	r3, [r2, #16]
 8003b52:	4b40      	ldr	r3, [pc, #256]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b62:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70
 8003b68:	e008      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f002 0301 	and.w	r3, r2, #1
 8003b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f000 8090 	beq.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	2b28      	cmp	r3, #40	; 0x28
 8003ba8:	d870      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003c95 	.word	0x08003c95
 8003bb4:	08003c8d 	.word	0x08003c8d
 8003bb8:	08003c8d 	.word	0x08003c8d
 8003bbc:	08003c8d 	.word	0x08003c8d
 8003bc0:	08003c8d 	.word	0x08003c8d
 8003bc4:	08003c8d 	.word	0x08003c8d
 8003bc8:	08003c8d 	.word	0x08003c8d
 8003bcc:	08003c8d 	.word	0x08003c8d
 8003bd0:	08003c61 	.word	0x08003c61
 8003bd4:	08003c8d 	.word	0x08003c8d
 8003bd8:	08003c8d 	.word	0x08003c8d
 8003bdc:	08003c8d 	.word	0x08003c8d
 8003be0:	08003c8d 	.word	0x08003c8d
 8003be4:	08003c8d 	.word	0x08003c8d
 8003be8:	08003c8d 	.word	0x08003c8d
 8003bec:	08003c8d 	.word	0x08003c8d
 8003bf0:	08003c77 	.word	0x08003c77
 8003bf4:	08003c8d 	.word	0x08003c8d
 8003bf8:	08003c8d 	.word	0x08003c8d
 8003bfc:	08003c8d 	.word	0x08003c8d
 8003c00:	08003c8d 	.word	0x08003c8d
 8003c04:	08003c8d 	.word	0x08003c8d
 8003c08:	08003c8d 	.word	0x08003c8d
 8003c0c:	08003c8d 	.word	0x08003c8d
 8003c10:	08003c95 	.word	0x08003c95
 8003c14:	08003c8d 	.word	0x08003c8d
 8003c18:	08003c8d 	.word	0x08003c8d
 8003c1c:	08003c8d 	.word	0x08003c8d
 8003c20:	08003c8d 	.word	0x08003c8d
 8003c24:	08003c8d 	.word	0x08003c8d
 8003c28:	08003c8d 	.word	0x08003c8d
 8003c2c:	08003c8d 	.word	0x08003c8d
 8003c30:	08003c95 	.word	0x08003c95
 8003c34:	08003c8d 	.word	0x08003c8d
 8003c38:	08003c8d 	.word	0x08003c8d
 8003c3c:	08003c8d 	.word	0x08003c8d
 8003c40:	08003c8d 	.word	0x08003c8d
 8003c44:	08003c8d 	.word	0x08003c8d
 8003c48:	08003c8d 	.word	0x08003c8d
 8003c4c:	08003c8d 	.word	0x08003c8d
 8003c50:	08003c95 	.word	0x08003c95
 8003c54:	58024400 	.word	0x58024400
 8003c58:	58024800 	.word	0x58024800
 8003c5c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c64:	3308      	adds	r3, #8
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 ffc5 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c74:	e00f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7a:	3328      	adds	r3, #40	; 0x28
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f86c 	bl	8004d5c <RCCEx_PLL3_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c8a:	e004      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c9e:	4bc0      	ldr	r3, [pc, #768]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cae:	4abc      	ldr	r2, [pc, #752]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6553      	str	r3, [r2, #84]	; 0x54
 8003cb4:	e003      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	f002 0302 	and.w	r3, r2, #2
 8003cca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003cd4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d043      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d824      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d1f 	.word	0x08003d1f
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d3d 	.word	0x08003d3d
 8003d04:	08003d3d 	.word	0x08003d3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ff71 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e00f      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d22:	3328      	adds	r3, #40	; 0x28
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f818 	bl	8004d5c <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d46:	4b96      	ldr	r3, [pc, #600]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f023 0107 	bic.w	r1, r3, #7
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d56:	4a92      	ldr	r2, [pc, #584]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6553      	str	r3, [r2, #84]	; 0x54
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f002 0304 	and.w	r3, r2, #4
 8003d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d7c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d043      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d824      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003de5 	.word	0x08003de5
 8003d9c:	08003db1 	.word	0x08003db1
 8003da0:	08003dc7 	.word	0x08003dc7
 8003da4:	08003de5 	.word	0x08003de5
 8003da8:	08003de5 	.word	0x08003de5
 8003dac:	08003de5 	.word	0x08003de5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db4:	3308      	adds	r3, #8
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 ff1d 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dc4:	e00f      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dca:	3328      	adds	r3, #40	; 0x28
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ffc4 	bl	8004d5c <RCCEx_PLL3_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dda:	e004      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dee:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	f023 0107 	bic.w	r1, r3, #7
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dfe:	4a68      	ldr	r2, [pc, #416]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f002 0320 	and.w	r3, r2, #32
 8003e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d055      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e3a:	d033      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e40:	d82c      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d02f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d826      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e52:	d02b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003e54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e58:	d820      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5e:	d012      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e64:	d81a      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d022      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e6e:	d115      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e74:	3308      	adds	r3, #8
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 febd 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e84:	e015      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8a:	3328      	adds	r3, #40	; 0x28
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 ff64 	bl	8004d5c <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ea2:	e006      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ea4:	bf00      	nop
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ea8:	bf00      	nop
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eca:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6553      	str	r3, [r2, #84]	; 0x54
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ed6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ef0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d058      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f06:	d033      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f0c:	d82c      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d02f      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f18:	d826      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f1e:	d02b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f24:	d820      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f30:	d81a      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d022      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3a:	d115      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f40:	3308      	adds	r3, #8
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fe57 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f50:	e015      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f56:	3328      	adds	r3, #40	; 0x28
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fefe 	bl	8004d5c <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f66:	e00a      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f70:	bf00      	nop
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f96:	4a02      	ldr	r2, [pc, #8]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f9c:	e006      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fc2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	d055      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fd8:	d033      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003fda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fde:	d82c      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe4:	d02f      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fea:	d826      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ff0:	d02b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ff2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ff6:	d820      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ffc:	d012      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004002:	d81a      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d022      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400c:	d115      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800400e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004012:	3308      	adds	r3, #8
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fdee 	bl	8004bf8 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004022:	e015      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004028:	3328      	adds	r3, #40	; 0x28
 800402a:	2102      	movs	r1, #2
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fe95 	bl	8004d5c <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004038:	e00a      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004040:	e006      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004042:	bf00      	nop
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004046:	bf00      	nop
 8004048:	e002      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800404a:	bf00      	nop
 800404c:	e000      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800404e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004050:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004058:	4ba1      	ldr	r3, [pc, #644]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004064:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004068:	4a9d      	ldr	r2, [pc, #628]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800406a:	430b      	orrs	r3, r1
 800406c:	6593      	str	r3, [r2, #88]	; 0x58
 800406e:	e003      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004074:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f002 0308 	and.w	r3, r2, #8
 8004084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800408e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004092:	460b      	mov	r3, r1
 8004094:	4313      	orrs	r3, r2
 8004096:	d01e      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040aa:	3328      	adds	r3, #40	; 0x28
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fe54 	bl	8004d5c <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040c0:	4b87      	ldr	r3, [pc, #540]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	4a83      	ldr	r2, [pc, #524]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040d2:	430b      	orrs	r3, r1
 80040d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f002 0310 	and.w	r3, r2, #16
 80040e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80040ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80040f0:	460b      	mov	r3, r1
 80040f2:	4313      	orrs	r3, r2
 80040f4:	d01e      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	d10c      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004108:	3328      	adds	r3, #40	; 0x28
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fe25 	bl	8004d5c <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800411e:	4b70      	ldr	r3, [pc, #448]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800412e:	4a6c      	ldr	r2, [pc, #432]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004130:	430b      	orrs	r3, r1
 8004132:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800414a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d03e      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004158:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800415c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004160:	d022      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004166:	d81b      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004170:	d00b      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004172:	e015      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	3308      	adds	r3, #8
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fd3b 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800418a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418e:	3328      	adds	r3, #40	; 0x28
 8004190:	2102      	movs	r1, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fde2 	bl	8004d5c <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b2:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041c2:	4a47      	ldr	r2, [pc, #284]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80041de:	67bb      	str	r3, [r7, #120]	; 0x78
 80041e0:	2300      	movs	r3, #0
 80041e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041fa:	d01f      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80041fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004200:	d818      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004206:	d003      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800420c:	d007      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004210:	4b33      	ldr	r3, [pc, #204]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	4a32      	ldr	r2, [pc, #200]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800421c:	e00f      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004222:	3328      	adds	r3, #40	; 0x28
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fd98 	bl	8004d5c <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004232:	e004      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800423c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004258:	430b      	orrs	r3, r1
 800425a:	6553      	str	r3, [r2, #84]	; 0x54
 800425c:	e003      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004262:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004272:	673b      	str	r3, [r7, #112]	; 0x70
 8004274:	2300      	movs	r3, #0
 8004276:	677b      	str	r3, [r7, #116]	; 0x74
 8004278:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d034      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004292:	e011      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042a0:	e00e      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a6:	3308      	adds	r3, #8
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fca4 	bl	8004bf8 <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042b6:	e003      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d6:	4a02      	ldr	r2, [pc, #8]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042dc:	e006      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80042de:	bf00      	nop
 80042e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80042f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042fa:	2300      	movs	r3, #0
 80042fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d00c      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430c:	3328      	adds	r3, #40	; 0x28
 800430e:	2102      	movs	r1, #2
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fd23 	bl	8004d5c <RCCEx_PLL3_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800432e:	663b      	str	r3, [r7, #96]	; 0x60
 8004330:	2300      	movs	r3, #0
 8004332:	667b      	str	r3, [r7, #100]	; 0x64
 8004334:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d038      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434a:	d018      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800434c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004350:	d811      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004356:	d014      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435c:	d80b      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d011      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004368:	4bc3      	ldr	r3, [pc, #780]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	4ac2      	ldr	r2, [pc, #776]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004374:	e008      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800437c:	e004      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004390:	4bb9      	ldr	r3, [pc, #740]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	4ab5      	ldr	r2, [pc, #724]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6553      	str	r3, [r2, #84]	; 0x54
 80043a6:	e003      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80043bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80043be:	2300      	movs	r3, #0
 80043c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043cc:	4baa      	ldr	r3, [pc, #680]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80043d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043da:	4aa7      	ldr	r2, [pc, #668]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80043ec:	653b      	str	r3, [r7, #80]	; 0x50
 80043ee:	2300      	movs	r3, #0
 80043f0:	657b      	str	r3, [r7, #84]	; 0x54
 80043f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80043f6:	460b      	mov	r3, r1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043fc:	4b9e      	ldr	r3, [pc, #632]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a9b      	ldr	r2, [pc, #620]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800440c:	430b      	orrs	r3, r1
 800440e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48
 800441e:	2300      	movs	r3, #0
 8004420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004422:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800442c:	4b92      	ldr	r3, [pc, #584]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443a:	4a8f      	ldr	r2, [pc, #572]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800444c:	643b      	str	r3, [r7, #64]	; 0x40
 800444e:	2300      	movs	r3, #0
 8004450:	647b      	str	r3, [r7, #68]	; 0x44
 8004452:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800445c:	4b86      	ldr	r3, [pc, #536]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	4a85      	ldr	r2, [pc, #532]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004462:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004466:	6113      	str	r3, [r2, #16]
 8004468:	4b83      	ldr	r3, [pc, #524]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800446a:	6919      	ldr	r1, [r3, #16]
 800446c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004470:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004474:	4a80      	ldr	r2, [pc, #512]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004476:	430b      	orrs	r3, r1
 8004478:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800447a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004486:	63bb      	str	r3, [r7, #56]	; 0x38
 8004488:	2300      	movs	r3, #0
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004496:	4b78      	ldr	r3, [pc, #480]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	4a74      	ldr	r2, [pc, #464]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
 80044b8:	2300      	movs	r3, #0
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
 80044bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044c6:	4b6c      	ldr	r3, [pc, #432]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80044ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d6:	4a68      	ldr	r2, [pc, #416]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	2100      	movs	r1, #0
 80044e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80044f2:	460b      	mov	r3, r1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d011      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fc:	3308      	adds	r3, #8
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fb79 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800450c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004518:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800451c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	2100      	movs	r1, #0
 8004526:	6239      	str	r1, [r7, #32]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004532:	460b      	mov	r3, r1
 8004534:	4313      	orrs	r3, r2
 8004536:	d011      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453c:	3308      	adds	r3, #8
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fb59 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800454c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004558:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800455c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	2100      	movs	r1, #0
 8004566:	61b9      	str	r1, [r7, #24]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	d011      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457c:	3308      	adds	r3, #8
 800457e:	2102      	movs	r1, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fb39 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800458c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004598:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	2100      	movs	r1, #0
 80045a6:	6139      	str	r1, [r7, #16]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d011      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045bc:	3328      	adds	r3, #40	; 0x28
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fbcb 	bl	8004d5c <RCCEx_PLL3_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80045cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	2100      	movs	r1, #0
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045f2:	460b      	mov	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	d011      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fc:	3328      	adds	r3, #40	; 0x28
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fbab 	bl	8004d5c <RCCEx_PLL3_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800460c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004614:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004618:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800461c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	2100      	movs	r1, #0
 8004626:	6039      	str	r1, [r7, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004632:	460b      	mov	r3, r1
 8004634:	4313      	orrs	r3, r2
 8004636:	d011      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463c:	3328      	adds	r3, #40	; 0x28
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fb8b 	bl	8004d5c <RCCEx_PLL3_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800464c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004658:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800465c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
}
 800466a:	4618      	mov	r0, r3
 800466c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004670:	46bd      	mov	sp, r7
 8004672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400

0800467c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004680:	f7fe fde2 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4904      	ldr	r1, [pc, #16]	; (80046a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	58024400 	.word	0x58024400
 80046a4:	080082a8 	.word	0x080082a8

080046a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046b0:	4ba1      	ldr	r3, [pc, #644]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046ba:	4b9f      	ldr	r3, [pc, #636]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	0b1b      	lsrs	r3, r3, #12
 80046c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046c6:	4b9c      	ldr	r3, [pc, #624]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046d2:	4b99      	ldr	r3, [pc, #612]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8111 	beq.w	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f000 8083 	beq.w	8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b02      	cmp	r3, #2
 8004702:	f200 80a1 	bhi.w	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d056      	beq.n	80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004712:	e099      	b.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004714:	4b88      	ldr	r3, [pc, #544]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02d      	beq.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004720:	4b85      	ldr	r3, [pc, #532]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	4a84      	ldr	r2, [pc, #528]	; (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
 8004730:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a03 	vldr	s12, [r7, #12]
 800475e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800477a:	e087      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047be:	e065      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004802:	e043      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800494c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004846:	e021      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a03 	vldr	s12, [r7, #12]
 800486e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b2:	ee17 2a90 	vmov	r2, s15
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048ba:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	0c1b      	lsrs	r3, r3, #16
 80048c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e0:	ee17 2a90 	vmov	r2, s15
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	0e1b      	lsrs	r3, r3, #24
 80048ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004902:	edd7 6a07 	vldr	s13, [r7, #28]
 8004906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490e:	ee17 2a90 	vmov	r2, s15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004916:	e008      	b.n	800492a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
}
 800492a:	bf00      	nop
 800492c:	3724      	adds	r7, #36	; 0x24
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
 800493c:	03d09000 	.word	0x03d09000
 8004940:	46000000 	.word	0x46000000
 8004944:	4c742400 	.word	0x4c742400
 8004948:	4a742400 	.word	0x4a742400
 800494c:	4af42400 	.word	0x4af42400

08004950 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004958:	4ba1      	ldr	r3, [pc, #644]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004962:	4b9f      	ldr	r3, [pc, #636]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	0d1b      	lsrs	r3, r3, #20
 8004968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800496e:	4b9c      	ldr	r3, [pc, #624]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800497a:	4b99      	ldr	r3, [pc, #612]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	08db      	lsrs	r3, r3, #3
 8004980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8111 	beq.w	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	f000 8083 	beq.w	8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	f200 80a1 	bhi.w	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d056      	beq.n	8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049ba:	e099      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049bc:	4b88      	ldr	r3, [pc, #544]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02d      	beq.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049c8:	4b85      	ldr	r3, [pc, #532]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	08db      	lsrs	r3, r3, #3
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	4a84      	ldr	r2, [pc, #528]	; (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
 80049d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b7b      	ldr	r3, [pc, #492]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a22:	e087      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b6a      	ldr	r3, [pc, #424]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a66:	e065      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b59      	ldr	r3, [pc, #356]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aaa:	e043      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b48      	ldr	r3, [pc, #288]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aee:	e021      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b37      	ldr	r3, [pc, #220]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b34:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	0a5b      	lsrs	r3, r3, #9
 8004b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5a:	ee17 2a90 	vmov	r2, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b62:	4b1f      	ldr	r3, [pc, #124]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b88:	ee17 2a90 	vmov	r2, s15
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb6:	ee17 2a90 	vmov	r2, s15
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	609a      	str	r2, [r3, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	3724      	adds	r7, #36	; 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	03d09000 	.word	0x03d09000
 8004be8:	46000000 	.word	0x46000000
 8004bec:	4c742400 	.word	0x4c742400
 8004bf0:	4a742400 	.word	0x4a742400
 8004bf4:	4af42400 	.word	0x4af42400

08004bf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c06:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d101      	bne.n	8004c16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e099      	b.n	8004d4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c16:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a4e      	ldr	r2, [pc, #312]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c22:	f7fc facd 	bl	80011c0 <HAL_GetTick>
 8004c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c2a:	f7fc fac9 	bl	80011c0 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e086      	b.n	8004d4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c48:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	493f      	ldr	r1, [pc, #252]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	025b      	lsls	r3, r3, #9
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c8c:	4931      	ldr	r1, [pc, #196]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	492d      	ldr	r1, [pc, #180]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f023 0220 	bic.w	r2, r3, #32
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	4928      	ldr	r1, [pc, #160]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f023 0310 	bic.w	r3, r3, #16
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <RCCEx_PLL2_Config+0x160>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	69d2      	ldr	r2, [r2, #28]
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	4920      	ldr	r1, [pc, #128]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	f043 0310 	orr.w	r3, r3, #16
 8004ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf4:	e00f      	b.n	8004d16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d08:	e005      	b.n	8004d16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fc fa4d 	bl	80011c0 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2a:	f7fc fa49 	bl	80011c0 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	ffff0007 	.word	0xffff0007

08004d5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d6a:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d101      	bne.n	8004d7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e099      	b.n	8004eae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d7a:	4b4f      	ldr	r3, [pc, #316]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4e      	ldr	r2, [pc, #312]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d86:	f7fc fa1b 	bl	80011c0 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d8e:	f7fc fa17 	bl	80011c0 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e086      	b.n	8004eae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da0:	4b45      	ldr	r3, [pc, #276]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dac:	4b42      	ldr	r3, [pc, #264]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	051b      	lsls	r3, r3, #20
 8004dba:	493f      	ldr	r1, [pc, #252]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	025b      	lsls	r3, r3, #9
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004df0:	4931      	ldr	r1, [pc, #196]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	492d      	ldr	r1, [pc, #180]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	4928      	ldr	r1, [pc, #160]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e1a:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <RCCEx_PLL3_Config+0x160>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	69d2      	ldr	r2, [r2, #28]
 8004e32:	00d2      	lsls	r2, r2, #3
 8004e34:	4920      	ldr	r1, [pc, #128]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e58:	e00f      	b.n	8004e7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e60:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e6c:	e005      	b.n	8004e7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4a11      	ldr	r2, [pc, #68]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fc f99b 	bl	80011c0 <HAL_GetTick>
 8004e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e8e:	f7fc f997 	bl	80011c0 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e006      	b.n	8004eae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	ffff0007 	.word	0xffff0007

08004ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e042      	b.n	8004f58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fb ffb9 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2224      	movs	r2, #36	; 0x24
 8004eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fce0 	bl	80058c8 <UART_SetConfig>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e022      	b.n	8004f58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 fb40 	bl	80065a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 fbc7 	bl	80066e4 <UART_CheckIdleState>
 8004f56:	4603      	mov	r3, r0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d17b      	bne.n	8005072 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_UART_Transmit+0x26>
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e074      	b.n	8005074 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2221      	movs	r2, #33	; 0x21
 8004f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f9a:	f7fc f911 	bl	80011c0 <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	88fa      	ldrh	r2, [r7, #6]
 8004fa4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb8:	d108      	bne.n	8004fcc <HAL_UART_Transmit+0x6c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	e003      	b.n	8004fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fd4:	e030      	b.n	8005038 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f001 fc29 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e03d      	b.n	8005074 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	3302      	adds	r3, #2
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e007      	b.n	8005026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3301      	adds	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1c8      	bne.n	8004fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2140      	movs	r1, #64	; 0x40
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f001 fbf2 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e006      	b.n	8005074 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	2b20      	cmp	r3, #32
 8005092:	d137      	bne.n	8005104 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_Receive_IT+0x24>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e030      	b.n	8005106 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_UART_Receive_IT+0x94>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01f      	beq.n	80050f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	613b      	str	r3, [r7, #16]
   return(result);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f001 fc04 	bl	8006908 <UART_Start_Receive_IT>
 8005100:	4603      	mov	r3, r0
 8005102:	e000      	b.n	8005106 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	58000c00 	.word	0x58000c00

08005114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b0ba      	sub	sp, #232	; 0xe8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800513a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800513e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005142:	4013      	ands	r3, r2
 8005144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11b      	bne.n	8005188 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d105      	bne.n	8005174 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8377 	beq.w	800586c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
      }
      return;
 8005186:	e371      	b.n	800586c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8123 	beq.w	80053d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005192:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005196:	4b8d      	ldr	r3, [pc, #564]	; (80053cc <HAL_UART_IRQHandler+0x2b8>)
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800519e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051a2:	4b8b      	ldr	r3, [pc, #556]	; (80053d0 <HAL_UART_IRQHandler+0x2bc>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8116 	beq.w	80053d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d011      	beq.n	80051dc <HAL_UART_IRQHandler+0xc8>
 80051b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2201      	movs	r2, #1
 80051ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d011      	beq.n	800520c <HAL_UART_IRQHandler+0xf8>
 80051e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2202      	movs	r2, #2
 80051fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800520c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d011      	beq.n	800523c <HAL_UART_IRQHandler+0x128>
 8005218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00b      	beq.n	800523c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2204      	movs	r2, #4
 800522a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	f043 0202 	orr.w	r2, r3, #2
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d017      	beq.n	8005278 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005254:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005258:	4b5c      	ldr	r3, [pc, #368]	; (80053cc <HAL_UART_IRQHandler+0x2b8>)
 800525a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2208      	movs	r2, #8
 8005266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	f043 0208 	orr.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005280:	2b00      	cmp	r3, #0
 8005282:	d012      	beq.n	80052aa <HAL_UART_IRQHandler+0x196>
 8005284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 82dd 	beq.w	8005870 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d013      	beq.n	80052ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d005      	beq.n	800530e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005306:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	d054      	beq.n	80053b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 fc1c 	bl	8006b4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d146      	bne.n	80053b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800533c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800534e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800535a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1d9      	bne.n	8005322 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <HAL_UART_IRQHandler+0x2c0>)
 8005380:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005388:	4618      	mov	r0, r3
 800538a:	f7fc fb77 	bl	8001a7c <HAL_DMA_Abort_IT>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d019      	beq.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80053a2:	4610      	mov	r0, r2
 80053a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a6:	e00f      	b.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fa77 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ae:	e00b      	b.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fa73 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b6:	e007      	b.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa6f 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80053c6:	e253      	b.n	8005870 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c8:	bf00      	nop
    return;
 80053ca:	e251      	b.n	8005870 <HAL_UART_IRQHandler+0x75c>
 80053cc:	10000001 	.word	0x10000001
 80053d0:	04000120 	.word	0x04000120
 80053d4:	08006c19 	.word	0x08006c19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f040 81e7 	bne.w	80057b0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 81e0 	beq.w	80057b0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 81d9 	beq.w	80057b0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2210      	movs	r2, #16
 8005404:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	f040 8151 	bne.w	80056b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a96      	ldr	r2, [pc, #600]	; (8005678 <HAL_UART_IRQHandler+0x564>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d068      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a93      	ldr	r2, [pc, #588]	; (800567c <HAL_UART_IRQHandler+0x568>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d061      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a91      	ldr	r2, [pc, #580]	; (8005680 <HAL_UART_IRQHandler+0x56c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d05a      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a8e      	ldr	r2, [pc, #568]	; (8005684 <HAL_UART_IRQHandler+0x570>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d053      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a8c      	ldr	r2, [pc, #560]	; (8005688 <HAL_UART_IRQHandler+0x574>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04c      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a89      	ldr	r2, [pc, #548]	; (800568c <HAL_UART_IRQHandler+0x578>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d045      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a87      	ldr	r2, [pc, #540]	; (8005690 <HAL_UART_IRQHandler+0x57c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d03e      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a84      	ldr	r2, [pc, #528]	; (8005694 <HAL_UART_IRQHandler+0x580>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d037      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a82      	ldr	r2, [pc, #520]	; (8005698 <HAL_UART_IRQHandler+0x584>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d030      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7f      	ldr	r2, [pc, #508]	; (800569c <HAL_UART_IRQHandler+0x588>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d029      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a7d      	ldr	r2, [pc, #500]	; (80056a0 <HAL_UART_IRQHandler+0x58c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d022      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a7a      	ldr	r2, [pc, #488]	; (80056a4 <HAL_UART_IRQHandler+0x590>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a78      	ldr	r2, [pc, #480]	; (80056a8 <HAL_UART_IRQHandler+0x594>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d014      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a75      	ldr	r2, [pc, #468]	; (80056ac <HAL_UART_IRQHandler+0x598>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00d      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a73      	ldr	r2, [pc, #460]	; (80056b0 <HAL_UART_IRQHandler+0x59c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d006      	beq.n	80054f6 <HAL_UART_IRQHandler+0x3e2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a70      	ldr	r2, [pc, #448]	; (80056b4 <HAL_UART_IRQHandler+0x5a0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d106      	bne.n	8005504 <HAL_UART_IRQHandler+0x3f0>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	b29b      	uxth	r3, r3
 8005502:	e005      	b.n	8005510 <HAL_UART_IRQHandler+0x3fc>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 81ab 	beq.w	8005874 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005524:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005528:	429a      	cmp	r2, r3
 800552a:	f080 81a3 	bcs.w	8005874 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005544:	f000 8087 	beq.w	8005656 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800555c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005576:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800557e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800558a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1da      	bne.n	8005548 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3308      	adds	r3, #8
 80055b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e1      	bne.n	8005592 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e3      	bne.n	80055ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005636:	65bb      	str	r3, [r7, #88]	; 0x58
 8005638:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800563c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e4      	bne.n	8005614 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005650:	4618      	mov	r0, r3
 8005652:	f7fb fef5 	bl	8001440 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005668:	b29b      	uxth	r3, r3
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	b29b      	uxth	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f91d 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005676:	e0fd      	b.n	8005874 <HAL_UART_IRQHandler+0x760>
 8005678:	40020010 	.word	0x40020010
 800567c:	40020028 	.word	0x40020028
 8005680:	40020040 	.word	0x40020040
 8005684:	40020058 	.word	0x40020058
 8005688:	40020070 	.word	0x40020070
 800568c:	40020088 	.word	0x40020088
 8005690:	400200a0 	.word	0x400200a0
 8005694:	400200b8 	.word	0x400200b8
 8005698:	40020410 	.word	0x40020410
 800569c:	40020428 	.word	0x40020428
 80056a0:	40020440 	.word	0x40020440
 80056a4:	40020458 	.word	0x40020458
 80056a8:	40020470 	.word	0x40020470
 80056ac:	40020488 	.word	0x40020488
 80056b0:	400204a0 	.word	0x400204a0
 80056b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80cf 	beq.w	8005878 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80056da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80ca 	beq.w	8005878 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
 8005708:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800570c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e4      	bne.n	80056e4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	623b      	str	r3, [r7, #32]
   return(result);
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	4b55      	ldr	r3, [pc, #340]	; (8005884 <HAL_UART_IRQHandler+0x770>)
 800572e:	4013      	ands	r3, r2
 8005730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800573e:	633a      	str	r2, [r7, #48]	; 0x30
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e3      	bne.n	800571a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	60fb      	str	r3, [r7, #12]
   return(result);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	617b      	str	r3, [r7, #20]
   return(result);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e4      	bne.n	8005766 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f881 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057ae:	e063      	b.n	8005878 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <HAL_UART_IRQHandler+0x6c6>
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 ff7e 	bl	80076d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d8:	e051      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d014      	beq.n	8005810 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005802:	2b00      	cmp	r3, #0
 8005804:	d03a      	beq.n	800587c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
    }
    return;
 800580e:	e035      	b.n	800587c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_UART_IRQHandler+0x71c>
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 fa0b 	bl	8006c44 <UART_EndTransmit_IT>
    return;
 800582e:	e026      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <HAL_UART_IRQHandler+0x73c>
 800583c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 ff57 	bl	80076fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800584e:	e016      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d010      	beq.n	800587e <HAL_UART_IRQHandler+0x76a>
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005860:	2b00      	cmp	r3, #0
 8005862:	da0c      	bge.n	800587e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 ff3f 	bl	80076e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800586a:	e008      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
      return;
 800586c:	bf00      	nop
 800586e:	e006      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
    return;
 8005870:	bf00      	nop
 8005872:	e004      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
      return;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
      return;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <HAL_UART_IRQHandler+0x76a>
    return;
 800587c:	bf00      	nop
  }
}
 800587e:	37e8      	adds	r7, #232	; 0xe8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	effffffe 	.word	0xeffffffe

08005888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b092      	sub	sp, #72	; 0x48
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4bbe      	ldr	r3, [pc, #760]	; (8005bf0 <UART_SetConfig+0x328>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005900:	430b      	orrs	r3, r1
 8005902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4ab3      	ldr	r2, [pc, #716]	; (8005bf4 <UART_SetConfig+0x32c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005930:	4313      	orrs	r3, r2
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	4baf      	ldr	r3, [pc, #700]	; (8005bf8 <UART_SetConfig+0x330>)
 800593c:	4013      	ands	r3, r2
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005944:	430b      	orrs	r3, r1
 8005946:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	f023 010f 	bic.w	r1, r3, #15
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4aa6      	ldr	r2, [pc, #664]	; (8005bfc <UART_SetConfig+0x334>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d177      	bne.n	8005a58 <UART_SetConfig+0x190>
 8005968:	4ba5      	ldr	r3, [pc, #660]	; (8005c00 <UART_SetConfig+0x338>)
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005970:	2b28      	cmp	r3, #40	; 0x28
 8005972:	d86d      	bhi.n	8005a50 <UART_SetConfig+0x188>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <UART_SetConfig+0xb4>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	08005a21 	.word	0x08005a21
 8005980:	08005a51 	.word	0x08005a51
 8005984:	08005a51 	.word	0x08005a51
 8005988:	08005a51 	.word	0x08005a51
 800598c:	08005a51 	.word	0x08005a51
 8005990:	08005a51 	.word	0x08005a51
 8005994:	08005a51 	.word	0x08005a51
 8005998:	08005a51 	.word	0x08005a51
 800599c:	08005a29 	.word	0x08005a29
 80059a0:	08005a51 	.word	0x08005a51
 80059a4:	08005a51 	.word	0x08005a51
 80059a8:	08005a51 	.word	0x08005a51
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a51 	.word	0x08005a51
 80059b4:	08005a51 	.word	0x08005a51
 80059b8:	08005a51 	.word	0x08005a51
 80059bc:	08005a31 	.word	0x08005a31
 80059c0:	08005a51 	.word	0x08005a51
 80059c4:	08005a51 	.word	0x08005a51
 80059c8:	08005a51 	.word	0x08005a51
 80059cc:	08005a51 	.word	0x08005a51
 80059d0:	08005a51 	.word	0x08005a51
 80059d4:	08005a51 	.word	0x08005a51
 80059d8:	08005a51 	.word	0x08005a51
 80059dc:	08005a39 	.word	0x08005a39
 80059e0:	08005a51 	.word	0x08005a51
 80059e4:	08005a51 	.word	0x08005a51
 80059e8:	08005a51 	.word	0x08005a51
 80059ec:	08005a51 	.word	0x08005a51
 80059f0:	08005a51 	.word	0x08005a51
 80059f4:	08005a51 	.word	0x08005a51
 80059f8:	08005a51 	.word	0x08005a51
 80059fc:	08005a41 	.word	0x08005a41
 8005a00:	08005a51 	.word	0x08005a51
 8005a04:	08005a51 	.word	0x08005a51
 8005a08:	08005a51 	.word	0x08005a51
 8005a0c:	08005a51 	.word	0x08005a51
 8005a10:	08005a51 	.word	0x08005a51
 8005a14:	08005a51 	.word	0x08005a51
 8005a18:	08005a51 	.word	0x08005a51
 8005a1c:	08005a49 	.word	0x08005a49
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a26:	e326      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2e:	e322      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a30:	2308      	movs	r3, #8
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a36:	e31e      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3e:	e31a      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a40:	2320      	movs	r3, #32
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a46:	e316      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a48:	2340      	movs	r3, #64	; 0x40
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e312      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a56:	e30e      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a69      	ldr	r2, [pc, #420]	; (8005c04 <UART_SetConfig+0x33c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d130      	bne.n	8005ac4 <UART_SetConfig+0x1fc>
 8005a62:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <UART_SetConfig+0x338>)
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d826      	bhi.n	8005abc <UART_SetConfig+0x1f4>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <UART_SetConfig+0x1ac>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005a8d 	.word	0x08005a8d
 8005a78:	08005a95 	.word	0x08005a95
 8005a7c:	08005a9d 	.word	0x08005a9d
 8005a80:	08005aa5 	.word	0x08005aa5
 8005a84:	08005aad 	.word	0x08005aad
 8005a88:	08005ab5 	.word	0x08005ab5
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a92:	e2f0      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9a:	e2ec      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa2:	e2e8      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aaa:	e2e4      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005aac:	2320      	movs	r3, #32
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab2:	e2e0      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ab4:	2340      	movs	r3, #64	; 0x40
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aba:	e2dc      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac2:	e2d8      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a4f      	ldr	r2, [pc, #316]	; (8005c08 <UART_SetConfig+0x340>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d130      	bne.n	8005b30 <UART_SetConfig+0x268>
 8005ace:	4b4c      	ldr	r3, [pc, #304]	; (8005c00 <UART_SetConfig+0x338>)
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	d826      	bhi.n	8005b28 <UART_SetConfig+0x260>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <UART_SetConfig+0x218>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005af9 	.word	0x08005af9
 8005ae4:	08005b01 	.word	0x08005b01
 8005ae8:	08005b09 	.word	0x08005b09
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e2ba      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b00:	2304      	movs	r3, #4
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b06:	e2b6      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0e:	e2b2      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b10:	2310      	movs	r3, #16
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e2ae      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b18:	2320      	movs	r3, #32
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e2aa      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e2a6      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e2a2      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a35      	ldr	r2, [pc, #212]	; (8005c0c <UART_SetConfig+0x344>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d130      	bne.n	8005b9c <UART_SetConfig+0x2d4>
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <UART_SetConfig+0x338>)
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d826      	bhi.n	8005b94 <UART_SetConfig+0x2cc>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x284>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b65 	.word	0x08005b65
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005b75 	.word	0x08005b75
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e284      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e280      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b74:	2308      	movs	r3, #8
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e27c      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e278      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b84:	2320      	movs	r3, #32
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e274      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b8c:	2340      	movs	r3, #64	; 0x40
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e270      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e26c      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <UART_SetConfig+0x348>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d142      	bne.n	8005c2c <UART_SetConfig+0x364>
 8005ba6:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <UART_SetConfig+0x338>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d838      	bhi.n	8005c24 <UART_SetConfig+0x35c>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <UART_SetConfig+0x2f0>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bd1 	.word	0x08005bd1
 8005bbc:	08005bd9 	.word	0x08005bd9
 8005bc0:	08005be1 	.word	0x08005be1
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e24e      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e24a      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e246      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e242      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005bf0:	cfff69f3 	.word	0xcfff69f3
 8005bf4:	58000c00 	.word	0x58000c00
 8005bf8:	11fff4ff 	.word	0x11fff4ff
 8005bfc:	40011000 	.word	0x40011000
 8005c00:	58024400 	.word	0x58024400
 8005c04:	40004400 	.word	0x40004400
 8005c08:	40004800 	.word	0x40004800
 8005c0c:	40004c00 	.word	0x40004c00
 8005c10:	40005000 	.word	0x40005000
 8005c14:	2320      	movs	r3, #32
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e22c      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e228      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e224      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4ab1      	ldr	r2, [pc, #708]	; (8005ef8 <UART_SetConfig+0x630>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d176      	bne.n	8005d24 <UART_SetConfig+0x45c>
 8005c36:	4bb1      	ldr	r3, [pc, #708]	; (8005efc <UART_SetConfig+0x634>)
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c3e:	2b28      	cmp	r3, #40	; 0x28
 8005c40:	d86c      	bhi.n	8005d1c <UART_SetConfig+0x454>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0x380>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005ced 	.word	0x08005ced
 8005c4c:	08005d1d 	.word	0x08005d1d
 8005c50:	08005d1d 	.word	0x08005d1d
 8005c54:	08005d1d 	.word	0x08005d1d
 8005c58:	08005d1d 	.word	0x08005d1d
 8005c5c:	08005d1d 	.word	0x08005d1d
 8005c60:	08005d1d 	.word	0x08005d1d
 8005c64:	08005d1d 	.word	0x08005d1d
 8005c68:	08005cf5 	.word	0x08005cf5
 8005c6c:	08005d1d 	.word	0x08005d1d
 8005c70:	08005d1d 	.word	0x08005d1d
 8005c74:	08005d1d 	.word	0x08005d1d
 8005c78:	08005d1d 	.word	0x08005d1d
 8005c7c:	08005d1d 	.word	0x08005d1d
 8005c80:	08005d1d 	.word	0x08005d1d
 8005c84:	08005d1d 	.word	0x08005d1d
 8005c88:	08005cfd 	.word	0x08005cfd
 8005c8c:	08005d1d 	.word	0x08005d1d
 8005c90:	08005d1d 	.word	0x08005d1d
 8005c94:	08005d1d 	.word	0x08005d1d
 8005c98:	08005d1d 	.word	0x08005d1d
 8005c9c:	08005d1d 	.word	0x08005d1d
 8005ca0:	08005d1d 	.word	0x08005d1d
 8005ca4:	08005d1d 	.word	0x08005d1d
 8005ca8:	08005d05 	.word	0x08005d05
 8005cac:	08005d1d 	.word	0x08005d1d
 8005cb0:	08005d1d 	.word	0x08005d1d
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005d1d 	.word	0x08005d1d
 8005cbc:	08005d1d 	.word	0x08005d1d
 8005cc0:	08005d1d 	.word	0x08005d1d
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d1d 	.word	0x08005d1d
 8005cd0:	08005d1d 	.word	0x08005d1d
 8005cd4:	08005d1d 	.word	0x08005d1d
 8005cd8:	08005d1d 	.word	0x08005d1d
 8005cdc:	08005d1d 	.word	0x08005d1d
 8005ce0:	08005d1d 	.word	0x08005d1d
 8005ce4:	08005d1d 	.word	0x08005d1d
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e1c0      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e1bc      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e1b8      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e1b4      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e1b0      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e1ac      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d22:	e1a8      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a75      	ldr	r2, [pc, #468]	; (8005f00 <UART_SetConfig+0x638>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d130      	bne.n	8005d90 <UART_SetConfig+0x4c8>
 8005d2e:	4b73      	ldr	r3, [pc, #460]	; (8005efc <UART_SetConfig+0x634>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d826      	bhi.n	8005d88 <UART_SetConfig+0x4c0>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x478>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d59 	.word	0x08005d59
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d69 	.word	0x08005d69
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e18a      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e186      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e182      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e17e      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e17a      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d86:	e176      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8e:	e172      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a5b      	ldr	r2, [pc, #364]	; (8005f04 <UART_SetConfig+0x63c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d130      	bne.n	8005dfc <UART_SetConfig+0x534>
 8005d9a:	4b58      	ldr	r3, [pc, #352]	; (8005efc <UART_SetConfig+0x634>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d826      	bhi.n	8005df4 <UART_SetConfig+0x52c>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0x4e4>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc5 	.word	0x08005dc5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e154      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e150      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e14c      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de2:	e148      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005de4:	2320      	movs	r3, #32
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e144      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005dec:	2340      	movs	r3, #64	; 0x40
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df2:	e140      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfa:	e13c      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a41      	ldr	r2, [pc, #260]	; (8005f08 <UART_SetConfig+0x640>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f040 8082 	bne.w	8005f0c <UART_SetConfig+0x644>
 8005e08:	4b3c      	ldr	r3, [pc, #240]	; (8005efc <UART_SetConfig+0x634>)
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e10:	2b28      	cmp	r3, #40	; 0x28
 8005e12:	d86d      	bhi.n	8005ef0 <UART_SetConfig+0x628>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x554>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005ec1 	.word	0x08005ec1
 8005e20:	08005ef1 	.word	0x08005ef1
 8005e24:	08005ef1 	.word	0x08005ef1
 8005e28:	08005ef1 	.word	0x08005ef1
 8005e2c:	08005ef1 	.word	0x08005ef1
 8005e30:	08005ef1 	.word	0x08005ef1
 8005e34:	08005ef1 	.word	0x08005ef1
 8005e38:	08005ef1 	.word	0x08005ef1
 8005e3c:	08005ec9 	.word	0x08005ec9
 8005e40:	08005ef1 	.word	0x08005ef1
 8005e44:	08005ef1 	.word	0x08005ef1
 8005e48:	08005ef1 	.word	0x08005ef1
 8005e4c:	08005ef1 	.word	0x08005ef1
 8005e50:	08005ef1 	.word	0x08005ef1
 8005e54:	08005ef1 	.word	0x08005ef1
 8005e58:	08005ef1 	.word	0x08005ef1
 8005e5c:	08005ed1 	.word	0x08005ed1
 8005e60:	08005ef1 	.word	0x08005ef1
 8005e64:	08005ef1 	.word	0x08005ef1
 8005e68:	08005ef1 	.word	0x08005ef1
 8005e6c:	08005ef1 	.word	0x08005ef1
 8005e70:	08005ef1 	.word	0x08005ef1
 8005e74:	08005ef1 	.word	0x08005ef1
 8005e78:	08005ef1 	.word	0x08005ef1
 8005e7c:	08005ed9 	.word	0x08005ed9
 8005e80:	08005ef1 	.word	0x08005ef1
 8005e84:	08005ef1 	.word	0x08005ef1
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005ef1 	.word	0x08005ef1
 8005e90:	08005ef1 	.word	0x08005ef1
 8005e94:	08005ef1 	.word	0x08005ef1
 8005e98:	08005ef1 	.word	0x08005ef1
 8005e9c:	08005ee1 	.word	0x08005ee1
 8005ea0:	08005ef1 	.word	0x08005ef1
 8005ea4:	08005ef1 	.word	0x08005ef1
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005ef1 	.word	0x08005ef1
 8005eb0:	08005ef1 	.word	0x08005ef1
 8005eb4:	08005ef1 	.word	0x08005ef1
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e0d6      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ece:	e0d2      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed6:	e0ce      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e0ca      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e0c6      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ee8:	2340      	movs	r3, #64	; 0x40
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e0c2      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e0be      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ef8:	40011400 	.word	0x40011400
 8005efc:	58024400 	.word	0x58024400
 8005f00:	40007800 	.word	0x40007800
 8005f04:	40007c00 	.word	0x40007c00
 8005f08:	40011800 	.word	0x40011800
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4aad      	ldr	r2, [pc, #692]	; (80061c8 <UART_SetConfig+0x900>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d176      	bne.n	8006004 <UART_SetConfig+0x73c>
 8005f16:	4bad      	ldr	r3, [pc, #692]	; (80061cc <UART_SetConfig+0x904>)
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f1e:	2b28      	cmp	r3, #40	; 0x28
 8005f20:	d86c      	bhi.n	8005ffc <UART_SetConfig+0x734>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x660>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005fcd 	.word	0x08005fcd
 8005f2c:	08005ffd 	.word	0x08005ffd
 8005f30:	08005ffd 	.word	0x08005ffd
 8005f34:	08005ffd 	.word	0x08005ffd
 8005f38:	08005ffd 	.word	0x08005ffd
 8005f3c:	08005ffd 	.word	0x08005ffd
 8005f40:	08005ffd 	.word	0x08005ffd
 8005f44:	08005ffd 	.word	0x08005ffd
 8005f48:	08005fd5 	.word	0x08005fd5
 8005f4c:	08005ffd 	.word	0x08005ffd
 8005f50:	08005ffd 	.word	0x08005ffd
 8005f54:	08005ffd 	.word	0x08005ffd
 8005f58:	08005ffd 	.word	0x08005ffd
 8005f5c:	08005ffd 	.word	0x08005ffd
 8005f60:	08005ffd 	.word	0x08005ffd
 8005f64:	08005ffd 	.word	0x08005ffd
 8005f68:	08005fdd 	.word	0x08005fdd
 8005f6c:	08005ffd 	.word	0x08005ffd
 8005f70:	08005ffd 	.word	0x08005ffd
 8005f74:	08005ffd 	.word	0x08005ffd
 8005f78:	08005ffd 	.word	0x08005ffd
 8005f7c:	08005ffd 	.word	0x08005ffd
 8005f80:	08005ffd 	.word	0x08005ffd
 8005f84:	08005ffd 	.word	0x08005ffd
 8005f88:	08005fe5 	.word	0x08005fe5
 8005f8c:	08005ffd 	.word	0x08005ffd
 8005f90:	08005ffd 	.word	0x08005ffd
 8005f94:	08005ffd 	.word	0x08005ffd
 8005f98:	08005ffd 	.word	0x08005ffd
 8005f9c:	08005ffd 	.word	0x08005ffd
 8005fa0:	08005ffd 	.word	0x08005ffd
 8005fa4:	08005ffd 	.word	0x08005ffd
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005ffd 	.word	0x08005ffd
 8005fb0:	08005ffd 	.word	0x08005ffd
 8005fb4:	08005ffd 	.word	0x08005ffd
 8005fb8:	08005ffd 	.word	0x08005ffd
 8005fbc:	08005ffd 	.word	0x08005ffd
 8005fc0:	08005ffd 	.word	0x08005ffd
 8005fc4:	08005ffd 	.word	0x08005ffd
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e050      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e04c      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e048      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e044      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005fec:	2320      	movs	r3, #32
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e040      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e03c      	b.n	8006076 <UART_SetConfig+0x7ae>
 8005ffc:	2380      	movs	r3, #128	; 0x80
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e038      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a71      	ldr	r2, [pc, #452]	; (80061d0 <UART_SetConfig+0x908>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d130      	bne.n	8006070 <UART_SetConfig+0x7a8>
 800600e:	4b6f      	ldr	r3, [pc, #444]	; (80061cc <UART_SetConfig+0x904>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b05      	cmp	r3, #5
 8006018:	d826      	bhi.n	8006068 <UART_SetConfig+0x7a0>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x758>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006039 	.word	0x08006039
 8006024:	08006041 	.word	0x08006041
 8006028:	08006049 	.word	0x08006049
 800602c:	08006051 	.word	0x08006051
 8006030:	08006059 	.word	0x08006059
 8006034:	08006061 	.word	0x08006061
 8006038:	2302      	movs	r3, #2
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e01a      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e016      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e012      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e00e      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006058:	2320      	movs	r3, #32
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e00a      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e006      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e002      	b.n	8006076 <UART_SetConfig+0x7ae>
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a55      	ldr	r2, [pc, #340]	; (80061d0 <UART_SetConfig+0x908>)
 800607c:	4293      	cmp	r3, r2
 800607e:	f040 80f8 	bne.w	8006272 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006082:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006086:	2b20      	cmp	r3, #32
 8006088:	dc46      	bgt.n	8006118 <UART_SetConfig+0x850>
 800608a:	2b02      	cmp	r3, #2
 800608c:	db75      	blt.n	800617a <UART_SetConfig+0x8b2>
 800608e:	3b02      	subs	r3, #2
 8006090:	2b1e      	cmp	r3, #30
 8006092:	d872      	bhi.n	800617a <UART_SetConfig+0x8b2>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x7d4>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	0800611f 	.word	0x0800611f
 80060a0:	0800617b 	.word	0x0800617b
 80060a4:	08006127 	.word	0x08006127
 80060a8:	0800617b 	.word	0x0800617b
 80060ac:	0800617b 	.word	0x0800617b
 80060b0:	0800617b 	.word	0x0800617b
 80060b4:	08006137 	.word	0x08006137
 80060b8:	0800617b 	.word	0x0800617b
 80060bc:	0800617b 	.word	0x0800617b
 80060c0:	0800617b 	.word	0x0800617b
 80060c4:	0800617b 	.word	0x0800617b
 80060c8:	0800617b 	.word	0x0800617b
 80060cc:	0800617b 	.word	0x0800617b
 80060d0:	0800617b 	.word	0x0800617b
 80060d4:	08006147 	.word	0x08006147
 80060d8:	0800617b 	.word	0x0800617b
 80060dc:	0800617b 	.word	0x0800617b
 80060e0:	0800617b 	.word	0x0800617b
 80060e4:	0800617b 	.word	0x0800617b
 80060e8:	0800617b 	.word	0x0800617b
 80060ec:	0800617b 	.word	0x0800617b
 80060f0:	0800617b 	.word	0x0800617b
 80060f4:	0800617b 	.word	0x0800617b
 80060f8:	0800617b 	.word	0x0800617b
 80060fc:	0800617b 	.word	0x0800617b
 8006100:	0800617b 	.word	0x0800617b
 8006104:	0800617b 	.word	0x0800617b
 8006108:	0800617b 	.word	0x0800617b
 800610c:	0800617b 	.word	0x0800617b
 8006110:	0800617b 	.word	0x0800617b
 8006114:	0800616d 	.word	0x0800616d
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d02a      	beq.n	8006172 <UART_SetConfig+0x8aa>
 800611c:	e02d      	b.n	800617a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800611e:	f7fe faad 	bl	800467c <HAL_RCCEx_GetD3PCLK1Freq>
 8006122:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006124:	e02f      	b.n	8006186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fabc 	bl	80046a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006134:	e027      	b.n	8006186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006136:	f107 0318 	add.w	r3, r7, #24
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fc08 	bl	8004950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006144:	e01f      	b.n	8006186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006146:	4b21      	ldr	r3, [pc, #132]	; (80061cc <UART_SetConfig+0x904>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006152:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <UART_SetConfig+0x904>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <UART_SetConfig+0x90c>)
 800615e:	fa22 f303 	lsr.w	r3, r2, r3
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006164:	e00f      	b.n	8006186 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <UART_SetConfig+0x90c>)
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800616a:	e00c      	b.n	8006186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <UART_SetConfig+0x910>)
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006170:	e009      	b.n	8006186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006178:	e005      	b.n	8006186 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006184:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 81ee 	beq.w	800656a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	4a12      	ldr	r2, [pc, #72]	; (80061dc <UART_SetConfig+0x914>)
 8006194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006198:	461a      	mov	r2, r3
 800619a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619c:	fbb3 f3f2 	udiv	r3, r3, r2
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	4413      	add	r3, r2
 80061ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d305      	bcc.n	80061be <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d910      	bls.n	80061e0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061c4:	e1d1      	b.n	800656a <UART_SetConfig+0xca2>
 80061c6:	bf00      	nop
 80061c8:	40011c00 	.word	0x40011c00
 80061cc:	58024400 	.word	0x58024400
 80061d0:	58000c00 	.word	0x58000c00
 80061d4:	03d09000 	.word	0x03d09000
 80061d8:	003d0900 	.word	0x003d0900
 80061dc:	080082b8 	.word	0x080082b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e2:	2200      	movs	r2, #0
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	60fa      	str	r2, [r7, #12]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	4ac0      	ldr	r2, [pc, #768]	; (80064f0 <UART_SetConfig+0xc28>)
 80061ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2200      	movs	r2, #0
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006202:	f7fa f8c5 	bl	8000390 <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4610      	mov	r0, r2
 800620c:	4619      	mov	r1, r3
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	020b      	lsls	r3, r1, #8
 8006218:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800621c:	0202      	lsls	r2, r0, #8
 800621e:	6979      	ldr	r1, [r7, #20]
 8006220:	6849      	ldr	r1, [r1, #4]
 8006222:	0849      	lsrs	r1, r1, #1
 8006224:	2000      	movs	r0, #0
 8006226:	460c      	mov	r4, r1
 8006228:	4605      	mov	r5, r0
 800622a:	eb12 0804 	adds.w	r8, r2, r4
 800622e:	eb43 0905 	adc.w	r9, r3, r5
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	469a      	mov	sl, r3
 800623a:	4693      	mov	fp, r2
 800623c:	4652      	mov	r2, sl
 800623e:	465b      	mov	r3, fp
 8006240:	4640      	mov	r0, r8
 8006242:	4649      	mov	r1, r9
 8006244:	f7fa f8a4 	bl	8000390 <__aeabi_uldivmod>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4613      	mov	r3, r2
 800624e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006256:	d308      	bcc.n	800626a <UART_SetConfig+0x9a2>
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800625e:	d204      	bcs.n	800626a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006266:	60da      	str	r2, [r3, #12]
 8006268:	e17f      	b.n	800656a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006270:	e17b      	b.n	800656a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627a:	f040 80bd 	bne.w	80063f8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800627e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006282:	2b20      	cmp	r3, #32
 8006284:	dc48      	bgt.n	8006318 <UART_SetConfig+0xa50>
 8006286:	2b00      	cmp	r3, #0
 8006288:	db7b      	blt.n	8006382 <UART_SetConfig+0xaba>
 800628a:	2b20      	cmp	r3, #32
 800628c:	d879      	bhi.n	8006382 <UART_SetConfig+0xaba>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0x9cc>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	0800631f 	.word	0x0800631f
 8006298:	08006327 	.word	0x08006327
 800629c:	08006383 	.word	0x08006383
 80062a0:	08006383 	.word	0x08006383
 80062a4:	0800632f 	.word	0x0800632f
 80062a8:	08006383 	.word	0x08006383
 80062ac:	08006383 	.word	0x08006383
 80062b0:	08006383 	.word	0x08006383
 80062b4:	0800633f 	.word	0x0800633f
 80062b8:	08006383 	.word	0x08006383
 80062bc:	08006383 	.word	0x08006383
 80062c0:	08006383 	.word	0x08006383
 80062c4:	08006383 	.word	0x08006383
 80062c8:	08006383 	.word	0x08006383
 80062cc:	08006383 	.word	0x08006383
 80062d0:	08006383 	.word	0x08006383
 80062d4:	0800634f 	.word	0x0800634f
 80062d8:	08006383 	.word	0x08006383
 80062dc:	08006383 	.word	0x08006383
 80062e0:	08006383 	.word	0x08006383
 80062e4:	08006383 	.word	0x08006383
 80062e8:	08006383 	.word	0x08006383
 80062ec:	08006383 	.word	0x08006383
 80062f0:	08006383 	.word	0x08006383
 80062f4:	08006383 	.word	0x08006383
 80062f8:	08006383 	.word	0x08006383
 80062fc:	08006383 	.word	0x08006383
 8006300:	08006383 	.word	0x08006383
 8006304:	08006383 	.word	0x08006383
 8006308:	08006383 	.word	0x08006383
 800630c:	08006383 	.word	0x08006383
 8006310:	08006383 	.word	0x08006383
 8006314:	08006375 	.word	0x08006375
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d02e      	beq.n	800637a <UART_SetConfig+0xab2>
 800631c:	e031      	b.n	8006382 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631e:	f7fc ffc3 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8006322:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006324:	e033      	b.n	800638e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006326:	f7fc ffd5 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 800632a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800632c:	e02f      	b.n	800638e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe f9b8 	bl	80046a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800633c:	e027      	b.n	800638e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800633e:	f107 0318 	add.w	r3, r7, #24
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe fb04 	bl	8004950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800634c:	e01f      	b.n	800638e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800634e:	4b69      	ldr	r3, [pc, #420]	; (80064f4 <UART_SetConfig+0xc2c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800635a:	4b66      	ldr	r3, [pc, #408]	; (80064f4 <UART_SetConfig+0xc2c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	08db      	lsrs	r3, r3, #3
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	4a64      	ldr	r2, [pc, #400]	; (80064f8 <UART_SetConfig+0xc30>)
 8006366:	fa22 f303 	lsr.w	r3, r2, r3
 800636a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800636c:	e00f      	b.n	800638e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800636e:	4b62      	ldr	r3, [pc, #392]	; (80064f8 <UART_SetConfig+0xc30>)
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006372:	e00c      	b.n	800638e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006374:	4b61      	ldr	r3, [pc, #388]	; (80064fc <UART_SetConfig+0xc34>)
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006378:	e009      	b.n	800638e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006380:	e005      	b.n	800638e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800638c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80ea 	beq.w	800656a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	4a55      	ldr	r2, [pc, #340]	; (80064f0 <UART_SetConfig+0xc28>)
 800639c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a0:	461a      	mov	r2, r3
 80063a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a8:	005a      	lsls	r2, r3, #1
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	441a      	add	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	2b0f      	cmp	r3, #15
 80063c0:	d916      	bls.n	80063f0 <UART_SetConfig+0xb28>
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c8:	d212      	bcs.n	80063f0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f023 030f 	bic.w	r3, r3, #15
 80063d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	b29a      	uxth	r2, r3
 80063e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063e2:	4313      	orrs	r3, r2
 80063e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	e0bc      	b.n	800656a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80063f6:	e0b8      	b.n	800656a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	dc4b      	bgt.n	8006498 <UART_SetConfig+0xbd0>
 8006400:	2b00      	cmp	r3, #0
 8006402:	f2c0 8087 	blt.w	8006514 <UART_SetConfig+0xc4c>
 8006406:	2b20      	cmp	r3, #32
 8006408:	f200 8084 	bhi.w	8006514 <UART_SetConfig+0xc4c>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <UART_SetConfig+0xb4c>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	0800649f 	.word	0x0800649f
 8006418:	080064a7 	.word	0x080064a7
 800641c:	08006515 	.word	0x08006515
 8006420:	08006515 	.word	0x08006515
 8006424:	080064af 	.word	0x080064af
 8006428:	08006515 	.word	0x08006515
 800642c:	08006515 	.word	0x08006515
 8006430:	08006515 	.word	0x08006515
 8006434:	080064bf 	.word	0x080064bf
 8006438:	08006515 	.word	0x08006515
 800643c:	08006515 	.word	0x08006515
 8006440:	08006515 	.word	0x08006515
 8006444:	08006515 	.word	0x08006515
 8006448:	08006515 	.word	0x08006515
 800644c:	08006515 	.word	0x08006515
 8006450:	08006515 	.word	0x08006515
 8006454:	080064cf 	.word	0x080064cf
 8006458:	08006515 	.word	0x08006515
 800645c:	08006515 	.word	0x08006515
 8006460:	08006515 	.word	0x08006515
 8006464:	08006515 	.word	0x08006515
 8006468:	08006515 	.word	0x08006515
 800646c:	08006515 	.word	0x08006515
 8006470:	08006515 	.word	0x08006515
 8006474:	08006515 	.word	0x08006515
 8006478:	08006515 	.word	0x08006515
 800647c:	08006515 	.word	0x08006515
 8006480:	08006515 	.word	0x08006515
 8006484:	08006515 	.word	0x08006515
 8006488:	08006515 	.word	0x08006515
 800648c:	08006515 	.word	0x08006515
 8006490:	08006515 	.word	0x08006515
 8006494:	08006507 	.word	0x08006507
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d037      	beq.n	800650c <UART_SetConfig+0xc44>
 800649c:	e03a      	b.n	8006514 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800649e:	f7fc ff03 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80064a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064a4:	e03c      	b.n	8006520 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a6:	f7fc ff15 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 80064aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064ac:	e038      	b.n	8006520 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe f8f8 	bl	80046a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064bc:	e030      	b.n	8006520 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064be:	f107 0318 	add.w	r3, r7, #24
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fa44 	bl	8004950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064cc:	e028      	b.n	8006520 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <UART_SetConfig+0xc2c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d012      	beq.n	8006500 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <UART_SetConfig+0xc2c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	08db      	lsrs	r3, r3, #3
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	4a04      	ldr	r2, [pc, #16]	; (80064f8 <UART_SetConfig+0xc30>)
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064ec:	e018      	b.n	8006520 <UART_SetConfig+0xc58>
 80064ee:	bf00      	nop
 80064f0:	080082b8 	.word	0x080082b8
 80064f4:	58024400 	.word	0x58024400
 80064f8:	03d09000 	.word	0x03d09000
 80064fc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006500:	4b24      	ldr	r3, [pc, #144]	; (8006594 <UART_SetConfig+0xccc>)
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006504:	e00c      	b.n	8006520 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006506:	4b24      	ldr	r3, [pc, #144]	; (8006598 <UART_SetConfig+0xcd0>)
 8006508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650a:	e009      	b.n	8006520 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006512:	e005      	b.n	8006520 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800651e:	bf00      	nop
    }

    if (pclk != 0U)
 8006520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d021      	beq.n	800656a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	4a1c      	ldr	r2, [pc, #112]	; (800659c <UART_SetConfig+0xcd4>)
 800652c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006530:	461a      	mov	r2, r3
 8006532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006534:	fbb3 f2f2 	udiv	r2, r3, r2
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	441a      	add	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	2b0f      	cmp	r3, #15
 800654e:	d909      	bls.n	8006564 <UART_SetConfig+0xc9c>
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006556:	d205      	bcs.n	8006564 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	b29a      	uxth	r2, r3
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60da      	str	r2, [r3, #12]
 8006562:	e002      	b.n	800656a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2201      	movs	r2, #1
 800656e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2201      	movs	r2, #1
 8006576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006586:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800658a:	4618      	mov	r0, r3
 800658c:	3748      	adds	r7, #72	; 0x48
 800658e:	46bd      	mov	sp, r7
 8006590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006594:	03d09000 	.word	0x03d09000
 8006598:	003d0900 	.word	0x003d0900
 800659c:	080082b8 	.word	0x080082b8

080065a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01a      	beq.n	80066b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669e:	d10a      	bne.n	80066b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b098      	sub	sp, #96	; 0x60
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066f4:	f7fa fd64 	bl	80011c0 <HAL_GetTick>
 80066f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d12f      	bne.n	8006768 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f88e 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d022      	beq.n	8006768 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006736:	653b      	str	r3, [r7, #80]	; 0x50
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006740:	647b      	str	r3, [r7, #68]	; 0x44
 8006742:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e6      	bne.n	8006722 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e063      	b.n	8006830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b04      	cmp	r3, #4
 8006774:	d149      	bne.n	800680a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800677e:	2200      	movs	r2, #0
 8006780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f857 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d03c      	beq.n	800680a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	623b      	str	r3, [r7, #32]
   return(result);
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ae:	633b      	str	r3, [r7, #48]	; 0x30
 80067b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e6      	bne.n	8006790 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e2:	61fa      	str	r2, [r7, #28]
 80067e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	69b9      	ldr	r1, [r7, #24]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	617b      	str	r3, [r7, #20]
   return(result);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e012      	b.n	8006830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3758      	adds	r7, #88	; 0x58
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	e049      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006850:	d045      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fa fcb5 	bl	80011c0 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <UART_WaitOnFlagUntilTimeout+0x30>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e048      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d031      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d110      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2208      	movs	r2, #8
 800688e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f95b 	bl	8006b4c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2208      	movs	r2, #8
 800689a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e029      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b8:	d111      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f941 	bl	8006b4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e00f      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d0a6      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006908:	b480      	push	{r7}
 800690a:	b0a3      	sub	sp, #140	; 0x8c
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693a:	d10e      	bne.n	800695a <UART_Start_Receive_IT+0x52>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <UART_Start_Receive_IT+0x48>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f240 12ff 	movw	r2, #511	; 0x1ff
 800694a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800694e:	e02d      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	22ff      	movs	r2, #255	; 0xff
 8006954:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006958:	e028      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10d      	bne.n	800697e <UART_Start_Receive_IT+0x76>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <UART_Start_Receive_IT+0x6c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	22ff      	movs	r2, #255	; 0xff
 800696e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006972:	e01b      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	227f      	movs	r2, #127	; 0x7f
 8006978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800697c:	e016      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006986:	d10d      	bne.n	80069a4 <UART_Start_Receive_IT+0x9c>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <UART_Start_Receive_IT+0x92>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	227f      	movs	r2, #127	; 0x7f
 8006994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006998:	e008      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	223f      	movs	r2, #63	; 0x3f
 800699e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069a2:	e003      	b.n	80069ac <UART_Start_Receive_IT+0xa4>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2222      	movs	r2, #34	; 0x22
 80069b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80069cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ce:	f043 0301 	orr.w	r3, r3, #1
 80069d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80069e0:	673a      	str	r2, [r7, #112]	; 0x70
 80069e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80069e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80069ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e3      	bne.n	80069bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fc:	d14f      	bne.n	8006a9e <UART_Start_Receive_IT+0x196>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a04:	88fa      	ldrh	r2, [r7, #6]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d349      	bcc.n	8006a9e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a12:	d107      	bne.n	8006a24 <UART_Start_Receive_IT+0x11c>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a47      	ldr	r2, [pc, #284]	; (8006b3c <UART_Start_Receive_IT+0x234>)
 8006a20:	675a      	str	r2, [r3, #116]	; 0x74
 8006a22:	e002      	b.n	8006a2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a46      	ldr	r2, [pc, #280]	; (8006b40 <UART_Start_Receive_IT+0x238>)
 8006a28:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01a      	beq.n	8006a68 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a56:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e4      	bne.n	8006a32 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3308      	adds	r3, #8
 8006a86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006a88:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <UART_Start_Receive_IT+0x160>
 8006a9c:	e046      	b.n	8006b2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa6:	d107      	bne.n	8006ab8 <UART_Start_Receive_IT+0x1b0>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a24      	ldr	r2, [pc, #144]	; (8006b44 <UART_Start_Receive_IT+0x23c>)
 8006ab4:	675a      	str	r2, [r3, #116]	; 0x74
 8006ab6:	e002      	b.n	8006abe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a23      	ldr	r2, [pc, #140]	; (8006b48 <UART_Start_Receive_IT+0x240>)
 8006abc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d019      	beq.n	8006afa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006ada:	677b      	str	r3, [r7, #116]	; 0x74
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e6      	bne.n	8006ac6 <UART_Start_Receive_IT+0x1be>
 8006af8:	e018      	b.n	8006b2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	613b      	str	r3, [r7, #16]
   return(result);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f043 0320 	orr.w	r3, r3, #32
 8006b0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	69f9      	ldr	r1, [r7, #28]
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	378c      	adds	r7, #140	; 0x8c
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	0800736d 	.word	0x0800736d
 8006b40:	0800700d 	.word	0x0800700d
 8006b44:	08006e55 	.word	0x08006e55
 8006b48:	08006c9d 	.word	0x08006c9d

08006b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b095      	sub	sp, #84	; 0x54
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b72:	643b      	str	r3, [r7, #64]	; 0x40
 8006b74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e6      	bne.n	8006b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <UART_EndRxTransfer+0xc8>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d118      	bne.n	8006bf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f023 0310 	bic.w	r3, r3, #16
 8006bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6979      	ldr	r1, [r7, #20]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	613b      	str	r3, [r7, #16]
   return(result);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e6      	bne.n	8006bc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c08:	bf00      	nop
 8006c0a:	3754      	adds	r7, #84	; 0x54
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	effffffe 	.word	0xeffffffe

08006c18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7fe fe30 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	61bb      	str	r3, [r7, #24]
 8006c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6979      	ldr	r1, [r7, #20]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	613b      	str	r3, [r7, #16]
   return(result);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e6      	bne.n	8006c4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fe fdfb 	bl	8005888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c92:	bf00      	nop
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b09c      	sub	sp, #112	; 0x70
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006caa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb4:	2b22      	cmp	r3, #34	; 0x22
 8006cb6:	f040 80be 	bne.w	8006e36 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006cc8:	b2d9      	uxtb	r1, r3
 8006cca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	400a      	ands	r2, r1
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f040 80a1 	bne.w	8006e46 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e6      	bne.n	8006d04 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d56:	647a      	str	r2, [r7, #68]	; 0x44
 8006d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a33      	ldr	r2, [pc, #204]	; (8006e50 <UART_RxISR_8BIT+0x1b4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01f      	beq.n	8006dc8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	623b      	str	r3, [r7, #32]
   return(result);
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006daa:	663b      	str	r3, [r7, #96]	; 0x60
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db4:	633b      	str	r3, [r7, #48]	; 0x30
 8006db6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e6      	bne.n	8006d96 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d12e      	bne.n	8006e2e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	69b9      	ldr	r1, [r7, #24]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	617b      	str	r3, [r7, #20]
   return(result);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e6      	bne.n	8006dd6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b10      	cmp	r3, #16
 8006e14:	d103      	bne.n	8006e1e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2210      	movs	r2, #16
 8006e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fe fd42 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e2c:	e00b      	b.n	8006e46 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fa f8fa 	bl	8001028 <HAL_UART_RxCpltCallback>
}
 8006e34:	e007      	b.n	8006e46 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0208 	orr.w	r2, r2, #8
 8006e44:	619a      	str	r2, [r3, #24]
}
 8006e46:	bf00      	nop
 8006e48:	3770      	adds	r7, #112	; 0x70
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	58000c00 	.word	0x58000c00

08006e54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b09c      	sub	sp, #112	; 0x70
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e6c:	2b22      	cmp	r3, #34	; 0x22
 8006e6e:	f040 80be 	bne.w	8006fee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006e86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	1c9a      	adds	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 80a1 	bne.w	8006ffe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eda:	657b      	str	r3, [r7, #84]	; 0x54
 8006edc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e6      	bne.n	8006ebc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	663b      	str	r3, [r7, #96]	; 0x60
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f0e:	643a      	str	r2, [r7, #64]	; 0x40
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e5      	bne.n	8006eee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a33      	ldr	r2, [pc, #204]	; (8007008 <UART_RxISR_16BIT+0x1b4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d01f      	beq.n	8006f80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d018      	beq.n	8006f80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d12e      	bne.n	8006fe6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f023 0310 	bic.w	r3, r3, #16
 8006fa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6979      	ldr	r1, [r7, #20]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e6      	bne.n	8006f8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d103      	bne.n	8006fd6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fe fc66 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fe4:	e00b      	b.n	8006ffe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa f81e 	bl	8001028 <HAL_UART_RxCpltCallback>
}
 8006fec:	e007      	b.n	8006ffe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0208 	orr.w	r2, r2, #8
 8006ffc:	619a      	str	r2, [r3, #24]
}
 8006ffe:	bf00      	nop
 8007000:	3770      	adds	r7, #112	; 0x70
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	58000c00 	.word	0x58000c00

0800700c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0ac      	sub	sp, #176	; 0xb0
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800701a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007042:	2b22      	cmp	r3, #34	; 0x22
 8007044:	f040 8180 	bne.w	8007348 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800704e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007052:	e123      	b.n	800729c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800705e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007062:	b2d9      	uxtb	r1, r3
 8007064:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007068:	b2da      	uxtb	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	400a      	ands	r2, r1
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800709a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d053      	beq.n	800714e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d011      	beq.n	80070d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80070b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	f043 0201 	orr.w	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d011      	beq.n	8007106 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80070e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2202      	movs	r2, #2
 80070f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fc:	f043 0204 	orr.w	r2, r3, #4
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d011      	beq.n	8007136 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2204      	movs	r2, #4
 8007124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	f043 0202 	orr.w	r2, r3, #2
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713c:	2b00      	cmp	r3, #0
 800713e:	d006      	beq.n	800714e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fe fbab 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 80a0 	bne.w	800729c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800717e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007180:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007184:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800718c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e4      	bne.n	800715c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3308      	adds	r3, #8
 8007198:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80071a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071a4:	4b6e      	ldr	r3, [pc, #440]	; (8007360 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3308      	adds	r3, #8
 80071b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80071b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80071bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80071c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e3      	bne.n	8007192 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a60      	ldr	r2, [pc, #384]	; (8007364 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d021      	beq.n	800722c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d01a      	beq.n	800722c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800720a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007218:	657b      	str	r3, [r7, #84]	; 0x54
 800721a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800721e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e4      	bne.n	80071f6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d130      	bne.n	8007296 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f023 0310 	bic.w	r3, r3, #16
 800724e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
 800725e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e4      	bne.n	800723a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	2b10      	cmp	r3, #16
 800727c:	d103      	bne.n	8007286 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2210      	movs	r2, #16
 8007284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fe fb0e 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
 8007294:	e002      	b.n	800729c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7f9 fec6 	bl	8001028 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800729c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d006      	beq.n	80072b2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80072a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f47f aed1 	bne.w	8007054 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d049      	beq.n	8007358 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d242      	bcs.n	8007358 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3308      	adds	r3, #8
 80072d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3308      	adds	r3, #8
 80072f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80072f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e3      	bne.n	80072d2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a16      	ldr	r2, [pc, #88]	; (8007368 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800730e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	60bb      	str	r3, [r7, #8]
   return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f043 0320 	orr.w	r3, r3, #32
 8007324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6979      	ldr	r1, [r7, #20]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	613b      	str	r3, [r7, #16]
   return(result);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e4      	bne.n	8007310 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007346:	e007      	b.n	8007358 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0208 	orr.w	r2, r2, #8
 8007356:	619a      	str	r2, [r3, #24]
}
 8007358:	bf00      	nop
 800735a:	37b0      	adds	r7, #176	; 0xb0
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	effffffe 	.word	0xeffffffe
 8007364:	58000c00 	.word	0x58000c00
 8007368:	08006c9d 	.word	0x08006c9d

0800736c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b0ae      	sub	sp, #184	; 0xb8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800737a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a2:	2b22      	cmp	r3, #34	; 0x22
 80073a4:	f040 8184 	bne.w	80076b0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073ae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073b2:	e127      	b.n	8007604 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80073c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80073ca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80073ce:	4013      	ands	r3, r2
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	1c9a      	adds	r2, r3, #2
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80073fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b00      	cmp	r3, #0
 8007408:	d053      	beq.n	80074b2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800740a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d011      	beq.n	800743a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800741a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2201      	movs	r2, #1
 8007428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800743a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d011      	beq.n	800746a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2202      	movs	r2, #2
 8007458:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	f043 0204 	orr.w	r2, r3, #4
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800746a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d011      	beq.n	800749a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2204      	movs	r2, #4
 8007488:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007490:	f043 0202 	orr.w	r2, r3, #2
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d006      	beq.n	80074b2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7fe f9f9 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f040 80a2 	bne.w	8007604 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074e6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e2      	bne.n	80074c0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800750a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800750c:	4b6e      	ldr	r3, [pc, #440]	; (80076c8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800750e:	4013      	ands	r3, r2
 8007510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3308      	adds	r3, #8
 800751a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800751e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800752c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e3      	bne.n	80074fa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a60      	ldr	r2, [pc, #384]	; (80076cc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d021      	beq.n	8007594 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01a      	beq.n	8007594 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800756c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800756e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007580:	65bb      	str	r3, [r7, #88]	; 0x58
 8007582:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800758e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e4      	bne.n	800755e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d130      	bne.n	80075fe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075c4:	647b      	str	r3, [r7, #68]	; 0x44
 80075c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e4      	bne.n	80075a2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d103      	bne.n	80075ee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2210      	movs	r2, #16
 80075ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fe f95a 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
 80075fc:	e002      	b.n	8007604 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7f9 fd12 	bl	8001028 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007604:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007608:	2b00      	cmp	r3, #0
 800760a:	d006      	beq.n	800761a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800760c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	f47f aecd 	bne.w	80073b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007620:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007624:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007628:	2b00      	cmp	r3, #0
 800762a:	d049      	beq.n	80076c0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007632:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007636:	429a      	cmp	r2, r3
 8007638:	d242      	bcs.n	80076c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3308      	adds	r3, #8
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	623b      	str	r3, [r7, #32]
   return(result);
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3308      	adds	r3, #8
 800765a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800765e:	633a      	str	r2, [r7, #48]	; 0x30
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e3      	bne.n	800763a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007676:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	60fb      	str	r3, [r7, #12]
   return(result);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f043 0320 	orr.w	r3, r3, #32
 800768c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	69b9      	ldr	r1, [r7, #24]
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	617b      	str	r3, [r7, #20]
   return(result);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e4      	bne.n	8007678 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ae:	e007      	b.n	80076c0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0208 	orr.w	r2, r2, #8
 80076be:	619a      	str	r2, [r3, #24]
}
 80076c0:	bf00      	nop
 80076c2:	37b8      	adds	r7, #184	; 0xb8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	effffffe 	.word	0xeffffffe
 80076cc:	58000c00 	.word	0x58000c00
 80076d0:	08006e55 	.word	0x08006e55

080076d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_UARTEx_DisableFifoMode+0x16>
 8007722:	2302      	movs	r3, #2
 8007724:	e027      	b.n	8007776 <HAL_UARTEx_DisableFifoMode+0x66>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2224      	movs	r2, #36	; 0x24
 8007732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0201 	bic.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007754:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007796:	2302      	movs	r3, #2
 8007798:	e02d      	b.n	80077f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2224      	movs	r2, #36	; 0x24
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f850 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007812:	2302      	movs	r3, #2
 8007814:	e02d      	b.n	8007872 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	; 0x24
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f812 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007888:	2b00      	cmp	r3, #0
 800788a:	d108      	bne.n	800789e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800789c:	e031      	b.n	8007902 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800789e:	2310      	movs	r3, #16
 80078a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078a2:	2310      	movs	r3, #16
 80078a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	0e5b      	lsrs	r3, r3, #25
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	0f5b      	lsrs	r3, r3, #29
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	7b3a      	ldrb	r2, [r7, #12]
 80078ca:	4911      	ldr	r1, [pc, #68]	; (8007910 <UARTEx_SetNbDataToProcess+0x94>)
 80078cc:	5c8a      	ldrb	r2, [r1, r2]
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078d2:	7b3a      	ldrb	r2, [r7, #12]
 80078d4:	490f      	ldr	r1, [pc, #60]	; (8007914 <UARTEx_SetNbDataToProcess+0x98>)
 80078d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	7b7a      	ldrb	r2, [r7, #13]
 80078e8:	4909      	ldr	r1, [pc, #36]	; (8007910 <UARTEx_SetNbDataToProcess+0x94>)
 80078ea:	5c8a      	ldrb	r2, [r1, r2]
 80078ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078f0:	7b7a      	ldrb	r2, [r7, #13]
 80078f2:	4908      	ldr	r1, [pc, #32]	; (8007914 <UARTEx_SetNbDataToProcess+0x98>)
 80078f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	080082d0 	.word	0x080082d0
 8007914:	080082d8 	.word	0x080082d8

08007918 <__errno>:
 8007918:	4b01      	ldr	r3, [pc, #4]	; (8007920 <__errno+0x8>)
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	24000010 	.word	0x24000010

08007924 <__libc_init_array>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4d0d      	ldr	r5, [pc, #52]	; (800795c <__libc_init_array+0x38>)
 8007928:	4c0d      	ldr	r4, [pc, #52]	; (8007960 <__libc_init_array+0x3c>)
 800792a:	1b64      	subs	r4, r4, r5
 800792c:	10a4      	asrs	r4, r4, #2
 800792e:	2600      	movs	r6, #0
 8007930:	42a6      	cmp	r6, r4
 8007932:	d109      	bne.n	8007948 <__libc_init_array+0x24>
 8007934:	4d0b      	ldr	r5, [pc, #44]	; (8007964 <__libc_init_array+0x40>)
 8007936:	4c0c      	ldr	r4, [pc, #48]	; (8007968 <__libc_init_array+0x44>)
 8007938:	f000 fc8e 	bl	8008258 <_init>
 800793c:	1b64      	subs	r4, r4, r5
 800793e:	10a4      	asrs	r4, r4, #2
 8007940:	2600      	movs	r6, #0
 8007942:	42a6      	cmp	r6, r4
 8007944:	d105      	bne.n	8007952 <__libc_init_array+0x2e>
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	f855 3b04 	ldr.w	r3, [r5], #4
 800794c:	4798      	blx	r3
 800794e:	3601      	adds	r6, #1
 8007950:	e7ee      	b.n	8007930 <__libc_init_array+0xc>
 8007952:	f855 3b04 	ldr.w	r3, [r5], #4
 8007956:	4798      	blx	r3
 8007958:	3601      	adds	r6, #1
 800795a:	e7f2      	b.n	8007942 <__libc_init_array+0x1e>
 800795c:	0800831c 	.word	0x0800831c
 8007960:	0800831c 	.word	0x0800831c
 8007964:	0800831c 	.word	0x0800831c
 8007968:	08008320 	.word	0x08008320

0800796c <memset>:
 800796c:	4402      	add	r2, r0
 800796e:	4603      	mov	r3, r0
 8007970:	4293      	cmp	r3, r2
 8007972:	d100      	bne.n	8007976 <memset+0xa>
 8007974:	4770      	bx	lr
 8007976:	f803 1b01 	strb.w	r1, [r3], #1
 800797a:	e7f9      	b.n	8007970 <memset+0x4>

0800797c <siprintf>:
 800797c:	b40e      	push	{r1, r2, r3}
 800797e:	b500      	push	{lr}
 8007980:	b09c      	sub	sp, #112	; 0x70
 8007982:	ab1d      	add	r3, sp, #116	; 0x74
 8007984:	9002      	str	r0, [sp, #8]
 8007986:	9006      	str	r0, [sp, #24]
 8007988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800798c:	4809      	ldr	r0, [pc, #36]	; (80079b4 <siprintf+0x38>)
 800798e:	9107      	str	r1, [sp, #28]
 8007990:	9104      	str	r1, [sp, #16]
 8007992:	4909      	ldr	r1, [pc, #36]	; (80079b8 <siprintf+0x3c>)
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	a902      	add	r1, sp, #8
 80079a0:	f000 f868 	bl	8007a74 <_svfiprintf_r>
 80079a4:	9b02      	ldr	r3, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	b01c      	add	sp, #112	; 0x70
 80079ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b0:	b003      	add	sp, #12
 80079b2:	4770      	bx	lr
 80079b4:	24000010 	.word	0x24000010
 80079b8:	ffff0208 	.word	0xffff0208

080079bc <__ssputs_r>:
 80079bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c0:	688e      	ldr	r6, [r1, #8]
 80079c2:	429e      	cmp	r6, r3
 80079c4:	4682      	mov	sl, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	4690      	mov	r8, r2
 80079ca:	461f      	mov	r7, r3
 80079cc:	d838      	bhi.n	8007a40 <__ssputs_r+0x84>
 80079ce:	898a      	ldrh	r2, [r1, #12]
 80079d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079d4:	d032      	beq.n	8007a3c <__ssputs_r+0x80>
 80079d6:	6825      	ldr	r5, [r4, #0]
 80079d8:	6909      	ldr	r1, [r1, #16]
 80079da:	eba5 0901 	sub.w	r9, r5, r1
 80079de:	6965      	ldr	r5, [r4, #20]
 80079e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079e8:	3301      	adds	r3, #1
 80079ea:	444b      	add	r3, r9
 80079ec:	106d      	asrs	r5, r5, #1
 80079ee:	429d      	cmp	r5, r3
 80079f0:	bf38      	it	cc
 80079f2:	461d      	movcc	r5, r3
 80079f4:	0553      	lsls	r3, r2, #21
 80079f6:	d531      	bpl.n	8007a5c <__ssputs_r+0xa0>
 80079f8:	4629      	mov	r1, r5
 80079fa:	f000 fb63 	bl	80080c4 <_malloc_r>
 80079fe:	4606      	mov	r6, r0
 8007a00:	b950      	cbnz	r0, 8007a18 <__ssputs_r+0x5c>
 8007a02:	230c      	movs	r3, #12
 8007a04:	f8ca 3000 	str.w	r3, [sl]
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a18:	6921      	ldr	r1, [r4, #16]
 8007a1a:	464a      	mov	r2, r9
 8007a1c:	f000 fabe 	bl	8007f9c <memcpy>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	6126      	str	r6, [r4, #16]
 8007a2e:	6165      	str	r5, [r4, #20]
 8007a30:	444e      	add	r6, r9
 8007a32:	eba5 0509 	sub.w	r5, r5, r9
 8007a36:	6026      	str	r6, [r4, #0]
 8007a38:	60a5      	str	r5, [r4, #8]
 8007a3a:	463e      	mov	r6, r7
 8007a3c:	42be      	cmp	r6, r7
 8007a3e:	d900      	bls.n	8007a42 <__ssputs_r+0x86>
 8007a40:	463e      	mov	r6, r7
 8007a42:	6820      	ldr	r0, [r4, #0]
 8007a44:	4632      	mov	r2, r6
 8007a46:	4641      	mov	r1, r8
 8007a48:	f000 fab6 	bl	8007fb8 <memmove>
 8007a4c:	68a3      	ldr	r3, [r4, #8]
 8007a4e:	1b9b      	subs	r3, r3, r6
 8007a50:	60a3      	str	r3, [r4, #8]
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	4433      	add	r3, r6
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e7db      	b.n	8007a14 <__ssputs_r+0x58>
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	f000 fba5 	bl	80081ac <_realloc_r>
 8007a62:	4606      	mov	r6, r0
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d1e1      	bne.n	8007a2c <__ssputs_r+0x70>
 8007a68:	6921      	ldr	r1, [r4, #16]
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	f000 fabe 	bl	8007fec <_free_r>
 8007a70:	e7c7      	b.n	8007a02 <__ssputs_r+0x46>
	...

08007a74 <_svfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	4698      	mov	r8, r3
 8007a7a:	898b      	ldrh	r3, [r1, #12]
 8007a7c:	061b      	lsls	r3, r3, #24
 8007a7e:	b09d      	sub	sp, #116	; 0x74
 8007a80:	4607      	mov	r7, r0
 8007a82:	460d      	mov	r5, r1
 8007a84:	4614      	mov	r4, r2
 8007a86:	d50e      	bpl.n	8007aa6 <_svfiprintf_r+0x32>
 8007a88:	690b      	ldr	r3, [r1, #16]
 8007a8a:	b963      	cbnz	r3, 8007aa6 <_svfiprintf_r+0x32>
 8007a8c:	2140      	movs	r1, #64	; 0x40
 8007a8e:	f000 fb19 	bl	80080c4 <_malloc_r>
 8007a92:	6028      	str	r0, [r5, #0]
 8007a94:	6128      	str	r0, [r5, #16]
 8007a96:	b920      	cbnz	r0, 8007aa2 <_svfiprintf_r+0x2e>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aa0:	e0d1      	b.n	8007c46 <_svfiprintf_r+0x1d2>
 8007aa2:	2340      	movs	r3, #64	; 0x40
 8007aa4:	616b      	str	r3, [r5, #20]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aaa:	2320      	movs	r3, #32
 8007aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ab4:	2330      	movs	r3, #48	; 0x30
 8007ab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c60 <_svfiprintf_r+0x1ec>
 8007aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007abe:	f04f 0901 	mov.w	r9, #1
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	469a      	mov	sl, r3
 8007ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aca:	b10a      	cbz	r2, 8007ad0 <_svfiprintf_r+0x5c>
 8007acc:	2a25      	cmp	r2, #37	; 0x25
 8007ace:	d1f9      	bne.n	8007ac4 <_svfiprintf_r+0x50>
 8007ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ad4:	d00b      	beq.n	8007aee <_svfiprintf_r+0x7a>
 8007ad6:	465b      	mov	r3, fp
 8007ad8:	4622      	mov	r2, r4
 8007ada:	4629      	mov	r1, r5
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff ff6d 	bl	80079bc <__ssputs_r>
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	f000 80aa 	beq.w	8007c3c <_svfiprintf_r+0x1c8>
 8007ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aea:	445a      	add	r2, fp
 8007aec:	9209      	str	r2, [sp, #36]	; 0x24
 8007aee:	f89a 3000 	ldrb.w	r3, [sl]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 80a2 	beq.w	8007c3c <_svfiprintf_r+0x1c8>
 8007af8:	2300      	movs	r3, #0
 8007afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b02:	f10a 0a01 	add.w	sl, sl, #1
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	9307      	str	r3, [sp, #28]
 8007b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b10:	4654      	mov	r4, sl
 8007b12:	2205      	movs	r2, #5
 8007b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b18:	4851      	ldr	r0, [pc, #324]	; (8007c60 <_svfiprintf_r+0x1ec>)
 8007b1a:	f7f8 fbe9 	bl	80002f0 <memchr>
 8007b1e:	9a04      	ldr	r2, [sp, #16]
 8007b20:	b9d8      	cbnz	r0, 8007b5a <_svfiprintf_r+0xe6>
 8007b22:	06d0      	lsls	r0, r2, #27
 8007b24:	bf44      	itt	mi
 8007b26:	2320      	movmi	r3, #32
 8007b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b2c:	0711      	lsls	r1, r2, #28
 8007b2e:	bf44      	itt	mi
 8007b30:	232b      	movmi	r3, #43	; 0x2b
 8007b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b36:	f89a 3000 	ldrb.w	r3, [sl]
 8007b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3c:	d015      	beq.n	8007b6a <_svfiprintf_r+0xf6>
 8007b3e:	9a07      	ldr	r2, [sp, #28]
 8007b40:	4654      	mov	r4, sl
 8007b42:	2000      	movs	r0, #0
 8007b44:	f04f 0c0a 	mov.w	ip, #10
 8007b48:	4621      	mov	r1, r4
 8007b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b4e:	3b30      	subs	r3, #48	; 0x30
 8007b50:	2b09      	cmp	r3, #9
 8007b52:	d94e      	bls.n	8007bf2 <_svfiprintf_r+0x17e>
 8007b54:	b1b0      	cbz	r0, 8007b84 <_svfiprintf_r+0x110>
 8007b56:	9207      	str	r2, [sp, #28]
 8007b58:	e014      	b.n	8007b84 <_svfiprintf_r+0x110>
 8007b5a:	eba0 0308 	sub.w	r3, r0, r8
 8007b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	46a2      	mov	sl, r4
 8007b68:	e7d2      	b.n	8007b10 <_svfiprintf_r+0x9c>
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	1d19      	adds	r1, r3, #4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	9103      	str	r1, [sp, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bfbb      	ittet	lt
 8007b76:	425b      	neglt	r3, r3
 8007b78:	f042 0202 	orrlt.w	r2, r2, #2
 8007b7c:	9307      	strge	r3, [sp, #28]
 8007b7e:	9307      	strlt	r3, [sp, #28]
 8007b80:	bfb8      	it	lt
 8007b82:	9204      	strlt	r2, [sp, #16]
 8007b84:	7823      	ldrb	r3, [r4, #0]
 8007b86:	2b2e      	cmp	r3, #46	; 0x2e
 8007b88:	d10c      	bne.n	8007ba4 <_svfiprintf_r+0x130>
 8007b8a:	7863      	ldrb	r3, [r4, #1]
 8007b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b8e:	d135      	bne.n	8007bfc <_svfiprintf_r+0x188>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	1d1a      	adds	r2, r3, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	9203      	str	r2, [sp, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfb8      	it	lt
 8007b9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ba0:	3402      	adds	r4, #2
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c70 <_svfiprintf_r+0x1fc>
 8007ba8:	7821      	ldrb	r1, [r4, #0]
 8007baa:	2203      	movs	r2, #3
 8007bac:	4650      	mov	r0, sl
 8007bae:	f7f8 fb9f 	bl	80002f0 <memchr>
 8007bb2:	b140      	cbz	r0, 8007bc6 <_svfiprintf_r+0x152>
 8007bb4:	2340      	movs	r3, #64	; 0x40
 8007bb6:	eba0 000a 	sub.w	r0, r0, sl
 8007bba:	fa03 f000 	lsl.w	r0, r3, r0
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	4303      	orrs	r3, r0
 8007bc2:	3401      	adds	r4, #1
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bca:	4826      	ldr	r0, [pc, #152]	; (8007c64 <_svfiprintf_r+0x1f0>)
 8007bcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bd0:	2206      	movs	r2, #6
 8007bd2:	f7f8 fb8d 	bl	80002f0 <memchr>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d038      	beq.n	8007c4c <_svfiprintf_r+0x1d8>
 8007bda:	4b23      	ldr	r3, [pc, #140]	; (8007c68 <_svfiprintf_r+0x1f4>)
 8007bdc:	bb1b      	cbnz	r3, 8007c26 <_svfiprintf_r+0x1b2>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	3307      	adds	r3, #7
 8007be2:	f023 0307 	bic.w	r3, r3, #7
 8007be6:	3308      	adds	r3, #8
 8007be8:	9303      	str	r3, [sp, #12]
 8007bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bec:	4433      	add	r3, r6
 8007bee:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf0:	e767      	b.n	8007ac2 <_svfiprintf_r+0x4e>
 8007bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	e7a5      	b.n	8007b48 <_svfiprintf_r+0xd4>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	3401      	adds	r4, #1
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	4619      	mov	r1, r3
 8007c04:	f04f 0c0a 	mov.w	ip, #10
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c0e:	3a30      	subs	r2, #48	; 0x30
 8007c10:	2a09      	cmp	r2, #9
 8007c12:	d903      	bls.n	8007c1c <_svfiprintf_r+0x1a8>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0c5      	beq.n	8007ba4 <_svfiprintf_r+0x130>
 8007c18:	9105      	str	r1, [sp, #20]
 8007c1a:	e7c3      	b.n	8007ba4 <_svfiprintf_r+0x130>
 8007c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c20:	4604      	mov	r4, r0
 8007c22:	2301      	movs	r3, #1
 8007c24:	e7f0      	b.n	8007c08 <_svfiprintf_r+0x194>
 8007c26:	ab03      	add	r3, sp, #12
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <_svfiprintf_r+0x1f8>)
 8007c2e:	a904      	add	r1, sp, #16
 8007c30:	4638      	mov	r0, r7
 8007c32:	f3af 8000 	nop.w
 8007c36:	1c42      	adds	r2, r0, #1
 8007c38:	4606      	mov	r6, r0
 8007c3a:	d1d6      	bne.n	8007bea <_svfiprintf_r+0x176>
 8007c3c:	89ab      	ldrh	r3, [r5, #12]
 8007c3e:	065b      	lsls	r3, r3, #25
 8007c40:	f53f af2c 	bmi.w	8007a9c <_svfiprintf_r+0x28>
 8007c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c46:	b01d      	add	sp, #116	; 0x74
 8007c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4c:	ab03      	add	r3, sp, #12
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	462a      	mov	r2, r5
 8007c52:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <_svfiprintf_r+0x1f8>)
 8007c54:	a904      	add	r1, sp, #16
 8007c56:	4638      	mov	r0, r7
 8007c58:	f000 f87a 	bl	8007d50 <_printf_i>
 8007c5c:	e7eb      	b.n	8007c36 <_svfiprintf_r+0x1c2>
 8007c5e:	bf00      	nop
 8007c60:	080082e0 	.word	0x080082e0
 8007c64:	080082ea 	.word	0x080082ea
 8007c68:	00000000 	.word	0x00000000
 8007c6c:	080079bd 	.word	0x080079bd
 8007c70:	080082e6 	.word	0x080082e6

08007c74 <_printf_common>:
 8007c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	4616      	mov	r6, r2
 8007c7a:	4699      	mov	r9, r3
 8007c7c:	688a      	ldr	r2, [r1, #8]
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c84:	4293      	cmp	r3, r2
 8007c86:	bfb8      	it	lt
 8007c88:	4613      	movlt	r3, r2
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c90:	4607      	mov	r7, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	b10a      	cbz	r2, 8007c9a <_printf_common+0x26>
 8007c96:	3301      	adds	r3, #1
 8007c98:	6033      	str	r3, [r6, #0]
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	0699      	lsls	r1, r3, #26
 8007c9e:	bf42      	ittt	mi
 8007ca0:	6833      	ldrmi	r3, [r6, #0]
 8007ca2:	3302      	addmi	r3, #2
 8007ca4:	6033      	strmi	r3, [r6, #0]
 8007ca6:	6825      	ldr	r5, [r4, #0]
 8007ca8:	f015 0506 	ands.w	r5, r5, #6
 8007cac:	d106      	bne.n	8007cbc <_printf_common+0x48>
 8007cae:	f104 0a19 	add.w	sl, r4, #25
 8007cb2:	68e3      	ldr	r3, [r4, #12]
 8007cb4:	6832      	ldr	r2, [r6, #0]
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	42ab      	cmp	r3, r5
 8007cba:	dc26      	bgt.n	8007d0a <_printf_common+0x96>
 8007cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc0:	1e13      	subs	r3, r2, #0
 8007cc2:	6822      	ldr	r2, [r4, #0]
 8007cc4:	bf18      	it	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	0692      	lsls	r2, r2, #26
 8007cca:	d42b      	bmi.n	8007d24 <_printf_common+0xb0>
 8007ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	47c0      	blx	r8
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d01e      	beq.n	8007d18 <_printf_common+0xa4>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	68e5      	ldr	r5, [r4, #12]
 8007cde:	6832      	ldr	r2, [r6, #0]
 8007ce0:	f003 0306 	and.w	r3, r3, #6
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	bf08      	it	eq
 8007ce8:	1aad      	subeq	r5, r5, r2
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	6922      	ldr	r2, [r4, #16]
 8007cee:	bf0c      	ite	eq
 8007cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf4:	2500      	movne	r5, #0
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	bfc4      	itt	gt
 8007cfa:	1a9b      	subgt	r3, r3, r2
 8007cfc:	18ed      	addgt	r5, r5, r3
 8007cfe:	2600      	movs	r6, #0
 8007d00:	341a      	adds	r4, #26
 8007d02:	42b5      	cmp	r5, r6
 8007d04:	d11a      	bne.n	8007d3c <_printf_common+0xc8>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e008      	b.n	8007d1c <_printf_common+0xa8>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4638      	mov	r0, r7
 8007d12:	47c0      	blx	r8
 8007d14:	3001      	adds	r0, #1
 8007d16:	d103      	bne.n	8007d20 <_printf_common+0xac>
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d20:	3501      	adds	r5, #1
 8007d22:	e7c6      	b.n	8007cb2 <_printf_common+0x3e>
 8007d24:	18e1      	adds	r1, r4, r3
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	2030      	movs	r0, #48	; 0x30
 8007d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d2e:	4422      	add	r2, r4
 8007d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d38:	3302      	adds	r3, #2
 8007d3a:	e7c7      	b.n	8007ccc <_printf_common+0x58>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4622      	mov	r2, r4
 8007d40:	4649      	mov	r1, r9
 8007d42:	4638      	mov	r0, r7
 8007d44:	47c0      	blx	r8
 8007d46:	3001      	adds	r0, #1
 8007d48:	d0e6      	beq.n	8007d18 <_printf_common+0xa4>
 8007d4a:	3601      	adds	r6, #1
 8007d4c:	e7d9      	b.n	8007d02 <_printf_common+0x8e>
	...

08007d50 <_printf_i>:
 8007d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	7e0f      	ldrb	r7, [r1, #24]
 8007d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d58:	2f78      	cmp	r7, #120	; 0x78
 8007d5a:	4691      	mov	r9, r2
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	469a      	mov	sl, r3
 8007d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d66:	d807      	bhi.n	8007d78 <_printf_i+0x28>
 8007d68:	2f62      	cmp	r7, #98	; 0x62
 8007d6a:	d80a      	bhi.n	8007d82 <_printf_i+0x32>
 8007d6c:	2f00      	cmp	r7, #0
 8007d6e:	f000 80d8 	beq.w	8007f22 <_printf_i+0x1d2>
 8007d72:	2f58      	cmp	r7, #88	; 0x58
 8007d74:	f000 80a3 	beq.w	8007ebe <_printf_i+0x16e>
 8007d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d80:	e03a      	b.n	8007df8 <_printf_i+0xa8>
 8007d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d86:	2b15      	cmp	r3, #21
 8007d88:	d8f6      	bhi.n	8007d78 <_printf_i+0x28>
 8007d8a:	a101      	add	r1, pc, #4	; (adr r1, 8007d90 <_printf_i+0x40>)
 8007d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d90:	08007de9 	.word	0x08007de9
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007d79 	.word	0x08007d79
 8007d9c:	08007d79 	.word	0x08007d79
 8007da0:	08007d79 	.word	0x08007d79
 8007da4:	08007d79 	.word	0x08007d79
 8007da8:	08007dfd 	.word	0x08007dfd
 8007dac:	08007d79 	.word	0x08007d79
 8007db0:	08007d79 	.word	0x08007d79
 8007db4:	08007d79 	.word	0x08007d79
 8007db8:	08007d79 	.word	0x08007d79
 8007dbc:	08007f09 	.word	0x08007f09
 8007dc0:	08007e2d 	.word	0x08007e2d
 8007dc4:	08007eeb 	.word	0x08007eeb
 8007dc8:	08007d79 	.word	0x08007d79
 8007dcc:	08007d79 	.word	0x08007d79
 8007dd0:	08007f2b 	.word	0x08007f2b
 8007dd4:	08007d79 	.word	0x08007d79
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007d79 	.word	0x08007d79
 8007de0:	08007d79 	.word	0x08007d79
 8007de4:	08007ef3 	.word	0x08007ef3
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	1d1a      	adds	r2, r3, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	602a      	str	r2, [r5, #0]
 8007df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e0a3      	b.n	8007f44 <_printf_i+0x1f4>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	6829      	ldr	r1, [r5, #0]
 8007e00:	0606      	lsls	r6, r0, #24
 8007e02:	f101 0304 	add.w	r3, r1, #4
 8007e06:	d50a      	bpl.n	8007e1e <_printf_i+0xce>
 8007e08:	680e      	ldr	r6, [r1, #0]
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	da03      	bge.n	8007e18 <_printf_i+0xc8>
 8007e10:	232d      	movs	r3, #45	; 0x2d
 8007e12:	4276      	negs	r6, r6
 8007e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e18:	485e      	ldr	r0, [pc, #376]	; (8007f94 <_printf_i+0x244>)
 8007e1a:	230a      	movs	r3, #10
 8007e1c:	e019      	b.n	8007e52 <_printf_i+0x102>
 8007e1e:	680e      	ldr	r6, [r1, #0]
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e26:	bf18      	it	ne
 8007e28:	b236      	sxthne	r6, r6
 8007e2a:	e7ef      	b.n	8007e0c <_printf_i+0xbc>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	6029      	str	r1, [r5, #0]
 8007e34:	0601      	lsls	r1, r0, #24
 8007e36:	d501      	bpl.n	8007e3c <_printf_i+0xec>
 8007e38:	681e      	ldr	r6, [r3, #0]
 8007e3a:	e002      	b.n	8007e42 <_printf_i+0xf2>
 8007e3c:	0646      	lsls	r6, r0, #25
 8007e3e:	d5fb      	bpl.n	8007e38 <_printf_i+0xe8>
 8007e40:	881e      	ldrh	r6, [r3, #0]
 8007e42:	4854      	ldr	r0, [pc, #336]	; (8007f94 <_printf_i+0x244>)
 8007e44:	2f6f      	cmp	r7, #111	; 0x6f
 8007e46:	bf0c      	ite	eq
 8007e48:	2308      	moveq	r3, #8
 8007e4a:	230a      	movne	r3, #10
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e52:	6865      	ldr	r5, [r4, #4]
 8007e54:	60a5      	str	r5, [r4, #8]
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	bfa2      	ittt	ge
 8007e5a:	6821      	ldrge	r1, [r4, #0]
 8007e5c:	f021 0104 	bicge.w	r1, r1, #4
 8007e60:	6021      	strge	r1, [r4, #0]
 8007e62:	b90e      	cbnz	r6, 8007e68 <_printf_i+0x118>
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	d04d      	beq.n	8007f04 <_printf_i+0x1b4>
 8007e68:	4615      	mov	r5, r2
 8007e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e72:	5dc7      	ldrb	r7, [r0, r7]
 8007e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e78:	4637      	mov	r7, r6
 8007e7a:	42bb      	cmp	r3, r7
 8007e7c:	460e      	mov	r6, r1
 8007e7e:	d9f4      	bls.n	8007e6a <_printf_i+0x11a>
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10b      	bne.n	8007e9c <_printf_i+0x14c>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	07de      	lsls	r6, r3, #31
 8007e88:	d508      	bpl.n	8007e9c <_printf_i+0x14c>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6861      	ldr	r1, [r4, #4]
 8007e8e:	4299      	cmp	r1, r3
 8007e90:	bfde      	ittt	le
 8007e92:	2330      	movle	r3, #48	; 0x30
 8007e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e9c:	1b52      	subs	r2, r2, r5
 8007e9e:	6122      	str	r2, [r4, #16]
 8007ea0:	f8cd a000 	str.w	sl, [sp]
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	aa03      	add	r2, sp, #12
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f7ff fee2 	bl	8007c74 <_printf_common>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d14c      	bne.n	8007f4e <_printf_i+0x1fe>
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eb8:	b004      	add	sp, #16
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	4835      	ldr	r0, [pc, #212]	; (8007f94 <_printf_i+0x244>)
 8007ec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ec4:	6829      	ldr	r1, [r5, #0]
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ecc:	6029      	str	r1, [r5, #0]
 8007ece:	061d      	lsls	r5, r3, #24
 8007ed0:	d514      	bpl.n	8007efc <_printf_i+0x1ac>
 8007ed2:	07df      	lsls	r7, r3, #31
 8007ed4:	bf44      	itt	mi
 8007ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eda:	6023      	strmi	r3, [r4, #0]
 8007edc:	b91e      	cbnz	r6, 8007ee6 <_printf_i+0x196>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	f023 0320 	bic.w	r3, r3, #32
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	2310      	movs	r3, #16
 8007ee8:	e7b0      	b.n	8007e4c <_printf_i+0xfc>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	f043 0320 	orr.w	r3, r3, #32
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	2378      	movs	r3, #120	; 0x78
 8007ef4:	4828      	ldr	r0, [pc, #160]	; (8007f98 <_printf_i+0x248>)
 8007ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007efa:	e7e3      	b.n	8007ec4 <_printf_i+0x174>
 8007efc:	0659      	lsls	r1, r3, #25
 8007efe:	bf48      	it	mi
 8007f00:	b2b6      	uxthmi	r6, r6
 8007f02:	e7e6      	b.n	8007ed2 <_printf_i+0x182>
 8007f04:	4615      	mov	r5, r2
 8007f06:	e7bb      	b.n	8007e80 <_printf_i+0x130>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	6826      	ldr	r6, [r4, #0]
 8007f0c:	6961      	ldr	r1, [r4, #20]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6028      	str	r0, [r5, #0]
 8007f12:	0635      	lsls	r5, r6, #24
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0x1cc>
 8007f18:	6019      	str	r1, [r3, #0]
 8007f1a:	e002      	b.n	8007f22 <_printf_i+0x1d2>
 8007f1c:	0670      	lsls	r0, r6, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0x1c8>
 8007f20:	8019      	strh	r1, [r3, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	4615      	mov	r5, r2
 8007f28:	e7ba      	b.n	8007ea0 <_printf_i+0x150>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	1d1a      	adds	r2, r3, #4
 8007f2e:	602a      	str	r2, [r5, #0]
 8007f30:	681d      	ldr	r5, [r3, #0]
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	2100      	movs	r1, #0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f7f8 f9da 	bl	80002f0 <memchr>
 8007f3c:	b108      	cbz	r0, 8007f42 <_printf_i+0x1f2>
 8007f3e:	1b40      	subs	r0, r0, r5
 8007f40:	6060      	str	r0, [r4, #4]
 8007f42:	6863      	ldr	r3, [r4, #4]
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	2300      	movs	r3, #0
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4c:	e7a8      	b.n	8007ea0 <_printf_i+0x150>
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	462a      	mov	r2, r5
 8007f52:	4649      	mov	r1, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	47d0      	blx	sl
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d0ab      	beq.n	8007eb4 <_printf_i+0x164>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	079b      	lsls	r3, r3, #30
 8007f60:	d413      	bmi.n	8007f8a <_printf_i+0x23a>
 8007f62:	68e0      	ldr	r0, [r4, #12]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	4298      	cmp	r0, r3
 8007f68:	bfb8      	it	lt
 8007f6a:	4618      	movlt	r0, r3
 8007f6c:	e7a4      	b.n	8007eb8 <_printf_i+0x168>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d09b      	beq.n	8007eb4 <_printf_i+0x164>
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	1a5b      	subs	r3, r3, r1
 8007f84:	42ab      	cmp	r3, r5
 8007f86:	dcf2      	bgt.n	8007f6e <_printf_i+0x21e>
 8007f88:	e7eb      	b.n	8007f62 <_printf_i+0x212>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	f104 0619 	add.w	r6, r4, #25
 8007f90:	e7f5      	b.n	8007f7e <_printf_i+0x22e>
 8007f92:	bf00      	nop
 8007f94:	080082f1 	.word	0x080082f1
 8007f98:	08008302 	.word	0x08008302

08007f9c <memcpy>:
 8007f9c:	440a      	add	r2, r1
 8007f9e:	4291      	cmp	r1, r2
 8007fa0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007fa4:	d100      	bne.n	8007fa8 <memcpy+0xc>
 8007fa6:	4770      	bx	lr
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb2:	4291      	cmp	r1, r2
 8007fb4:	d1f9      	bne.n	8007faa <memcpy+0xe>
 8007fb6:	bd10      	pop	{r4, pc}

08007fb8 <memmove>:
 8007fb8:	4288      	cmp	r0, r1
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	eb01 0402 	add.w	r4, r1, r2
 8007fc0:	d902      	bls.n	8007fc8 <memmove+0x10>
 8007fc2:	4284      	cmp	r4, r0
 8007fc4:	4623      	mov	r3, r4
 8007fc6:	d807      	bhi.n	8007fd8 <memmove+0x20>
 8007fc8:	1e43      	subs	r3, r0, #1
 8007fca:	42a1      	cmp	r1, r4
 8007fcc:	d008      	beq.n	8007fe0 <memmove+0x28>
 8007fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fd6:	e7f8      	b.n	8007fca <memmove+0x12>
 8007fd8:	4402      	add	r2, r0
 8007fda:	4601      	mov	r1, r0
 8007fdc:	428a      	cmp	r2, r1
 8007fde:	d100      	bne.n	8007fe2 <memmove+0x2a>
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fea:	e7f7      	b.n	8007fdc <memmove+0x24>

08007fec <_free_r>:
 8007fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d044      	beq.n	800807c <_free_r+0x90>
 8007ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff6:	9001      	str	r0, [sp, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8007ffe:	bfb8      	it	lt
 8008000:	18e4      	addlt	r4, r4, r3
 8008002:	f000 f913 	bl	800822c <__malloc_lock>
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <_free_r+0x94>)
 8008008:	9801      	ldr	r0, [sp, #4]
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	b933      	cbnz	r3, 800801c <_free_r+0x30>
 800800e:	6063      	str	r3, [r4, #4]
 8008010:	6014      	str	r4, [r2, #0]
 8008012:	b003      	add	sp, #12
 8008014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008018:	f000 b90e 	b.w	8008238 <__malloc_unlock>
 800801c:	42a3      	cmp	r3, r4
 800801e:	d908      	bls.n	8008032 <_free_r+0x46>
 8008020:	6825      	ldr	r5, [r4, #0]
 8008022:	1961      	adds	r1, r4, r5
 8008024:	428b      	cmp	r3, r1
 8008026:	bf01      	itttt	eq
 8008028:	6819      	ldreq	r1, [r3, #0]
 800802a:	685b      	ldreq	r3, [r3, #4]
 800802c:	1949      	addeq	r1, r1, r5
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	e7ed      	b.n	800800e <_free_r+0x22>
 8008032:	461a      	mov	r2, r3
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	b10b      	cbz	r3, 800803c <_free_r+0x50>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d9fa      	bls.n	8008032 <_free_r+0x46>
 800803c:	6811      	ldr	r1, [r2, #0]
 800803e:	1855      	adds	r5, r2, r1
 8008040:	42a5      	cmp	r5, r4
 8008042:	d10b      	bne.n	800805c <_free_r+0x70>
 8008044:	6824      	ldr	r4, [r4, #0]
 8008046:	4421      	add	r1, r4
 8008048:	1854      	adds	r4, r2, r1
 800804a:	42a3      	cmp	r3, r4
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	d1e0      	bne.n	8008012 <_free_r+0x26>
 8008050:	681c      	ldr	r4, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	6053      	str	r3, [r2, #4]
 8008056:	4421      	add	r1, r4
 8008058:	6011      	str	r1, [r2, #0]
 800805a:	e7da      	b.n	8008012 <_free_r+0x26>
 800805c:	d902      	bls.n	8008064 <_free_r+0x78>
 800805e:	230c      	movs	r3, #12
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	e7d6      	b.n	8008012 <_free_r+0x26>
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	1961      	adds	r1, r4, r5
 8008068:	428b      	cmp	r3, r1
 800806a:	bf04      	itt	eq
 800806c:	6819      	ldreq	r1, [r3, #0]
 800806e:	685b      	ldreq	r3, [r3, #4]
 8008070:	6063      	str	r3, [r4, #4]
 8008072:	bf04      	itt	eq
 8008074:	1949      	addeq	r1, r1, r5
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	6054      	str	r4, [r2, #4]
 800807a:	e7ca      	b.n	8008012 <_free_r+0x26>
 800807c:	b003      	add	sp, #12
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	240001d0 	.word	0x240001d0

08008084 <sbrk_aligned>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	4e0e      	ldr	r6, [pc, #56]	; (80080c0 <sbrk_aligned+0x3c>)
 8008088:	460c      	mov	r4, r1
 800808a:	6831      	ldr	r1, [r6, #0]
 800808c:	4605      	mov	r5, r0
 800808e:	b911      	cbnz	r1, 8008096 <sbrk_aligned+0x12>
 8008090:	f000 f8bc 	bl	800820c <_sbrk_r>
 8008094:	6030      	str	r0, [r6, #0]
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f000 f8b7 	bl	800820c <_sbrk_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d00a      	beq.n	80080b8 <sbrk_aligned+0x34>
 80080a2:	1cc4      	adds	r4, r0, #3
 80080a4:	f024 0403 	bic.w	r4, r4, #3
 80080a8:	42a0      	cmp	r0, r4
 80080aa:	d007      	beq.n	80080bc <sbrk_aligned+0x38>
 80080ac:	1a21      	subs	r1, r4, r0
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 f8ac 	bl	800820c <_sbrk_r>
 80080b4:	3001      	adds	r0, #1
 80080b6:	d101      	bne.n	80080bc <sbrk_aligned+0x38>
 80080b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80080bc:	4620      	mov	r0, r4
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	240001d4 	.word	0x240001d4

080080c4 <_malloc_r>:
 80080c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	1ccd      	adds	r5, r1, #3
 80080ca:	f025 0503 	bic.w	r5, r5, #3
 80080ce:	3508      	adds	r5, #8
 80080d0:	2d0c      	cmp	r5, #12
 80080d2:	bf38      	it	cc
 80080d4:	250c      	movcc	r5, #12
 80080d6:	2d00      	cmp	r5, #0
 80080d8:	4607      	mov	r7, r0
 80080da:	db01      	blt.n	80080e0 <_malloc_r+0x1c>
 80080dc:	42a9      	cmp	r1, r5
 80080de:	d905      	bls.n	80080ec <_malloc_r+0x28>
 80080e0:	230c      	movs	r3, #12
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	2600      	movs	r6, #0
 80080e6:	4630      	mov	r0, r6
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	4e2e      	ldr	r6, [pc, #184]	; (80081a8 <_malloc_r+0xe4>)
 80080ee:	f000 f89d 	bl	800822c <__malloc_lock>
 80080f2:	6833      	ldr	r3, [r6, #0]
 80080f4:	461c      	mov	r4, r3
 80080f6:	bb34      	cbnz	r4, 8008146 <_malloc_r+0x82>
 80080f8:	4629      	mov	r1, r5
 80080fa:	4638      	mov	r0, r7
 80080fc:	f7ff ffc2 	bl	8008084 <sbrk_aligned>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	4604      	mov	r4, r0
 8008104:	d14d      	bne.n	80081a2 <_malloc_r+0xde>
 8008106:	6834      	ldr	r4, [r6, #0]
 8008108:	4626      	mov	r6, r4
 800810a:	2e00      	cmp	r6, #0
 800810c:	d140      	bne.n	8008190 <_malloc_r+0xcc>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	4631      	mov	r1, r6
 8008112:	4638      	mov	r0, r7
 8008114:	eb04 0803 	add.w	r8, r4, r3
 8008118:	f000 f878 	bl	800820c <_sbrk_r>
 800811c:	4580      	cmp	r8, r0
 800811e:	d13a      	bne.n	8008196 <_malloc_r+0xd2>
 8008120:	6821      	ldr	r1, [r4, #0]
 8008122:	3503      	adds	r5, #3
 8008124:	1a6d      	subs	r5, r5, r1
 8008126:	f025 0503 	bic.w	r5, r5, #3
 800812a:	3508      	adds	r5, #8
 800812c:	2d0c      	cmp	r5, #12
 800812e:	bf38      	it	cc
 8008130:	250c      	movcc	r5, #12
 8008132:	4629      	mov	r1, r5
 8008134:	4638      	mov	r0, r7
 8008136:	f7ff ffa5 	bl	8008084 <sbrk_aligned>
 800813a:	3001      	adds	r0, #1
 800813c:	d02b      	beq.n	8008196 <_malloc_r+0xd2>
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	442b      	add	r3, r5
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	e00e      	b.n	8008164 <_malloc_r+0xa0>
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	1b52      	subs	r2, r2, r5
 800814a:	d41e      	bmi.n	800818a <_malloc_r+0xc6>
 800814c:	2a0b      	cmp	r2, #11
 800814e:	d916      	bls.n	800817e <_malloc_r+0xba>
 8008150:	1961      	adds	r1, r4, r5
 8008152:	42a3      	cmp	r3, r4
 8008154:	6025      	str	r5, [r4, #0]
 8008156:	bf18      	it	ne
 8008158:	6059      	strne	r1, [r3, #4]
 800815a:	6863      	ldr	r3, [r4, #4]
 800815c:	bf08      	it	eq
 800815e:	6031      	streq	r1, [r6, #0]
 8008160:	5162      	str	r2, [r4, r5]
 8008162:	604b      	str	r3, [r1, #4]
 8008164:	4638      	mov	r0, r7
 8008166:	f104 060b 	add.w	r6, r4, #11
 800816a:	f000 f865 	bl	8008238 <__malloc_unlock>
 800816e:	f026 0607 	bic.w	r6, r6, #7
 8008172:	1d23      	adds	r3, r4, #4
 8008174:	1af2      	subs	r2, r6, r3
 8008176:	d0b6      	beq.n	80080e6 <_malloc_r+0x22>
 8008178:	1b9b      	subs	r3, r3, r6
 800817a:	50a3      	str	r3, [r4, r2]
 800817c:	e7b3      	b.n	80080e6 <_malloc_r+0x22>
 800817e:	6862      	ldr	r2, [r4, #4]
 8008180:	42a3      	cmp	r3, r4
 8008182:	bf0c      	ite	eq
 8008184:	6032      	streq	r2, [r6, #0]
 8008186:	605a      	strne	r2, [r3, #4]
 8008188:	e7ec      	b.n	8008164 <_malloc_r+0xa0>
 800818a:	4623      	mov	r3, r4
 800818c:	6864      	ldr	r4, [r4, #4]
 800818e:	e7b2      	b.n	80080f6 <_malloc_r+0x32>
 8008190:	4634      	mov	r4, r6
 8008192:	6876      	ldr	r6, [r6, #4]
 8008194:	e7b9      	b.n	800810a <_malloc_r+0x46>
 8008196:	230c      	movs	r3, #12
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	4638      	mov	r0, r7
 800819c:	f000 f84c 	bl	8008238 <__malloc_unlock>
 80081a0:	e7a1      	b.n	80080e6 <_malloc_r+0x22>
 80081a2:	6025      	str	r5, [r4, #0]
 80081a4:	e7de      	b.n	8008164 <_malloc_r+0xa0>
 80081a6:	bf00      	nop
 80081a8:	240001d0 	.word	0x240001d0

080081ac <_realloc_r>:
 80081ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b0:	4680      	mov	r8, r0
 80081b2:	4614      	mov	r4, r2
 80081b4:	460e      	mov	r6, r1
 80081b6:	b921      	cbnz	r1, 80081c2 <_realloc_r+0x16>
 80081b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081bc:	4611      	mov	r1, r2
 80081be:	f7ff bf81 	b.w	80080c4 <_malloc_r>
 80081c2:	b92a      	cbnz	r2, 80081d0 <_realloc_r+0x24>
 80081c4:	f7ff ff12 	bl	8007fec <_free_r>
 80081c8:	4625      	mov	r5, r4
 80081ca:	4628      	mov	r0, r5
 80081cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d0:	f000 f838 	bl	8008244 <_malloc_usable_size_r>
 80081d4:	4284      	cmp	r4, r0
 80081d6:	4607      	mov	r7, r0
 80081d8:	d802      	bhi.n	80081e0 <_realloc_r+0x34>
 80081da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081de:	d812      	bhi.n	8008206 <_realloc_r+0x5a>
 80081e0:	4621      	mov	r1, r4
 80081e2:	4640      	mov	r0, r8
 80081e4:	f7ff ff6e 	bl	80080c4 <_malloc_r>
 80081e8:	4605      	mov	r5, r0
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d0ed      	beq.n	80081ca <_realloc_r+0x1e>
 80081ee:	42bc      	cmp	r4, r7
 80081f0:	4622      	mov	r2, r4
 80081f2:	4631      	mov	r1, r6
 80081f4:	bf28      	it	cs
 80081f6:	463a      	movcs	r2, r7
 80081f8:	f7ff fed0 	bl	8007f9c <memcpy>
 80081fc:	4631      	mov	r1, r6
 80081fe:	4640      	mov	r0, r8
 8008200:	f7ff fef4 	bl	8007fec <_free_r>
 8008204:	e7e1      	b.n	80081ca <_realloc_r+0x1e>
 8008206:	4635      	mov	r5, r6
 8008208:	e7df      	b.n	80081ca <_realloc_r+0x1e>
	...

0800820c <_sbrk_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d06      	ldr	r5, [pc, #24]	; (8008228 <_sbrk_r+0x1c>)
 8008210:	2300      	movs	r3, #0
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	602b      	str	r3, [r5, #0]
 8008218:	f7f8 fcda 	bl	8000bd0 <_sbrk>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_sbrk_r+0x1a>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_sbrk_r+0x1a>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	240001d8 	.word	0x240001d8

0800822c <__malloc_lock>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__malloc_lock+0x8>)
 800822e:	f000 b811 	b.w	8008254 <__retarget_lock_acquire_recursive>
 8008232:	bf00      	nop
 8008234:	240001dc 	.word	0x240001dc

08008238 <__malloc_unlock>:
 8008238:	4801      	ldr	r0, [pc, #4]	; (8008240 <__malloc_unlock+0x8>)
 800823a:	f000 b80c 	b.w	8008256 <__retarget_lock_release_recursive>
 800823e:	bf00      	nop
 8008240:	240001dc 	.word	0x240001dc

08008244 <_malloc_usable_size_r>:
 8008244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008248:	1f18      	subs	r0, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	bfbc      	itt	lt
 800824e:	580b      	ldrlt	r3, [r1, r0]
 8008250:	18c0      	addlt	r0, r0, r3
 8008252:	4770      	bx	lr

08008254 <__retarget_lock_acquire_recursive>:
 8008254:	4770      	bx	lr

08008256 <__retarget_lock_release_recursive>:
 8008256:	4770      	bx	lr

08008258 <_init>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr

08008264 <_fini>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr
