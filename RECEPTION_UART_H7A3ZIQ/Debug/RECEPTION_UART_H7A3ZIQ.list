
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000978c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08009afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  24000084  08009b80  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000284  08009b80  00020284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018432  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d99  00000000  00000000  000384e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0003b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001040  00000000  00000000  0003c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003177b  00000000  00000000  0003d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a3d8  00000000  00000000  0006ebb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f32b  00000000  00000000  00088f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c82b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c84  00000000  00000000  001c8308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009a24 	.word	0x08009a24

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	08009a24 	.word	0x08009a24

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <Thrust_Init+0x21c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a84      	ldr	r2, [pc, #528]	; (80008b0 <Thrust_Init+0x21c>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f802 	bl	80056ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <Thrust_Init+0x220>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a81      	ldr	r2, [pc, #516]	; (80008b4 <Thrust_Init+0x220>)
 80006ae:	6852      	ldr	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fffa 	bl	80056ac <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f001 f8ca 	bl	8001854 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006c0:	4b7b      	ldr	r3, [pc, #492]	; (80008b0 <Thrust_Init+0x21c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <Thrust_Init+0x40>
 80006c8:	4b79      	ldr	r3, [pc, #484]	; (80008b0 <Thrust_Init+0x21c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2232      	movs	r2, #50	; 0x32
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e02c      	b.n	800072e <Thrust_Init+0x9a>
 80006d4:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <Thrust_Init+0x21c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d105      	bne.n	80006e8 <Thrust_Init+0x54>
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <Thrust_Init+0x21c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2332      	movs	r3, #50	; 0x32
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	e022      	b.n	800072e <Thrust_Init+0x9a>
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <Thrust_Init+0x21c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d105      	bne.n	80006fc <Thrust_Init+0x68>
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <Thrust_Init+0x21c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	2332      	movs	r3, #50	; 0x32
 80006f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fa:	e018      	b.n	800072e <Thrust_Init+0x9a>
 80006fc:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <Thrust_Init+0x21c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d105      	bne.n	8000710 <Thrust_Init+0x7c>
 8000704:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <Thrust_Init+0x21c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	2332      	movs	r3, #50	; 0x32
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	e00e      	b.n	800072e <Thrust_Init+0x9a>
 8000710:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <Thrust_Init+0x21c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d105      	bne.n	8000724 <Thrust_Init+0x90>
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <Thrust_Init+0x21c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2332      	movs	r3, #50	; 0x32
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	e004      	b.n	800072e <Thrust_Init+0x9a>
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <Thrust_Init+0x21c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2332      	movs	r3, #50	; 0x32
 800072c:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <Thrust_Init+0x220>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <Thrust_Init+0xae>
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <Thrust_Init+0x220>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2232      	movs	r2, #50	; 0x32
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
 8000740:	e02c      	b.n	800079c <Thrust_Init+0x108>
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <Thrust_Init+0x220>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d105      	bne.n	8000756 <Thrust_Init+0xc2>
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <Thrust_Init+0x220>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2332      	movs	r3, #50	; 0x32
 8000752:	6393      	str	r3, [r2, #56]	; 0x38
 8000754:	e022      	b.n	800079c <Thrust_Init+0x108>
 8000756:	4b57      	ldr	r3, [pc, #348]	; (80008b4 <Thrust_Init+0x220>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d105      	bne.n	800076a <Thrust_Init+0xd6>
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <Thrust_Init+0x220>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	2332      	movs	r3, #50	; 0x32
 8000766:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000768:	e018      	b.n	800079c <Thrust_Init+0x108>
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <Thrust_Init+0x220>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b0c      	cmp	r3, #12
 8000770:	d105      	bne.n	800077e <Thrust_Init+0xea>
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <Thrust_Init+0x220>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2332      	movs	r3, #50	; 0x32
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	e00e      	b.n	800079c <Thrust_Init+0x108>
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <Thrust_Init+0x220>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d105      	bne.n	8000792 <Thrust_Init+0xfe>
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <Thrust_Init+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2332      	movs	r3, #50	; 0x32
 800078e:	6593      	str	r3, [r2, #88]	; 0x58
 8000790:	e004      	b.n	800079c <Thrust_Init+0x108>
 8000792:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <Thrust_Init+0x220>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2332      	movs	r3, #50	; 0x32
 800079a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f001 f858 	bl	8001854 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 80007a4:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <Thrust_Init+0x21c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <Thrust_Init+0x124>
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <Thrust_Init+0x21c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2264      	movs	r2, #100	; 0x64
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	e02c      	b.n	8000812 <Thrust_Init+0x17e>
 80007b8:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <Thrust_Init+0x21c>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d105      	bne.n	80007cc <Thrust_Init+0x138>
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <Thrust_Init+0x21c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	6393      	str	r3, [r2, #56]	; 0x38
 80007ca:	e022      	b.n	8000812 <Thrust_Init+0x17e>
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <Thrust_Init+0x21c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d105      	bne.n	80007e0 <Thrust_Init+0x14c>
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <Thrust_Init+0x21c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007de:	e018      	b.n	8000812 <Thrust_Init+0x17e>
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <Thrust_Init+0x21c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d105      	bne.n	80007f4 <Thrust_Init+0x160>
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <Thrust_Init+0x21c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	2364      	movs	r3, #100	; 0x64
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	e00e      	b.n	8000812 <Thrust_Init+0x17e>
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <Thrust_Init+0x21c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b10      	cmp	r3, #16
 80007fa:	d105      	bne.n	8000808 <Thrust_Init+0x174>
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <Thrust_Init+0x21c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	e004      	b.n	8000812 <Thrust_Init+0x17e>
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <Thrust_Init+0x21c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <Thrust_Init+0x220>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <Thrust_Init+0x192>
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <Thrust_Init+0x220>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2264      	movs	r2, #100	; 0x64
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
 8000824:	e02c      	b.n	8000880 <Thrust_Init+0x1ec>
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <Thrust_Init+0x220>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d105      	bne.n	800083a <Thrust_Init+0x1a6>
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <Thrust_Init+0x220>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	6393      	str	r3, [r2, #56]	; 0x38
 8000838:	e022      	b.n	8000880 <Thrust_Init+0x1ec>
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <Thrust_Init+0x220>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d105      	bne.n	800084e <Thrust_Init+0x1ba>
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <Thrust_Init+0x220>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800084c:	e018      	b.n	8000880 <Thrust_Init+0x1ec>
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <Thrust_Init+0x220>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d105      	bne.n	8000862 <Thrust_Init+0x1ce>
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <Thrust_Init+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	e00e      	b.n	8000880 <Thrust_Init+0x1ec>
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <Thrust_Init+0x220>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d105      	bne.n	8000876 <Thrust_Init+0x1e2>
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <Thrust_Init+0x220>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2364      	movs	r3, #100	; 0x64
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	e004      	b.n	8000880 <Thrust_Init+0x1ec>
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <Thrust_Init+0x220>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2364      	movs	r3, #100	; 0x64
 800087e:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f000 ffe6 	bl	8001854 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Thrust_Init+0x21c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <Thrust_Init+0x208>
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <Thrust_Init+0x21c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2232      	movs	r2, #50	; 0x32
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	e030      	b.n	80008fe <Thrust_Init+0x26a>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <Thrust_Init+0x21c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d109      	bne.n	80008b8 <Thrust_Init+0x224>
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <Thrust_Init+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	2332      	movs	r3, #50	; 0x32
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
 80008ae:	e026      	b.n	80008fe <Thrust_Init+0x26a>
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000008 	.word	0x24000008
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <Thrust_Init+0x2e4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d105      	bne.n	80008cc <Thrust_Init+0x238>
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <Thrust_Init+0x2e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	2332      	movs	r3, #50	; 0x32
 80008c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008ca:	e018      	b.n	80008fe <Thrust_Init+0x26a>
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <Thrust_Init+0x2e4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d105      	bne.n	80008e0 <Thrust_Init+0x24c>
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <Thrust_Init+0x2e4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	2332      	movs	r3, #50	; 0x32
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	e00e      	b.n	80008fe <Thrust_Init+0x26a>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <Thrust_Init+0x2e4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	d105      	bne.n	80008f4 <Thrust_Init+0x260>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Thrust_Init+0x2e4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	2332      	movs	r3, #50	; 0x32
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	e004      	b.n	80008fe <Thrust_Init+0x26a>
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Thrust_Init+0x2e4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	2332      	movs	r3, #50	; 0x32
 80008fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Thrust_Init+0x2e8>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <Thrust_Init+0x27e>
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Thrust_Init+0x2e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2232      	movs	r2, #50	; 0x32
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
 8000910:	e02c      	b.n	800096c <Thrust_Init+0x2d8>
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <Thrust_Init+0x2e8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d105      	bne.n	8000926 <Thrust_Init+0x292>
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <Thrust_Init+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2332      	movs	r3, #50	; 0x32
 8000922:	6393      	str	r3, [r2, #56]	; 0x38
 8000924:	e022      	b.n	800096c <Thrust_Init+0x2d8>
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <Thrust_Init+0x2e8>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d105      	bne.n	800093a <Thrust_Init+0x2a6>
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <Thrust_Init+0x2e8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2332      	movs	r3, #50	; 0x32
 8000936:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000938:	e018      	b.n	800096c <Thrust_Init+0x2d8>
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <Thrust_Init+0x2e8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d105      	bne.n	800094e <Thrust_Init+0x2ba>
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Thrust_Init+0x2e8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	e00e      	b.n	800096c <Thrust_Init+0x2d8>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Thrust_Init+0x2e8>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d105      	bne.n	8000962 <Thrust_Init+0x2ce>
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <Thrust_Init+0x2e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2332      	movs	r3, #50	; 0x32
 800095e:	6593      	str	r3, [r2, #88]	; 0x58
 8000960:	e004      	b.n	800096c <Thrust_Init+0x2d8>
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <Thrust_Init+0x2e8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2332      	movs	r3, #50	; 0x32
 800096a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f000 ff70 	bl	8001854 <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <Process_Init>:
void Process_Init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	Thrust_Init();
 8000984:	f7ff fe86 	bl	8000694 <Thrust_Init>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <Process>:

void Process(commandMsg* message) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    AdjustThrust(&TIM_PROP_G, message->thrust);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <Process+0x28>)
 800099c:	f000 f810 	bl	80009c0 <AdjustThrust>
    AdjustThrust(&TIM_PROP_D, message->thrust);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <Process+0x2c>)
 80009a8:	f000 f80a 	bl	80009c0 <AdjustThrust>
    //AdjustAngle(&message->thrust,&message->angle);

    //HAL_UART_Transmit(hRPICom.huartDebug, &message->thrust, 8, 10); //receive data from data buffer interrupt mode
    //HAL_UART_Transmit(hRPICom.huartDebug, (uint8_t*)&message->angle, 16, 10);
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24000000 	.word	0x24000000
 80009b8:	24000008 	.word	0x24000008
 80009bc:	00000000 	.word	0x00000000

080009c0 <AdjustThrust>:

void AdjustThrust(struct TIM_PROP* tim_prop, uint8_t thrust) {
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = thrust * ((float)(MAX_Thrust - MIN_Thrust) / 100.0) + MIN_Thrust;;
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80009da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009de:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000aa8 <AdjustThrust+0xe8>
 80009e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009ea:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10a      	bne.n	8000a0c <AdjustThrust+0x4c>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a04:	ee17 2a90 	vmov	r2, s15
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a0a:	e045      	b.n	8000a98 <AdjustThrust+0xd8>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d10a      	bne.n	8000a2a <AdjustThrust+0x6a>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a22:	ee17 3a90 	vmov	r3, s15
 8000a26:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a28:	e036      	b.n	8000a98 <AdjustThrust+0xd8>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2b08      	cmp	r3, #8
 8000a30:	d10a      	bne.n	8000a48 <AdjustThrust+0x88>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a40:	ee17 3a90 	vmov	r3, s15
 8000a44:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a46:	e027      	b.n	8000a98 <AdjustThrust+0xd8>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b0c      	cmp	r3, #12
 8000a4e:	d10a      	bne.n	8000a66 <AdjustThrust+0xa6>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5e:	ee17 3a90 	vmov	r3, s15
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a64:	e018      	b.n	8000a98 <AdjustThrust+0xd8>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b10      	cmp	r3, #16
 8000a6c:	d10a      	bne.n	8000a84 <AdjustThrust+0xc4>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7c:	ee17 3a90 	vmov	r3, s15
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a82:	e009      	b.n	8000a98 <AdjustThrust+0xd8>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a92:	ee17 3a90 	vmov	r3, s15
 8000a96:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	f3af 8000 	nop.w
 8000aa8:	00000000 	.word	0x00000000
 8000aac:	40490000 	.word	0x40490000

08000ab0 <RPICom_Init>:
#include <RPICom.h>

//uint8_t uartRpiRxBuffer[UART_RPI_RX_BUFFER_SIZE];
//commandMsg binaryMessage;
RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <RPICom_Init+0x6c>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <RPICom_Init+0x6c>)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	6053      	str	r3, [r2, #4]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(commandMsg));
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <RPICom_Init+0x6c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	3308      	adds	r3, #8
 8000acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad0:	6018      	str	r0, [r3, #0]
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	8019      	strh	r1, [r3, #0]
	hRPICom.errorNumber = 0;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <RPICom_Init+0x6c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	739a      	strb	r2, [r3, #14]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <RPICom_Init+0x6c>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f103 020f 	add.w	r2, r3, #15
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	cb03      	ldmia	r3!, {r0, r1}
 8000ae8:	6010      	str	r0, [r2, #0]
 8000aea:	6051      	str	r1, [r2, #4]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	7213      	strb	r3, [r2, #8]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <RPICom_Init+0x6c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	f103 0418 	add.w	r4, r3, #24
 8000af8:	4615      	mov	r5, r2
 8000afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RPICom_UartActivate(&hRPICom);
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <RPICom_Init+0x6c>)
 8000b10:	f000 f806 	bl	8000b20 <RPICom_UartActivate>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b1c:	240000a0 	.word	0x240000a0

08000b20 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	330f      	adds	r3, #15
 8000b30:	2209      	movs	r2, #9
 8000b32:	4619      	mov	r1, r3
 8000b34:	f005 fe74 	bl	8006820 <HAL_UART_Receive_IT>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <checkSum>:

uint8_t checkSum(void){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
	uint8_t checkSum = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	e00a      	b.n	8000b66 <checkSum+0x26>
		checkSum ^= hRPICom.RxBuffer[i];
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <checkSum+0x3c>)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	330f      	adds	r3, #15
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4053      	eors	r3, r2
 8000b5e:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	ddf1      	ble.n	8000b50 <checkSum+0x10>
	}
	return checkSum;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	240000a0 	.word	0x240000a0

08000b80 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af02      	add	r7, sp, #8
	hRPICom.errorNumber = '0';
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b88:	2230      	movs	r2, #48	; 0x30
 8000b8a:	739a      	strb	r2, [r3, #14]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b8e:	7bdb      	ldrb	r3, [r3, #15]
 8000b90:	2bff      	cmp	r3, #255	; 0xff
 8000b92:	d103      	bne.n	8000b9c <RPICom_DecodeBinaryMessage+0x1c>
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b96:	7c1b      	ldrb	r3, [r3, #16]
 8000b98:	2bfe      	cmp	r3, #254	; 0xfe
 8000b9a:	d002      	beq.n	8000ba2 <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumber ='1';
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000b9e:	2231      	movs	r2, #49	; 0x31
 8000ba0:	739a      	strb	r2, [r3, #14]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000ba4:	7c5b      	ldrb	r3, [r3, #17]
 8000ba6:	2b09      	cmp	r3, #9
 8000ba8:	d002      	beq.n	8000bb0 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumber='2';
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bac:	2232      	movs	r2, #50	; 0x32
 8000bae:	739a      	strb	r2, [r3, #14]
	}
	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bb2:	7c9a      	ldrb	r2, [r3, #18]
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bb6:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bba:	7cdb      	ldrb	r3, [r3, #19]
 8000bbc:	b25a      	sxtb	r2, r3
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bc0:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = ((uint16_t)hRPICom.RxBuffer[5]+(uint16_t)(hRPICom.RxBuffer[6]<<8));
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bc4:	7d1b      	ldrb	r3, [r3, #20]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bca:	7d5b      	ldrb	r3, [r3, #21]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bd8:	815a      	strh	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[7];
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bdc:	7d9a      	ldrb	r2, [r3, #22]
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000be0:	731a      	strb	r2, [r3, #12]

	//Checksum
	if(checkSum() !=  hRPICom.RxBuffer[8]){
 8000be2:	f7ff ffad 	bl	8000b40 <checkSum>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bec:	7ddb      	ldrb	r3, [r3, #23]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d002      	beq.n	8000bf8 <RPICom_DecodeBinaryMessage+0x78>
		hRPICom.errorNumber='3';
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bf4:	2233      	movs	r2, #51	; 0x33
 8000bf6:	739a      	strb	r2, [r3, #14]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE, "Paquet: %u\r\nThrust: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.binaryMessage.thrust,hRPICom.errorNumber);
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000bfa:	7b1b      	ldrb	r3, [r3, #12]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c00:	7a1b      	ldrb	r3, [r3, #8]
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c06:	7b9b      	ldrb	r3, [r3, #14]
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	9200      	str	r2, [sp, #0]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <RPICom_DecodeBinaryMessage+0xd4>)
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <RPICom_DecodeBinaryMessage+0xd8>)
 8000c14:	f008 fa84 	bl	8009120 <sniprintf>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
	hRPICom.TxBuffer[UART_RPI_TX_BUFFER_SIZE-1] = 0; //Securité de print
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.TxBuffer, stringLength, 10);
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c26:	6858      	ldr	r0, [r3, #4]
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	230a      	movs	r3, #10
 8000c2e:	490a      	ldr	r1, [pc, #40]	; (8000c58 <RPICom_DecodeBinaryMessage+0xd8>)
 8000c30:	f005 fd68 	bl	8006704 <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumber =='0'){
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c36:	7b9b      	ldrb	r3, [r3, #14]
 8000c38:	2b30      	cmp	r3, #48	; 0x30
 8000c3a:	d102      	bne.n	8000c42 <RPICom_DecodeBinaryMessage+0xc2>
		Process(&hRPICom.binaryMessage);
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <RPICom_DecodeBinaryMessage+0xdc>)
 8000c3e:	f7ff fea5 	bl	800098c <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c44:	f7ff ff6c 	bl	8000b20 <RPICom_UartActivate>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	240000a0 	.word	0x240000a0
 8000c54:	08009a3c 	.word	0x08009a3c
 8000c58:	240000b8 	.word	0x240000b8
 8000c5c:	240000a8 	.word	0x240000a8

08000c60 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4b80      	ldr	r3, [pc, #512]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7c:	4a7e      	ldr	r2, [pc, #504]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c86:	4b7c      	ldr	r3, [pc, #496]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c94:	4b78      	ldr	r3, [pc, #480]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000c96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9a:	4a77      	ldr	r2, [pc, #476]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ca4:	4b74      	ldr	r3, [pc, #464]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb2:	4b71      	ldr	r3, [pc, #452]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb8:	4a6f      	ldr	r2, [pc, #444]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc2:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b69      	ldr	r3, [pc, #420]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd6:	4a68      	ldr	r2, [pc, #416]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000ce2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf4:	4a60      	ldr	r2, [pc, #384]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cfe:	4b5e      	ldr	r3, [pc, #376]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0c:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d12:	4a59      	ldr	r2, [pc, #356]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d1c:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2a:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d30:	4a51      	ldr	r2, [pc, #324]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d48:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4e:	4a4a      	ldr	r2, [pc, #296]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d50:	f043 0310 	orr.w	r3, r3, #16
 8000d54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d58:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <MX_GPIO_Init+0x218>)
 8000d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6c:	4843      	ldr	r0, [pc, #268]	; (8000e7c <MX_GPIO_Init+0x21c>)
 8000d6e:	f001 fdb9 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d78:	4841      	ldr	r0, [pc, #260]	; (8000e80 <MX_GPIO_Init+0x220>)
 8000d7a:	f001 fdb3 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2102      	movs	r1, #2
 8000d82:	4840      	ldr	r0, [pc, #256]	; (8000e84 <MX_GPIO_Init+0x224>)
 8000d84:	f001 fdae 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	483a      	ldr	r0, [pc, #232]	; (8000e88 <MX_GPIO_Init+0x228>)
 8000d9e:	f001 fbf1 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	4830      	ldr	r0, [pc, #192]	; (8000e7c <MX_GPIO_Init+0x21c>)
 8000dbc:	f001 fbe2 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dc0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4829      	ldr	r0, [pc, #164]	; (8000e80 <MX_GPIO_Init+0x220>)
 8000dda:	f001 fbd3 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4826      	ldr	r0, [pc, #152]	; (8000e8c <MX_GPIO_Init+0x22c>)
 8000df4:	f001 fbc6 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4820      	ldr	r0, [pc, #128]	; (8000e90 <MX_GPIO_Init+0x230>)
 8000e0e:	f001 fbb9 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e24:	230a      	movs	r3, #10
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_GPIO_Init+0x230>)
 8000e30:	f001 fba8 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000e34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <MX_GPIO_Init+0x230>)
 8000e4e:	f001 fb99 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e52:	2302      	movs	r3, #2
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_GPIO_Init+0x224>)
 8000e6a:	f001 fb8b 	bl	8002584 <HAL_GPIO_Init>

}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	; 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	58021400 	.word	0x58021400
 8000e80:	58020400 	.word	0x58020400
 8000e84:	58021000 	.word	0x58021000
 8000e88:	58020800 	.word	0x58020800
 8000e8c:	58021800 	.word	0x58021800
 8000e90:	58020000 	.word	0x58020000

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 fc4a 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f830 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f7ff fede 	bl	8000c60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ea4:	f000 faca 	bl	800143c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ea8:	f000 fc10 	bl	80016cc <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000eac:	f000 fa7a 	bl	80013a4 <MX_UART4_Init>
  MX_TIM2_Init();
 8000eb0:	f000 f99e 	bl	80011f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "\nStarting...\r\n", 14, 10);
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	220e      	movs	r2, #14
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <main+0x58>)
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <main+0x5c>)
 8000ebc:	f005 fc22 	bl	8006704 <HAL_UART_Transmit>
	Process_Init();
 8000ec0:	f7ff fd5e 	bl	8000980 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 8000ec4:	490a      	ldr	r1, [pc, #40]	; (8000ef0 <main+0x5c>)
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <main+0x60>)
 8000ec8:	f7ff fdf2 	bl	8000ab0 <RPICom_Init>
	HAL_UART_Transmit(&huart3, "Init Done\r\n", 11, 10);
 8000ecc:	230a      	movs	r3, #10
 8000ece:	220b      	movs	r2, #11
 8000ed0:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <main+0x64>)
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <main+0x5c>)
 8000ed4:	f005 fc16 	bl	8006704 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <main+0x68>)
 8000edc:	f001 fd1b 	bl	8002916 <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 8000ee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee4:	f000 fcb6 	bl	8001854 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000ee8:	e7f6      	b.n	8000ed8 <main+0x44>
 8000eea:	bf00      	nop
 8000eec:	08009a64 	.word	0x08009a64
 8000ef0:	240001dc 	.word	0x240001dc
 8000ef4:	24000148 	.word	0x24000148
 8000ef8:	08009a74 	.word	0x08009a74
 8000efc:	58020400 	.word	0x58020400

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b09c      	sub	sp, #112	; 0x70
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	224c      	movs	r2, #76	; 0x4c
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f008 f8fe 	bl	8009110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2220      	movs	r2, #32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f008 f8f8 	bl	8009110 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f20:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <SystemClock_Config+0xe4>)
 8000f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f001 fd0e 	bl	800294c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f30:	2300      	movs	r3, #0
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <SystemClock_Config+0xe8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a2b      	ldr	r2, [pc, #172]	; (8000fe8 <SystemClock_Config+0xe8>)
 8000f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <SystemClock_Config+0xe8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f4c:	bf00      	nop
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <SystemClock_Config+0xe8>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5a:	d1f8      	bne.n	8000f4e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f5c:	2321      	movs	r3, #33	; 0x21
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f66:	2301      	movs	r3, #1
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f76:	2318      	movs	r3, #24
 8000f78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f86:	230c      	movs	r3, #12
 8000f88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fd32 	bl	8002a00 <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fa2:	f000 f823 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	233f      	movs	r3, #63	; 0x3f
 8000fa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2303      	movs	r3, #3
 8000fac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 f94a 	bl	8003264 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000fd6:	f000 f809 	bl	8000fec <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3770      	adds	r7, #112	; 0x70
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58024800 	.word	0x58024800

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_MspInit+0x30>)
 8001000:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x30>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x30>)
 8001010:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	58024400 	.word	0x58024400

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 fbcc 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <UART4_IRQHandler+0x10>)
 8001086:	f005 fc17 	bl	80068b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000148 	.word	0x24000148

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f007 fffa 	bl	80090bc <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24100000 	.word	0x24100000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	240000f8 	.word	0x240000f8
 80010fc:	24000288 	.word	0x24000288

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <SystemInit+0xd0>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <SystemInit+0xd0>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <SystemInit+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	2b02      	cmp	r3, #2
 800111e:	d807      	bhi.n	8001130 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <SystemInit+0xd4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 030f 	bic.w	r3, r3, #15
 8001128:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <SystemInit+0xd4>)
 800112a:	f043 0303 	orr.w	r3, r3, #3
 800112e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <SystemInit+0xd8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <SystemInit+0xd8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <SystemInit+0xd8>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <SystemInit+0xd8>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4924      	ldr	r1, [pc, #144]	; (80011d8 <SystemInit+0xd8>)
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <SystemInit+0xdc>)
 800114a:	4013      	ands	r3, r2
 800114c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <SystemInit+0xd4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SystemInit+0xd4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 030f 	bic.w	r3, r3, #15
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <SystemInit+0xd4>)
 8001164:	f043 0303 	orr.w	r3, r3, #3
 8001168:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <SystemInit+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <SystemInit+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <SystemInit+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <SystemInit+0xd8>)
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <SystemInit+0xe0>)
 8001180:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <SystemInit+0xd8>)
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <SystemInit+0xe4>)
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <SystemInit+0xd8>)
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <SystemInit+0xe8>)
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <SystemInit+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <SystemInit+0xd8>)
 8001196:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <SystemInit+0xe8>)
 8001198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <SystemInit+0xd8>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <SystemInit+0xd8>)
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <SystemInit+0xe8>)
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <SystemInit+0xd8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <SystemInit+0xd8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <SystemInit+0xd8>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <SystemInit+0xd8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SystemInit+0xec>)
 80011c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	52002000 	.word	0x52002000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80011e0:	02020200 	.word	0x02020200
 80011e4:	01ff0000 	.word	0x01ff0000
 80011e8:	01010280 	.word	0x01010280
 80011ec:	52004000 	.word	0x52004000

080011f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM2_Init+0x100>)
 8001224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001228:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <MX_TIM2_Init+0x100>)
 800122c:	f240 727f 	movw	r2, #1919	; 0x77f
 8001230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <MX_TIM2_Init+0x100>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <MX_TIM2_Init+0x100>)
 800123a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <MX_TIM2_Init+0x100>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <MX_TIM2_Init+0x100>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124c:	4828      	ldr	r0, [pc, #160]	; (80012f0 <MX_TIM2_Init+0x100>)
 800124e:	f004 f975 	bl	800553c <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001258:	f7ff fec8 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	4619      	mov	r1, r3
 8001268:	4821      	ldr	r0, [pc, #132]	; (80012f0 <MX_TIM2_Init+0x100>)
 800126a:	f004 fc41 	bl	8005af0 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001274:	f7ff feba 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001278:	481d      	ldr	r0, [pc, #116]	; (80012f0 <MX_TIM2_Init+0x100>)
 800127a:	f004 f9b6 	bl	80055ea <HAL_TIM_PWM_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001284:	f7ff feb2 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4816      	ldr	r0, [pc, #88]	; (80012f0 <MX_TIM2_Init+0x100>)
 8001298:	f005 f956 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80012a2:	f7ff fea3 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a6:	2360      	movs	r3, #96	; 0x60
 80012a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_TIM2_Init+0x100>)
 80012be:	f004 fb03 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80012c8:	f7ff fe90 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	2204      	movs	r2, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM2_Init+0x100>)
 80012d4:	f004 faf8 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80012de:	f7ff fe85 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM2_Init+0x100>)
 80012e4:	f000 f826 	bl	8001334 <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3738      	adds	r7, #56	; 0x38
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	240000fc 	.word	0x240000fc

080012f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d10e      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 8001308:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 8001318:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	58024400 	.word	0x58024400

08001334 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d11e      	bne.n	8001394 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_TIM_MspPostInit+0x68>)
 8001358:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_TIM_MspPostInit+0x68>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_TIM_MspPostInit+0x68>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001374:	2322      	movs	r3, #34	; 0x22
 8001376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <HAL_TIM_MspPostInit+0x6c>)
 8001390:	f001 f8f8 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020000 	.word	0x58020000

080013a4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_UART4_Init+0x90>)
 80013aa:	4a23      	ldr	r2, [pc, #140]	; (8001438 <MX_UART4_Init+0x94>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_UART4_Init+0x90>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_UART4_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_UART4_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_UART4_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_UART4_Init+0x90>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_UART4_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_UART4_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_UART4_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_UART4_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_UART4_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <MX_UART4_Init+0x90>)
 80013ee:	f005 f939 	bl	8006664 <HAL_UART_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013f8:	f7ff fdf8 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_UART4_Init+0x90>)
 8001400:	f007 fd91 	bl	8008f26 <HAL_UARTEx_SetTxFifoThreshold>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800140a:	f7ff fdef 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	2100      	movs	r1, #0
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <MX_UART4_Init+0x90>)
 8001412:	f007 fdc6 	bl	8008fa2 <HAL_UARTEx_SetRxFifoThreshold>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800141c:	f7ff fde6 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_UART4_Init+0x90>)
 8001422:	f007 fd47 	bl	8008eb4 <HAL_UARTEx_DisableFifoMode>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800142c:	f7ff fdde 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	24000148 	.word	0x24000148
 8001438:	40004c00 	.word	0x40004c00

0800143c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001442:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <MX_USART3_UART_Init+0x94>)
 8001444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_USART3_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_USART3_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_USART3_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001486:	f005 f8ed 	bl	8006664 <HAL_UART_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001490:	f7ff fdac 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_USART3_UART_Init+0x90>)
 8001498:	f007 fd45 	bl	8008f26 <HAL_UARTEx_SetTxFifoThreshold>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014a2:	f7ff fda3 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <MX_USART3_UART_Init+0x90>)
 80014aa:	f007 fd7a 	bl	8008fa2 <HAL_UARTEx_SetRxFifoThreshold>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f7ff fd9a 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_USART3_UART_Init+0x90>)
 80014ba:	f007 fcfb 	bl	8008eb4 <HAL_UARTEx_DisableFifoMode>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014c4:	f7ff fd92 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240001dc 	.word	0x240001dc
 80014d0:	40004800 	.word	0x40004800

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0be      	sub	sp, #248	; 0xf8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	22c0      	movs	r2, #192	; 0xc0
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 fe0b 	bl	8009110 <memset>
  if(uartHandle->Instance==UART4)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a63      	ldr	r2, [pc, #396]	; (800168c <HAL_UART_MspInit+0x1b8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d172      	bne.n	80015ea <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001504:	f04f 0202 	mov.w	r2, #2
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fa2e 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001526:	f7ff fd61 	bl	8000fec <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800152a:	4b59      	ldr	r3, [pc, #356]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800152c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001530:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 8001532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001536:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800153a:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800153c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b51      	ldr	r3, [pc, #324]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800154a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800154e:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001558:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800155a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 8001568:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800156c:	4a48      	ldr	r2, [pc, #288]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 8001578:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001584:	2301      	movs	r3, #1
 8001586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800159c:	2308      	movs	r3, #8
 800159e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015a6:	4619      	mov	r1, r3
 80015a8:	483a      	ldr	r0, [pc, #232]	; (8001694 <HAL_UART_MspInit+0x1c0>)
 80015aa:	f000 ffeb 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015c6:	2308      	movs	r3, #8
 80015c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4831      	ldr	r0, [pc, #196]	; (8001698 <HAL_UART_MspInit+0x1c4>)
 80015d4:	f000 ffd6 	bl	8002584 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2034      	movs	r0, #52	; 0x34
 80015de:	f000 fa38 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015e2:	2034      	movs	r0, #52	; 0x34
 80015e4:	f000 fa4f 	bl	8001a86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015e8:	e04b      	b.n	8001682 <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2b      	ldr	r2, [pc, #172]	; (800169c <HAL_UART_MspInit+0x1c8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d146      	bne.n	8001682 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015f4:	f04f 0202 	mov.w	r2, #2
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	4618      	mov	r0, r3
 800160c:	f002 f9b6 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_UART_MspInit+0x146>
      Error_Handler();
 8001616:	f7ff fce9 	bl	8000fec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800161c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 8001622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001626:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800162c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800163a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_UART_MspInit+0x1bc>)
 800164a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001656:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001670:	2307      	movs	r3, #7
 8001672:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800167a:	4619      	mov	r1, r3
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <HAL_UART_MspInit+0x1c4>)
 800167e:	f000 ff81 	bl	8002584 <HAL_GPIO_Init>
}
 8001682:	bf00      	nop
 8001684:	37f8      	adds	r7, #248	; 0xf8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40004c00 	.word	0x40004c00
 8001690:	58024400 	.word	0x58024400
 8001694:	58020000 	.word	0x58020000
 8001698:	58020c00 	.word	0x58020c00
 800169c:	40004800 	.word	0x40004800

080016a0 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <HAL_UART_RxCpltCallback+0x24>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d104      	bne.n	80016bc <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 80016b2:	f7ff fa65 	bl	8000b80 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 80016b6:	4804      	ldr	r0, [pc, #16]	; (80016c8 <HAL_UART_RxCpltCallback+0x28>)
 80016b8:	f7ff fa32 	bl	8000b20 <RPICom_UartActivate>
	}
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004c00 	.word	0x40004c00
 80016c8:	240000a0 	.word	0x240000a0

080016cc <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e0:	f7ff fd0e 	bl	8001100 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	; (8001728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800170a:	f007 fcdd 	bl	80090c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fbc1 	bl	8000e94 <main>
  bx  lr
 8001712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001718:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800171c:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001720:	08009afc 	.word	0x08009afc
  ldr r2, =_sbss
 8001724:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8001728:	24000284 	.word	0x24000284

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f980 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800173c:	f001 ff48 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_Init+0x68>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	4913      	ldr	r1, [pc, #76]	; (800179c <HAL_Init+0x6c>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_Init+0x68>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_Init+0x6c>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_Init+0x70>)
 8001772:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_Init+0x74>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f814 	bl	80017a8 <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e002      	b.n	8001790 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800178a:	f7ff fc35 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	58024400 	.word	0x58024400
 800179c:	08009a80 	.word	0x08009a80
 80017a0:	24000014 	.word	0x24000014
 80017a4:	24000010 	.word	0x24000010

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_InitTick+0x60>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e021      	b.n	8001800 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_InitTick+0x64>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_InitTick+0x60>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f965 	bl	8001aa2 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f000 f92f 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x68>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2400001c 	.word	0x2400001c
 800180c:	24000010 	.word	0x24000010
 8001810:	24000018 	.word	0x24000018

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2400001c 	.word	0x2400001c
 8001838:	24000270 	.word	0x24000270

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	24000270 	.word	0x24000270

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2400001c 	.word	0x2400001c

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <__NVIC_SetPriorityGrouping+0x40>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x40>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00
 80018e0:	05fa0000 	.word	0x05fa0000

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <__NVIC_SetPriority+0x50>)
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a1c:	f7ff ff8e 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff29 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff40 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff90 	bl	8001990 <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5f 	bl	800193c <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff33 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffa4 	bl	80019f8 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff feba 	bl	800183c <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e2dc      	b.n	800208e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d008      	beq.n	8001af2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e2cd      	b.n	800208e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a76      	ldr	r2, [pc, #472]	; (8001cd0 <HAL_DMA_Abort+0x214>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04a      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a74      	ldr	r2, [pc, #464]	; (8001cd4 <HAL_DMA_Abort+0x218>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d045      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a73      	ldr	r2, [pc, #460]	; (8001cd8 <HAL_DMA_Abort+0x21c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d040      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a71      	ldr	r2, [pc, #452]	; (8001cdc <HAL_DMA_Abort+0x220>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d03b      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a70      	ldr	r2, [pc, #448]	; (8001ce0 <HAL_DMA_Abort+0x224>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d036      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <HAL_DMA_Abort+0x228>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d031      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6d      	ldr	r2, [pc, #436]	; (8001ce8 <HAL_DMA_Abort+0x22c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d02c      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a6b      	ldr	r2, [pc, #428]	; (8001cec <HAL_DMA_Abort+0x230>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d027      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <HAL_DMA_Abort+0x234>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a68      	ldr	r2, [pc, #416]	; (8001cf4 <HAL_DMA_Abort+0x238>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01d      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a67      	ldr	r2, [pc, #412]	; (8001cf8 <HAL_DMA_Abort+0x23c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_DMA_Abort+0x240>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a64      	ldr	r2, [pc, #400]	; (8001d00 <HAL_DMA_Abort+0x244>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a62      	ldr	r2, [pc, #392]	; (8001d04 <HAL_DMA_Abort+0x248>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a61      	ldr	r2, [pc, #388]	; (8001d08 <HAL_DMA_Abort+0x24c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Abort+0xd6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_DMA_Abort+0x250>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Abort+0xda>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_DMA_Abort+0xdc>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 021e 	bic.w	r2, r2, #30
 8001baa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e00a      	b.n	8001bda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a3c      	ldr	r2, [pc, #240]	; (8001cd0 <HAL_DMA_Abort+0x214>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d072      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <HAL_DMA_Abort+0x218>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d06d      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <HAL_DMA_Abort+0x21c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d068      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a37      	ldr	r2, [pc, #220]	; (8001cdc <HAL_DMA_Abort+0x220>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d063      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a36      	ldr	r2, [pc, #216]	; (8001ce0 <HAL_DMA_Abort+0x224>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d05e      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <HAL_DMA_Abort+0x228>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d059      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	; (8001ce8 <HAL_DMA_Abort+0x22c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d054      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a31      	ldr	r2, [pc, #196]	; (8001cec <HAL_DMA_Abort+0x230>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d04f      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <HAL_DMA_Abort+0x234>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04a      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <HAL_DMA_Abort+0x238>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d045      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2d      	ldr	r2, [pc, #180]	; (8001cf8 <HAL_DMA_Abort+0x23c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d040      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <HAL_DMA_Abort+0x240>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <HAL_DMA_Abort+0x244>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d036      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a28      	ldr	r2, [pc, #160]	; (8001d04 <HAL_DMA_Abort+0x248>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_DMA_Abort+0x24c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d02c      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <HAL_DMA_Abort+0x250>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d027      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <HAL_DMA_Abort+0x254>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d022      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_DMA_Abort+0x258>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01d      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <HAL_DMA_Abort+0x25c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d018      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_DMA_Abort+0x260>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_DMA_Abort+0x264>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_DMA_Abort+0x268>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d009      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_DMA_Abort+0x26c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_DMA_Abort+0x20e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_DMA_Abort+0x270>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d132      	bne.n	8001d30 <HAL_DMA_Abort+0x274>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e031      	b.n	8001d32 <HAL_DMA_Abort+0x276>
 8001cce:	bf00      	nop
 8001cd0:	40020010 	.word	0x40020010
 8001cd4:	40020028 	.word	0x40020028
 8001cd8:	40020040 	.word	0x40020040
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	40020070 	.word	0x40020070
 8001ce4:	40020088 	.word	0x40020088
 8001ce8:	400200a0 	.word	0x400200a0
 8001cec:	400200b8 	.word	0x400200b8
 8001cf0:	40020410 	.word	0x40020410
 8001cf4:	40020428 	.word	0x40020428
 8001cf8:	40020440 	.word	0x40020440
 8001cfc:	40020458 	.word	0x40020458
 8001d00:	40020470 	.word	0x40020470
 8001d04:	40020488 	.word	0x40020488
 8001d08:	400204a0 	.word	0x400204a0
 8001d0c:	400204b8 	.word	0x400204b8
 8001d10:	58025408 	.word	0x58025408
 8001d14:	5802541c 	.word	0x5802541c
 8001d18:	58025430 	.word	0x58025430
 8001d1c:	58025444 	.word	0x58025444
 8001d20:	58025458 	.word	0x58025458
 8001d24:	5802546c 	.word	0x5802546c
 8001d28:	58025480 	.word	0x58025480
 8001d2c:	58025494 	.word	0x58025494
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6d      	ldr	r2, [pc, #436]	; (8001f00 <HAL_DMA_Abort+0x444>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d04a      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6b      	ldr	r2, [pc, #428]	; (8001f04 <HAL_DMA_Abort+0x448>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d045      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <HAL_DMA_Abort+0x44c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d040      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a68      	ldr	r2, [pc, #416]	; (8001f0c <HAL_DMA_Abort+0x450>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d03b      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a67      	ldr	r2, [pc, #412]	; (8001f10 <HAL_DMA_Abort+0x454>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d036      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a65      	ldr	r2, [pc, #404]	; (8001f14 <HAL_DMA_Abort+0x458>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d031      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a64      	ldr	r2, [pc, #400]	; (8001f18 <HAL_DMA_Abort+0x45c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d02c      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a62      	ldr	r2, [pc, #392]	; (8001f1c <HAL_DMA_Abort+0x460>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d027      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a61      	ldr	r2, [pc, #388]	; (8001f20 <HAL_DMA_Abort+0x464>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a5f      	ldr	r2, [pc, #380]	; (8001f24 <HAL_DMA_Abort+0x468>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01d      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5e      	ldr	r2, [pc, #376]	; (8001f28 <HAL_DMA_Abort+0x46c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5c      	ldr	r2, [pc, #368]	; (8001f2c <HAL_DMA_Abort+0x470>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_DMA_Abort+0x474>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a59      	ldr	r2, [pc, #356]	; (8001f34 <HAL_DMA_Abort+0x478>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_DMA_Abort+0x47c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Abort+0x32a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <HAL_DMA_Abort+0x480>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d108      	bne.n	8001df8 <HAL_DMA_Abort+0x33c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e007      	b.n	8001e08 <HAL_DMA_Abort+0x34c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e08:	e013      	b.n	8001e32 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0a:	f7ff fd17 	bl	800183c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d90c      	bls.n	8001e32 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e12d      	b.n	800208e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1e5      	bne.n	8001e0a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <HAL_DMA_Abort+0x444>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d04a      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <HAL_DMA_Abort+0x448>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d045      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <HAL_DMA_Abort+0x44c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d040      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <HAL_DMA_Abort+0x450>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d03b      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_DMA_Abort+0x454>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d036      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_DMA_Abort+0x458>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d031      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_DMA_Abort+0x45c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d02c      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_DMA_Abort+0x460>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d027      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <HAL_DMA_Abort+0x464>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d022      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <HAL_DMA_Abort+0x468>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01d      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <HAL_DMA_Abort+0x46c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d018      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_DMA_Abort+0x470>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_DMA_Abort+0x474>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00e      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_DMA_Abort+0x478>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d009      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <HAL_DMA_Abort+0x47c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_DMA_Abort+0x422>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a18      	ldr	r2, [pc, #96]	; (8001f3c <HAL_DMA_Abort+0x480>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_DMA_Abort+0x426>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_Abort+0x428>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d02b      	beq.n	8001f40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	223f      	movs	r2, #63	; 0x3f
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	e02a      	b.n	8001f56 <HAL_DMA_Abort+0x49a>
 8001f00:	40020010 	.word	0x40020010
 8001f04:	40020028 	.word	0x40020028
 8001f08:	40020040 	.word	0x40020040
 8001f0c:	40020058 	.word	0x40020058
 8001f10:	40020070 	.word	0x40020070
 8001f14:	40020088 	.word	0x40020088
 8001f18:	400200a0 	.word	0x400200a0
 8001f1c:	400200b8 	.word	0x400200b8
 8001f20:	40020410 	.word	0x40020410
 8001f24:	40020428 	.word	0x40020428
 8001f28:	40020440 	.word	0x40020440
 8001f2c:	40020458 	.word	0x40020458
 8001f30:	40020470 	.word	0x40020470
 8001f34:	40020488 	.word	0x40020488
 8001f38:	400204a0 	.word	0x400204a0
 8001f3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2201      	movs	r2, #1
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4f      	ldr	r2, [pc, #316]	; (8002098 <HAL_DMA_Abort+0x5dc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d072      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_DMA_Abort+0x5e0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d06d      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_DMA_Abort+0x5e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d068      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_DMA_Abort+0x5e8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d063      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a49      	ldr	r2, [pc, #292]	; (80020a8 <HAL_DMA_Abort+0x5ec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d05e      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a47      	ldr	r2, [pc, #284]	; (80020ac <HAL_DMA_Abort+0x5f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d059      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <HAL_DMA_Abort+0x5f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d054      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a44      	ldr	r2, [pc, #272]	; (80020b4 <HAL_DMA_Abort+0x5f8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d04f      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a43      	ldr	r2, [pc, #268]	; (80020b8 <HAL_DMA_Abort+0x5fc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04a      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a41      	ldr	r2, [pc, #260]	; (80020bc <HAL_DMA_Abort+0x600>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d045      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <HAL_DMA_Abort+0x604>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d040      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3e      	ldr	r2, [pc, #248]	; (80020c4 <HAL_DMA_Abort+0x608>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d03b      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <HAL_DMA_Abort+0x60c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d036      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <HAL_DMA_Abort+0x610>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d031      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <HAL_DMA_Abort+0x614>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d02c      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <HAL_DMA_Abort+0x618>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d027      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a37      	ldr	r2, [pc, #220]	; (80020d8 <HAL_DMA_Abort+0x61c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d022      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a35      	ldr	r2, [pc, #212]	; (80020dc <HAL_DMA_Abort+0x620>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01d      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a34      	ldr	r2, [pc, #208]	; (80020e0 <HAL_DMA_Abort+0x624>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d018      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <HAL_DMA_Abort+0x628>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <HAL_DMA_Abort+0x62c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2f      	ldr	r2, [pc, #188]	; (80020ec <HAL_DMA_Abort+0x630>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2e      	ldr	r2, [pc, #184]	; (80020f0 <HAL_DMA_Abort+0x634>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_DMA_Abort+0x58a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <HAL_DMA_Abort+0x638>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_DMA_Abort+0x58e>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_DMA_Abort+0x590>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002058:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002070:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800207a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40020010 	.word	0x40020010
 800209c:	40020028 	.word	0x40020028
 80020a0:	40020040 	.word	0x40020040
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40020070 	.word	0x40020070
 80020ac:	40020088 	.word	0x40020088
 80020b0:	400200a0 	.word	0x400200a0
 80020b4:	400200b8 	.word	0x400200b8
 80020b8:	40020410 	.word	0x40020410
 80020bc:	40020428 	.word	0x40020428
 80020c0:	40020440 	.word	0x40020440
 80020c4:	40020458 	.word	0x40020458
 80020c8:	40020470 	.word	0x40020470
 80020cc:	40020488 	.word	0x40020488
 80020d0:	400204a0 	.word	0x400204a0
 80020d4:	400204b8 	.word	0x400204b8
 80020d8:	58025408 	.word	0x58025408
 80020dc:	5802541c 	.word	0x5802541c
 80020e0:	58025430 	.word	0x58025430
 80020e4:	58025444 	.word	0x58025444
 80020e8:	58025458 	.word	0x58025458
 80020ec:	5802546c 	.word	0x5802546c
 80020f0:	58025480 	.word	0x58025480
 80020f4:	58025494 	.word	0x58025494

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e237      	b.n	800257a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e22c      	b.n	800257a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a5c      	ldr	r2, [pc, #368]	; (8002298 <HAL_DMA_Abort_IT+0x1a0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d04a      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5b      	ldr	r2, [pc, #364]	; (800229c <HAL_DMA_Abort_IT+0x1a4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d045      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a59      	ldr	r2, [pc, #356]	; (80022a0 <HAL_DMA_Abort_IT+0x1a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d040      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <HAL_DMA_Abort_IT+0x1ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d03b      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_DMA_Abort_IT+0x1b0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d036      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a55      	ldr	r2, [pc, #340]	; (80022ac <HAL_DMA_Abort_IT+0x1b4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d031      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a53      	ldr	r2, [pc, #332]	; (80022b0 <HAL_DMA_Abort_IT+0x1b8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02c      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_DMA_Abort_IT+0x1bc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d027      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_DMA_Abort_IT+0x1c0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d022      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_DMA_Abort_IT+0x1c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01d      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_DMA_Abort_IT+0x1c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d018      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_DMA_Abort_IT+0x1cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_DMA_Abort_IT+0x1d0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00e      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a49      	ldr	r2, [pc, #292]	; (80022cc <HAL_DMA_Abort_IT+0x1d4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a47      	ldr	r2, [pc, #284]	; (80022d0 <HAL_DMA_Abort_IT+0x1d8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xc8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a46      	ldr	r2, [pc, #280]	; (80022d4 <HAL_DMA_Abort_IT+0x1dc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_DMA_Abort_IT+0xcc>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_DMA_Abort_IT+0xce>
 80021c4:	2300      	movs	r3, #0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8086 	beq.w	80022d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2204      	movs	r2, #4
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2f      	ldr	r2, [pc, #188]	; (8002298 <HAL_DMA_Abort_IT+0x1a0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2e      	ldr	r2, [pc, #184]	; (800229c <HAL_DMA_Abort_IT+0x1a4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2c      	ldr	r2, [pc, #176]	; (80022a0 <HAL_DMA_Abort_IT+0x1a8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <HAL_DMA_Abort_IT+0x1ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a29      	ldr	r2, [pc, #164]	; (80022a8 <HAL_DMA_Abort_IT+0x1b0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <HAL_DMA_Abort_IT+0x1b4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <HAL_DMA_Abort_IT+0x1b8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <HAL_DMA_Abort_IT+0x1bc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <HAL_DMA_Abort_IT+0x1c0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_DMA_Abort_IT+0x1c4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_DMA_Abort_IT+0x1c8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <HAL_DMA_Abort_IT+0x1cc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_DMA_Abort_IT+0x1d0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_DMA_Abort_IT+0x1d4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_DMA_Abort_IT+0x1d8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Abort_IT+0x17c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_DMA_Abort_IT+0x1dc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <HAL_DMA_Abort_IT+0x18e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e178      	b.n	8002578 <HAL_DMA_Abort_IT+0x480>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e16f      	b.n	8002578 <HAL_DMA_Abort_IT+0x480>
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 020e 	bic.w	r2, r2, #14
 80022e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6c      	ldr	r2, [pc, #432]	; (80024a0 <HAL_DMA_Abort_IT+0x3a8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d04a      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6b      	ldr	r2, [pc, #428]	; (80024a4 <HAL_DMA_Abort_IT+0x3ac>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d045      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a69      	ldr	r2, [pc, #420]	; (80024a8 <HAL_DMA_Abort_IT+0x3b0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d040      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a68      	ldr	r2, [pc, #416]	; (80024ac <HAL_DMA_Abort_IT+0x3b4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d03b      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a66      	ldr	r2, [pc, #408]	; (80024b0 <HAL_DMA_Abort_IT+0x3b8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d036      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_DMA_Abort_IT+0x3bc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d031      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a63      	ldr	r2, [pc, #396]	; (80024b8 <HAL_DMA_Abort_IT+0x3c0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02c      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a62      	ldr	r2, [pc, #392]	; (80024bc <HAL_DMA_Abort_IT+0x3c4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d027      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a60      	ldr	r2, [pc, #384]	; (80024c0 <HAL_DMA_Abort_IT+0x3c8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d022      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5f      	ldr	r2, [pc, #380]	; (80024c4 <HAL_DMA_Abort_IT+0x3cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d01d      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5d      	ldr	r2, [pc, #372]	; (80024c8 <HAL_DMA_Abort_IT+0x3d0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d018      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5c      	ldr	r2, [pc, #368]	; (80024cc <HAL_DMA_Abort_IT+0x3d4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5a      	ldr	r2, [pc, #360]	; (80024d0 <HAL_DMA_Abort_IT+0x3d8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a59      	ldr	r2, [pc, #356]	; (80024d4 <HAL_DMA_Abort_IT+0x3dc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <HAL_DMA_Abort_IT+0x3e0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_DMA_Abort_IT+0x290>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a56      	ldr	r2, [pc, #344]	; (80024dc <HAL_DMA_Abort_IT+0x3e4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d108      	bne.n	800239a <HAL_DMA_Abort_IT+0x2a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e007      	b.n	80023aa <HAL_DMA_Abort_IT+0x2b2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <HAL_DMA_Abort_IT+0x3a8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d072      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <HAL_DMA_Abort_IT+0x3ac>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d06d      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a39      	ldr	r2, [pc, #228]	; (80024a8 <HAL_DMA_Abort_IT+0x3b0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d068      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a37      	ldr	r2, [pc, #220]	; (80024ac <HAL_DMA_Abort_IT+0x3b4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d063      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a36      	ldr	r2, [pc, #216]	; (80024b0 <HAL_DMA_Abort_IT+0x3b8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <HAL_DMA_Abort_IT+0x3bc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d059      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_DMA_Abort_IT+0x3c0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d054      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <HAL_DMA_Abort_IT+0x3c4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04f      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a30      	ldr	r2, [pc, #192]	; (80024c0 <HAL_DMA_Abort_IT+0x3c8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04a      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2e      	ldr	r2, [pc, #184]	; (80024c4 <HAL_DMA_Abort_IT+0x3cc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d045      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <HAL_DMA_Abort_IT+0x3d0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d040      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_DMA_Abort_IT+0x3d4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d03b      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <HAL_DMA_Abort_IT+0x3d8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d036      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_DMA_Abort_IT+0x3dc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <HAL_DMA_Abort_IT+0x3e0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d02c      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a25      	ldr	r2, [pc, #148]	; (80024dc <HAL_DMA_Abort_IT+0x3e4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d027      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <HAL_DMA_Abort_IT+0x3e8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <HAL_DMA_Abort_IT+0x3ec>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01d      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <HAL_DMA_Abort_IT+0x3f0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d018      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <HAL_DMA_Abort_IT+0x3f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_DMA_Abort_IT+0x3f8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_DMA_Abort_IT+0x3fc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_DMA_Abort_IT+0x400>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Abort_IT+0x3a2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_DMA_Abort_IT+0x404>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d132      	bne.n	8002500 <HAL_DMA_Abort_IT+0x408>
 800249a:	2301      	movs	r3, #1
 800249c:	e031      	b.n	8002502 <HAL_DMA_Abort_IT+0x40a>
 800249e:	bf00      	nop
 80024a0:	40020010 	.word	0x40020010
 80024a4:	40020028 	.word	0x40020028
 80024a8:	40020040 	.word	0x40020040
 80024ac:	40020058 	.word	0x40020058
 80024b0:	40020070 	.word	0x40020070
 80024b4:	40020088 	.word	0x40020088
 80024b8:	400200a0 	.word	0x400200a0
 80024bc:	400200b8 	.word	0x400200b8
 80024c0:	40020410 	.word	0x40020410
 80024c4:	40020428 	.word	0x40020428
 80024c8:	40020440 	.word	0x40020440
 80024cc:	40020458 	.word	0x40020458
 80024d0:	40020470 	.word	0x40020470
 80024d4:	40020488 	.word	0x40020488
 80024d8:	400204a0 	.word	0x400204a0
 80024dc:	400204b8 	.word	0x400204b8
 80024e0:	58025408 	.word	0x58025408
 80024e4:	5802541c 	.word	0x5802541c
 80024e8:	58025430 	.word	0x58025430
 80024ec:	58025444 	.word	0x58025444
 80024f0:	58025458 	.word	0x58025458
 80024f4:	5802546c 	.word	0x5802546c
 80024f8:	58025480 	.word	0x58025480
 80024fc:	58025494 	.word	0x58025494
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d028      	beq.n	8002558 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002514:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2201      	movs	r2, #1
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002534:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800254c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002556:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <HAL_GPIO_Init+0x234>)
 8002594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002596:	e194      	b.n	80028c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8186 	beq.w	80028bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <HAL_GPIO_Init+0x44>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d130      	bne.n	800262a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025fe:	2201      	movs	r2, #1
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 0201 	and.w	r2, r3, #1
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d017      	beq.n	8002666 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d123      	bne.n	80026ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	69b9      	ldr	r1, [r7, #24]
 80026b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0203 	and.w	r2, r3, #3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80e0 	beq.w	80028bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_GPIO_Init+0x238>)
 80026fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002702:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <HAL_GPIO_Init+0x238>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_GPIO_Init+0x238>)
 800270e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271a:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <HAL_GPIO_Init+0x23c>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_GPIO_Init+0x240>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d052      	beq.n	80027ec <HAL_GPIO_Init+0x268>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <HAL_GPIO_Init+0x244>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_GPIO_Init+0x22e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_GPIO_Init+0x248>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <HAL_GPIO_Init+0x22a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_GPIO_Init+0x24c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d025      	beq.n	80027aa <HAL_GPIO_Init+0x226>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_GPIO_Init+0x250>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01f      	beq.n	80027a6 <HAL_GPIO_Init+0x222>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_GPIO_Init+0x254>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x21e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_GPIO_Init+0x258>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x21a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_GPIO_Init+0x25c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x216>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <HAL_GPIO_Init+0x260>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x212>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_GPIO_Init+0x264>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x20e>
 800278e:	2309      	movs	r3, #9
 8002790:	e02d      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 8002792:	230a      	movs	r3, #10
 8002794:	e02b      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 8002796:	2308      	movs	r3, #8
 8002798:	e029      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 800279a:	2307      	movs	r3, #7
 800279c:	e027      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 800279e:	2306      	movs	r3, #6
 80027a0:	e025      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027a2:	2305      	movs	r3, #5
 80027a4:	e023      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e021      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e01f      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e01d      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e01b      	b.n	80027ee <HAL_GPIO_Init+0x26a>
 80027b6:	bf00      	nop
 80027b8:	58000080 	.word	0x58000080
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58000400 	.word	0x58000400
 80027c4:	58020000 	.word	0x58020000
 80027c8:	58020400 	.word	0x58020400
 80027cc:	58020800 	.word	0x58020800
 80027d0:	58020c00 	.word	0x58020c00
 80027d4:	58021000 	.word	0x58021000
 80027d8:	58021400 	.word	0x58021400
 80027dc:	58021800 	.word	0x58021800
 80027e0:	58021c00 	.word	0x58021c00
 80027e4:	58022000 	.word	0x58022000
 80027e8:	58022400 	.word	0x58022400
 80027ec:	2300      	movs	r3, #0
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027fe:	4938      	ldr	r1, [pc, #224]	; (80028e0 <HAL_GPIO_Init+0x35c>)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	3301      	adds	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f ae63 	bne.w	8002598 <HAL_GPIO_Init+0x14>
  }
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	3724      	adds	r7, #36	; 0x24
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	58000400 	.word	0x58000400

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002928:	887a      	ldrh	r2, [r7, #2]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	041a      	lsls	r2, r3, #16
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43d9      	mvns	r1, r3
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	400b      	ands	r3, r1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	2b06      	cmp	r3, #6
 800295e:	d00a      	beq.n	8002976 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e040      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e03e      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800297e:	491f      	ldr	r1, [pc, #124]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4313      	orrs	r3, r2
 8002984:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002986:	f7fe ff59 	bl	800183c <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800298c:	e009      	b.n	80029a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800298e:	f7fe ff55 	bl	800183c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800299c:	d901      	bls.n	80029a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e028      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	d1ee      	bne.n	800298e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b1e      	cmp	r3, #30
 80029b4:	d008      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b2e      	cmp	r3, #46	; 0x2e
 80029ba:	d005      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b1d      	cmp	r3, #29
 80029c0:	d002      	beq.n	80029c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b2d      	cmp	r3, #45	; 0x2d
 80029c6:	d114      	bne.n	80029f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80029c8:	f7fe ff38 	bl	800183c <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029ce:	e009      	b.n	80029e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029d0:	f7fe ff34 	bl	800183c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029de:	d901      	bls.n	80029e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_PWREx_ConfigSupply+0xb0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d1ee      	bne.n	80029d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024800 	.word	0x58024800

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 bc1f 	b.w	8003252 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80b3 	beq.w	8002b88 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a22:	4b95      	ldr	r3, [pc, #596]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2c:	4b92      	ldr	r3, [pc, #584]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d007      	beq.n	8002a48 <HAL_RCC_OscConfig+0x48>
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	2b18      	cmp	r3, #24
 8002a3c:	d112      	bne.n	8002a64 <HAL_RCC_OscConfig+0x64>
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d10d      	bne.n	8002a64 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8098 	beq.w	8002b86 <HAL_RCC_OscConfig+0x186>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 8093 	bne.w	8002b86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e3f6      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x7c>
 8002a6e:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a81      	ldr	r2, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e058      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d112      	bne.n	8002aaa <HAL_RCC_OscConfig+0xaa>
 8002a84:	4b7c      	ldr	r3, [pc, #496]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a7b      	ldr	r2, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a78      	ldr	r2, [pc, #480]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e041      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab2:	d112      	bne.n	8002ada <HAL_RCC_OscConfig+0xda>
 8002ab4:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6f      	ldr	r2, [pc, #444]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ac6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e029      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_OscConfig+0x10a>
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a60      	ldr	r2, [pc, #384]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e011      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d013      	beq.n	8002b5e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fe81 	bl	800183c <HAL_GetTick>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fe7d 	bl	800183c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e380      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b50:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x13e>
 8002b5c:	e014      	b.n	8002b88 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fe6d 	bl	800183c <HAL_GetTick>
 8002b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b66:	f7fe fe69 	bl	800183c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	; 0x64
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e36c      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x166>
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 808c 	beq.w	8002cae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_RCC_OscConfig+0x1bc>
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	d137      	bne.n	8002c22 <HAL_RCC_OscConfig+0x222>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d132      	bne.n	8002c22 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1d4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e33e      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 0219 	bic.w	r2, r3, #25
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4925      	ldr	r1, [pc, #148]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fe29 	bl	800183c <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fe fe25 	bl	800183c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e328      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	4917      	ldr	r1, [pc, #92]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c20:	e045      	b.n	8002cae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d028      	beq.n	8002c7c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0219 	bic.w	r2, r3, #25
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4910      	ldr	r1, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fdfe 	bl	800183c <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe fdfa 	bl	800183c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e2fd      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	4901      	ldr	r1, [pc, #4]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
 8002c76:	e01a      	b.n	8002cae <HAL_RCC_OscConfig+0x2ae>
 8002c78:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7c:	4b97      	ldr	r3, [pc, #604]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a96      	ldr	r2, [pc, #600]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fdd8 	bl	800183c <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fdd4 	bl	800183c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2d7      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ca2:	4b8e      	ldr	r3, [pc, #568]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d06a      	beq.n	8002d90 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cc4:	4b85      	ldr	r3, [pc, #532]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d007      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2e0>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	d11b      	bne.n	8002d0e <HAL_RCC_OscConfig+0x30e>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d116      	bne.n	8002d0e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e2ac      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cf8:	4b78      	ldr	r3, [pc, #480]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	4975      	ldr	r1, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d0c:	e040      	b.n	8002d90 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d16:	4b71      	ldr	r3, [pc, #452]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a70      	ldr	r2, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fd8b 	bl	800183c <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fd87 	bl	800183c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e28a      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d3c:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d48:	4b64      	ldr	r3, [pc, #400]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	4961      	ldr	r1, [pc, #388]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
 8002d5c:	e018      	b.n	8002d90 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a5e      	ldr	r2, [pc, #376]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fd67 	bl	800183c <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d72:	f7fe fd63 	bl	800183c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e266      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d84:	4b55      	ldr	r3, [pc, #340]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d036      	beq.n	8002e0a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d019      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da4:	4b4d      	ldr	r3, [pc, #308]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	4a4c      	ldr	r2, [pc, #304]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fd44 	bl	800183c <HAL_GetTick>
 8002db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe fd40 	bl	800183c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e243      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dca:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3b8>
 8002dd6:	e018      	b.n	8002e0a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd8:	4b40      	ldr	r3, [pc, #256]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	4a3f      	ldr	r2, [pc, #252]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fd2a 	bl	800183c <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe fd26 	bl	800183c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e229      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d036      	beq.n	8002e84 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d019      	beq.n	8002e52 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fd07 	bl	800183c <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e32:	f7fe fd03 	bl	800183c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e206      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x432>
 8002e50:	e018      	b.n	8002e84 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a21      	ldr	r2, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fced 	bl	800183c <HAL_GetTick>
 8002e62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e66:	f7fe fce9 	bl	800183c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1ec      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80af 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCC_OscConfig+0x4e0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_RCC_OscConfig+0x4e0>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fccd 	bl	800183c <HAL_GetTick>
 8002ea2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea6:	f7fe fcc9 	bl	800183c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b64      	cmp	r3, #100	; 0x64
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e1cc      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_OscConfig+0x4e0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4e4>
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a02      	ldr	r2, [pc, #8]	; (8002edc <HAL_RCC_OscConfig+0x4dc>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	e05b      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	58024800 	.word	0x58024800
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d112      	bne.n	8002f12 <HAL_RCC_OscConfig+0x512>
 8002eec:	4b9d      	ldr	r3, [pc, #628]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a9c      	ldr	r2, [pc, #624]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b9a      	ldr	r3, [pc, #616]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a99      	ldr	r2, [pc, #612]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	4b97      	ldr	r3, [pc, #604]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a96      	ldr	r2, [pc, #600]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f10:	e03f      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d112      	bne.n	8002f40 <HAL_RCC_OscConfig+0x540>
 8002f1a:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a91      	ldr	r2, [pc, #580]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b8f      	ldr	r3, [pc, #572]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	4b8c      	ldr	r3, [pc, #560]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a8b      	ldr	r2, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e028      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b85      	cmp	r3, #133	; 0x85
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x56e>
 8002f48:	4b86      	ldr	r3, [pc, #536]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a85      	ldr	r2, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	4b83      	ldr	r3, [pc, #524]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a82      	ldr	r2, [pc, #520]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	4b80      	ldr	r3, [pc, #512]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a7f      	ldr	r2, [pc, #508]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6c:	e011      	b.n	8002f92 <HAL_RCC_OscConfig+0x592>
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a7c      	ldr	r2, [pc, #496]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	4b7a      	ldr	r3, [pc, #488]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a79      	ldr	r2, [pc, #484]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a76      	ldr	r2, [pc, #472]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d015      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fc4f 	bl	800183c <HAL_GetTick>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe fc4b 	bl	800183c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e14c      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ee      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x5a2>
 8002fc4:	e014      	b.n	8002ff0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fc39 	bl	800183c <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fe fc35 	bl	800183c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e136      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fe4:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ee      	bne.n	8002fce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 812b 	beq.w	8003250 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ffa:	4b5a      	ldr	r3, [pc, #360]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003002:	2b18      	cmp	r3, #24
 8003004:	f000 80bb 	beq.w	800317e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2b02      	cmp	r3, #2
 800300e:	f040 8095 	bne.w	800313c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b54      	ldr	r3, [pc, #336]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a53      	ldr	r2, [pc, #332]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fe fc0d 	bl	800183c <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fc09 	bl	800183c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10c      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003048:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_OscConfig+0x768>)
 800304a:	4013      	ands	r3, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	430a      	orrs	r2, r1
 8003058:	4942      	ldr	r1, [pc, #264]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800305a:	4313      	orrs	r3, r2
 800305c:	628b      	str	r3, [r1, #40]	; 0x28
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	3b01      	subs	r3, #1
 8003064:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	3b01      	subs	r3, #1
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	b29b      	uxth	r3, r3
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	3b01      	subs	r3, #1
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	3b01      	subs	r3, #1
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800308e:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003090:	4313      	orrs	r3, r2
 8003092:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003094:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4a32      	ldr	r2, [pc, #200]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030a0:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a4:	4b31      	ldr	r3, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x76c>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030ac:	00d2      	lsls	r2, r2, #3
 80030ae:	492d      	ldr	r1, [pc, #180]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030b4:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	f023 020c 	bic.w	r2, r3, #12
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4928      	ldr	r1, [pc, #160]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f023 0202 	bic.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4924      	ldr	r1, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fb92 	bl	800183c <HAL_GetTick>
 8003118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fb8e 	bl	800183c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e091      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x71c>
 800313a:	e089      	b.n	8003250 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_RCC_OscConfig+0x764>)
 8003142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe fb78 	bl	800183c <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314e:	e00f      	b.n	8003170 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe fb74 	bl	800183c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d908      	bls.n	8003170 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e077      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
 8003162:	bf00      	nop
 8003164:	58024400 	.word	0x58024400
 8003168:	fffffc0c 	.word	0xfffffc0c
 800316c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003170:	4b3a      	ldr	r3, [pc, #232]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e9      	bne.n	8003150 <HAL_RCC_OscConfig+0x750>
 800317c:	e068      	b.n	8003250 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2b01      	cmp	r3, #1
 8003190:	d031      	beq.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0203 	and.w	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d12a      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d122      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d11a      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d111      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d108      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	0e1b      	lsrs	r3, r3, #24
 80031e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02b      	b.n	8003252 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	08db      	lsrs	r3, r3, #3
 8003200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003204:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	429a      	cmp	r2, r3
 800320e:	d01f      	beq.n	8003250 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800321c:	f7fe fb0e 	bl	800183c <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003222:	bf00      	nop
 8003224:	f7fe fb0a 	bl	800183c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	4293      	cmp	r3, r2
 800322e:	d0f9      	beq.n	8003224 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_RCC_OscConfig+0x860>)
 8003236:	4013      	ands	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800323c:	00d2      	lsls	r2, r2, #3
 800323e:	4907      	ldr	r1, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCC_OscConfig+0x85c>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	58024400 	.word	0x58024400
 8003260:	ffff0007 	.word	0xffff0007

08003264 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e19c      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b8a      	ldr	r3, [pc, #552]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d910      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b87      	ldr	r3, [pc, #540]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 020f 	bic.w	r2, r3, #15
 800328e:	4985      	ldr	r1, [pc, #532]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b83      	ldr	r3, [pc, #524]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e184      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	4b7b      	ldr	r3, [pc, #492]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d908      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032c4:	4b78      	ldr	r3, [pc, #480]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	4975      	ldr	r1, [pc, #468]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	4b70      	ldr	r3, [pc, #448]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d908      	bls.n	8003304 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	496a      	ldr	r1, [pc, #424]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003300:	4313      	orrs	r3, r2
 8003302:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	4b64      	ldr	r3, [pc, #400]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800331c:	429a      	cmp	r2, r3
 800331e:	d908      	bls.n	8003332 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	495e      	ldr	r1, [pc, #376]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 800332e:	4313      	orrs	r3, r2
 8003330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d010      	beq.n	8003360 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800334a:	429a      	cmp	r2, r3
 800334c:	d908      	bls.n	8003360 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800334e:	4b56      	ldr	r3, [pc, #344]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4953      	ldr	r1, [pc, #332]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 800335c:	4313      	orrs	r3, r2
 800335e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d010      	beq.n	800338e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	429a      	cmp	r2, r3
 800337a:	d908      	bls.n	800338e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f023 020f 	bic.w	r2, r3, #15
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4947      	ldr	r1, [pc, #284]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 800338a:	4313      	orrs	r3, r2
 800338c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d055      	beq.n	8003446 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800339a:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4940      	ldr	r1, [pc, #256]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d107      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b4:	4b3c      	ldr	r3, [pc, #240]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d121      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0f6      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d115      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0ea      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033e4:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0de      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f4:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0d6      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f023 0207 	bic.w	r2, r3, #7
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4925      	ldr	r1, [pc, #148]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003412:	4313      	orrs	r3, r2
 8003414:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003416:	f7fe fa11 	bl	800183c <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341c:	e00a      	b.n	8003434 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341e:	f7fe fa0d 	bl	800183c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0be      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003434:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	429a      	cmp	r2, r3
 8003444:	d1eb      	bne.n	800341e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d010      	beq.n	8003474 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	429a      	cmp	r2, r3
 8003460:	d208      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f023 020f 	bic.w	r2, r3, #15
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	490e      	ldr	r1, [pc, #56]	; (80034a8 <HAL_RCC_ClockConfig+0x244>)
 8003470:	4313      	orrs	r3, r2
 8003472:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d214      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 020f 	bic.w	r2, r3, #15
 800348a:	4906      	ldr	r1, [pc, #24]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <HAL_RCC_ClockConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e086      	b.n	80035b2 <HAL_RCC_ClockConfig+0x34e>
 80034a4:	52002000 	.word	0x52002000
 80034a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d010      	beq.n	80034da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d208      	bcs.n	80034da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	4939      	ldr	r1, [pc, #228]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d208      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	492e      	ldr	r1, [pc, #184]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 8003504:	4313      	orrs	r3, r2
 8003506:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003520:	429a      	cmp	r2, r3
 8003522:	d208      	bcs.n	8003536 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4922      	ldr	r1, [pc, #136]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 8003532:	4313      	orrs	r3, r2
 8003534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800354e:	429a      	cmp	r2, r3
 8003550:	d208      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4917      	ldr	r1, [pc, #92]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 8003560:	4313      	orrs	r3, r2
 8003562:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003564:	f000 f834 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	4912      	ldr	r1, [pc, #72]	; (80035c0 <HAL_RCC_ClockConfig+0x35c>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
 8003580:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_RCC_ClockConfig+0x358>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <HAL_RCC_ClockConfig+0x35c>)
 800358c:	5cd3      	ldrb	r3, [r2, r3]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x360>)
 800359a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800359c:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x364>)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_RCC_ClockConfig+0x368>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe f8fe 	bl	80017a8 <HAL_InitTick>
 80035ac:	4603      	mov	r3, r0
 80035ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
 80035c0:	08009a80 	.word	0x08009a80
 80035c4:	24000014 	.word	0x24000014
 80035c8:	24000010 	.word	0x24000010
 80035cc:	24000018 	.word	0x24000018

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d6:	4bb3      	ldr	r3, [pc, #716]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035de:	2b18      	cmp	r3, #24
 80035e0:	f200 8155 	bhi.w	800388e <HAL_RCC_GetSysClockFreq+0x2be>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003651 	.word	0x08003651
 80035f0:	0800388f 	.word	0x0800388f
 80035f4:	0800388f 	.word	0x0800388f
 80035f8:	0800388f 	.word	0x0800388f
 80035fc:	0800388f 	.word	0x0800388f
 8003600:	0800388f 	.word	0x0800388f
 8003604:	0800388f 	.word	0x0800388f
 8003608:	0800388f 	.word	0x0800388f
 800360c:	08003677 	.word	0x08003677
 8003610:	0800388f 	.word	0x0800388f
 8003614:	0800388f 	.word	0x0800388f
 8003618:	0800388f 	.word	0x0800388f
 800361c:	0800388f 	.word	0x0800388f
 8003620:	0800388f 	.word	0x0800388f
 8003624:	0800388f 	.word	0x0800388f
 8003628:	0800388f 	.word	0x0800388f
 800362c:	0800367d 	.word	0x0800367d
 8003630:	0800388f 	.word	0x0800388f
 8003634:	0800388f 	.word	0x0800388f
 8003638:	0800388f 	.word	0x0800388f
 800363c:	0800388f 	.word	0x0800388f
 8003640:	0800388f 	.word	0x0800388f
 8003644:	0800388f 	.word	0x0800388f
 8003648:	0800388f 	.word	0x0800388f
 800364c:	08003683 	.word	0x08003683
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003650:	4b94      	ldr	r3, [pc, #592]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800365c:	4b91      	ldr	r3, [pc, #580]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	4a90      	ldr	r2, [pc, #576]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800366e:	e111      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003670:	4b8d      	ldr	r3, [pc, #564]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003672:	61bb      	str	r3, [r7, #24]
      break;
 8003674:	e10e      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003676:	4b8d      	ldr	r3, [pc, #564]	; (80038ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003678:	61bb      	str	r3, [r7, #24]
      break;
 800367a:	e10b      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800367c:	4b8c      	ldr	r3, [pc, #560]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800367e:	61bb      	str	r3, [r7, #24]
      break;
 8003680:	e108      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800368c:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003696:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003698:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036a2:	4b80      	ldr	r3, [pc, #512]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	08db      	lsrs	r3, r3, #3
 80036a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80e1 	beq.w	8003888 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	f000 8083 	beq.w	80037d4 <HAL_RCC_GetSysClockFreq+0x204>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f200 80a1 	bhi.w	8003818 <HAL_RCC_GetSysClockFreq+0x248>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x114>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d056      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036e2:	e099      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036e4:	4b6f      	ldr	r3, [pc, #444]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02d      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036f0:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371a:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	ed97 6a02 	vldr	s12, [r7, #8]
 800372e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800374a:	e087      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003756:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800375a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375e:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003772:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800378e:	e065      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800379e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a2:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037d2:	e043      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e6:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003816:	e021      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a02 	vldr	s12, [r7, #8]
 800383e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800385a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	0a5b      	lsrs	r3, r3, #9
 8003862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003866:	3301      	adds	r3, #1
 8003868:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003874:	edd7 6a07 	vldr	s13, [r7, #28]
 8003878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800387c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003880:	ee17 3a90 	vmov	r3, s15
 8003884:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003886:	e005      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]
      break;
 800388c:	e002      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003890:	61bb      	str	r3, [r7, #24]
      break;
 8003892:	bf00      	nop
  }

  return sysclockfreq;
 8003894:	69bb      	ldr	r3, [r7, #24]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	58024400 	.word	0x58024400
 80038a8:	03d09000 	.word	0x03d09000
 80038ac:	003d0900 	.word	0x003d0900
 80038b0:	007a1200 	.word	0x007a1200
 80038b4:	46000000 	.word	0x46000000
 80038b8:	4c742400 	.word	0x4c742400
 80038bc:	4a742400 	.word	0x4a742400
 80038c0:	4af42400 	.word	0x4af42400

080038c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80038ca:	f7ff fe81 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_RCC_GetHCLKFreq+0x50>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	490f      	ldr	r1, [pc, #60]	; (8003918 <HAL_RCC_GetHCLKFreq+0x54>)
 80038dc:	5ccb      	ldrb	r3, [r1, r3]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_RCC_GetHCLKFreq+0x50>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	4a09      	ldr	r2, [pc, #36]	; (8003918 <HAL_RCC_GetHCLKFreq+0x54>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	fa22 f303 	lsr.w	r3, r2, r3
 80038fe:	4a07      	ldr	r2, [pc, #28]	; (800391c <HAL_RCC_GetHCLKFreq+0x58>)
 8003900:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <HAL_RCC_GetHCLKFreq+0x58>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	58024400 	.word	0x58024400
 8003918:	08009a80 	.word	0x08009a80
 800391c:	24000014 	.word	0x24000014
 8003920:	24000010 	.word	0x24000010

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003928:	f7ff ffcc 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4904      	ldr	r1, [pc, #16]	; (800394c <HAL_RCC_GetPCLK1Freq+0x28>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	58024400 	.word	0x58024400
 800394c:	08009a80 	.word	0x08009a80

08003950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003954:	f7ff ffb6 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4904      	ldr	r1, [pc, #16]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	58024400 	.word	0x58024400
 8003978:	08009a80 	.word	0x08009a80

0800397c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b0c8      	sub	sp, #288	; 0x120
 8003982:	af00      	add	r7, sp, #0
 8003984:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003988:	2300      	movs	r3, #0
 800398a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800398e:	2300      	movs	r3, #0
 8003990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80039a0:	2500      	movs	r5, #0
 80039a2:	ea54 0305 	orrs.w	r3, r4, r5
 80039a6:	d049      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039b2:	d02f      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80039b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039b8:	d828      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039be:	d01a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c4:	d822      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ce:	d007      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039d0:	e01c      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d2:	4ba7      	ldr	r3, [pc, #668]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	4aa6      	ldr	r2, [pc, #664]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039de:	e01a      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e4:	3308      	adds	r3, #8
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 fc43 	bl	8005274 <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039f4:	e00f      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fa:	3328      	adds	r3, #40	; 0x28
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 fcea 	bl	80053d8 <RCCEx_PLL3_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a0a:	e004      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a12:	e000      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a1e:	4b94      	ldr	r3, [pc, #592]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2c:	4a90      	ldr	r2, [pc, #576]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6513      	str	r3, [r2, #80]	; 0x50
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a48:	f04f 0900 	mov.w	r9, #0
 8003a4c:	ea58 0309 	orrs.w	r3, r8, r9
 8003a50:	d047      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d82a      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a79 	.word	0x08003a79
 8003a68:	08003a87 	.word	0x08003a87
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003abb 	.word	0x08003abb
 8003a74:	08003abb 	.word	0x08003abb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a78:	4b7d      	ldr	r3, [pc, #500]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4a7c      	ldr	r2, [pc, #496]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a84:	e01a      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fbf0 	bl	8005274 <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e00f      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa0:	3328      	adds	r3, #40	; 0x28
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fc97 	bl	80053d8 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e004      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003abc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	f023 0107 	bic.w	r1, r3, #7
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	4a67      	ldr	r2, [pc, #412]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ad8:	e003      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ade:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003aee:	f04f 0b00 	mov.w	fp, #0
 8003af2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003af6:	d054      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b02:	d036      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003b04:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b08:	d82f      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d032      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d829      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b16:	2bc0      	cmp	r3, #192	; 0xc0
 8003b18:	d02f      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b1c:	d825      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b1e:	2b80      	cmp	r3, #128	; 0x80
 8003b20:	d018      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d821      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d007      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003b2e:	e01c      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b30:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b3c:	e01e      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b42:	3308      	adds	r3, #8
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fb94 	bl	8005274 <RCCEx_PLL2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b52:	e013      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b58:	3328      	adds	r3, #40	; 0x28
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 fc3b 	bl	80053d8 <RCCEx_PLL3_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b68:	e008      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b70:	e004      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003b72:	bf00      	nop
 8003b74:	e002      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003b84:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b88:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	4a37      	ldr	r2, [pc, #220]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6513      	str	r3, [r2, #80]	; 0x50
 8003b98:	e003      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003bae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	d05c      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003bcc:	d03b      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003bd2:	d834      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd8:	d037      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bde:	d82e      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003be0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003be4:	d033      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003be6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bea:	d828      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf0:	d01a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d822      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d007      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c02:	e01c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c10:	e01e      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c16:	3308      	adds	r3, #8
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 fb2a 	bl	8005274 <RCCEx_PLL2_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c26:	e013      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2c:	3328      	adds	r3, #40	; 0x28
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fbd1 	bl	80053d8 <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c3c:	e008      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c44:	e004      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	4a02      	ldr	r2, [pc, #8]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6513      	str	r3, [r2, #80]	; 0x50
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003c96:	460b      	mov	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	d03a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	2b30      	cmp	r3, #48	; 0x30
 8003ca4:	d01f      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003ca6:	2b30      	cmp	r3, #48	; 0x30
 8003ca8:	d819      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d815      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d019      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d111      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cba:	4bae      	ldr	r3, [pc, #696]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	4aad      	ldr	r2, [pc, #692]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003cc6:	e011      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ccc:	3308      	adds	r3, #8
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 facf 	bl	8005274 <RCCEx_PLL2_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ce4:	e002      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003cf4:	4b9f      	ldr	r3, [pc, #636]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	4a9c      	ldr	r2, [pc, #624]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d04:	430b      	orrs	r3, r1
 8003d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	d051      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d3c:	d035      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d42:	d82e      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d48:	d031      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d4e:	d828      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d54:	d01a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	d822      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	d007      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003d66:	e01c      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d68:	4b82      	ldr	r3, [pc, #520]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a81      	ldr	r2, [pc, #516]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d74:	e01c      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 fa78 	bl	8005274 <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d8a:	e011      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d90:	3328      	adds	r3, #40	; 0x28
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 fb1f 	bl	80053d8 <RCCEx_PLL3_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003db8:	4b6e      	ldr	r3, [pc, #440]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc6:	4a6b      	ldr	r2, [pc, #428]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6513      	str	r3, [r2, #80]	; 0x50
 8003dcc:	e003      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003dec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003df0:	460b      	mov	r3, r1
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d053      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e00:	d033      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e06:	d82c      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e0c:	d02f      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003e0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e12:	d826      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e18:	d02b      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e1e:	d820      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e24:	d012      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e2a:	d81a      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d022      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d115      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fa18 	bl	8005274 <RCCEx_PLL2_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e4a:	e015      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e50:	3328      	adds	r3, #40	; 0x28
 8003e52:	2101      	movs	r1, #1
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fabf 	bl	80053d8 <RCCEx_PLL3_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e60:	e00a      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e6a:	bf00      	nop
 8003e6c:	e004      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e6e:	bf00      	nop
 8003e70:	e002      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e72:	bf00      	nop
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e80:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e8e:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6513      	str	r3, [r2, #80]	; 0x50
 8003e94:	e003      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003eaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eb4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d060      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003eca:	d039      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003ecc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ed0:	d832      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed6:	d035      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003edc:	d82c      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d031      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d826      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eee:	d02d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ef4:	d820      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efa:	d012      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f00:	d81a      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d024      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0a:	d115      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f10:	3308      	adds	r3, #8
 8003f12:	2101      	movs	r1, #1
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 f9ad 	bl	8005274 <RCCEx_PLL2_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f20:	e017      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f26:	3328      	adds	r3, #40	; 0x28
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 fa54 	bl	80053d8 <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f36:	e00c      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f3e:	e008      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f40:	bf00      	nop
 8003f42:	e006      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f44:	bf00      	nop
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e002      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f4c:	bf00      	nop
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10e      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f6a:	4a02      	ldr	r2, [pc, #8]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f70:	e006      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d037      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003faa:	d00e      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb0:	d816      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d018      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fba:	d111      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbc:	4bc4      	ldr	r3, [pc, #784]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	4ac3      	ldr	r2, [pc, #780]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fce:	3308      	adds	r3, #8
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f94e 	bl	8005274 <RCCEx_PLL2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ff2:	4bb7      	ldr	r3, [pc, #732]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004000:	4ab3      	ldr	r2, [pc, #716]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6513      	str	r3, [r2, #80]	; 0x50
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800400c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800401c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004026:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d039      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004036:	2b03      	cmp	r3, #3
 8004038:	d81c      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	0800407d 	.word	0x0800407d
 8004044:	08004051 	.word	0x08004051
 8004048:	0800405f 	.word	0x0800405f
 800404c:	0800407d 	.word	0x0800407d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b9f      	ldr	r3, [pc, #636]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	4a9e      	ldr	r2, [pc, #632]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800405c:	e00f      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	3308      	adds	r3, #8
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f904 	bl	8005274 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004086:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	f023 0103 	bic.w	r1, r3, #3
 800408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004094:	4a8e      	ldr	r2, [pc, #568]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004096:	430b      	orrs	r3, r1
 8004098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80040b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f000 8099 	beq.w	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c6:	4b83      	ldr	r3, [pc, #524]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a82      	ldr	r2, [pc, #520]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040d2:	f7fd fbb3 	bl	800183c <HAL_GetTick>
 80040d6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040da:	e00b      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fd fbae 	bl	800183c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b64      	cmp	r3, #100	; 0x64
 80040ea:	d903      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040f2:	e005      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040f4:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ed      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004100:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004104:	2b00      	cmp	r3, #0
 8004106:	d173      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004108:	4b71      	ldr	r3, [pc, #452]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800410a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800410c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004114:	4053      	eors	r3, r2
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d015      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800411e:	4b6c      	ldr	r3, [pc, #432]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004126:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800412a:	4b69      	ldr	r3, [pc, #420]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a68      	ldr	r2, [pc, #416]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004136:	4b66      	ldr	r3, [pc, #408]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800413c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004140:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004142:	4a63      	ldr	r2, [pc, #396]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004148:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004156:	d118      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fb70 	bl	800183c <HAL_GetTick>
 800415c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004160:	e00d      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd fb6b 	bl	800183c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800416c:	1ad2      	subs	r2, r2, r3
 800416e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004172:	429a      	cmp	r2, r3
 8004174:	d903      	bls.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800417c:	e005      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800417e:	4b54      	ldr	r3, [pc, #336]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0eb      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800418a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800418e:	2b00      	cmp	r3, #0
 8004190:	d129      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a2:	d10e      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80041a4:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80041ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041b4:	091a      	lsrs	r2, r3, #4
 80041b6:	4b48      	ldr	r3, [pc, #288]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	4a45      	ldr	r2, [pc, #276]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	6113      	str	r3, [r2, #16]
 80041c0:	e005      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80041c2:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4a42      	ldr	r2, [pc, #264]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041cc:	6113      	str	r3, [r2, #16]
 80041ce:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6713      	str	r3, [r2, #112]	; 0x70
 80041e4:	e008      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80041ee:	e003      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f002 0301 	and.w	r3, r2, #1
 8004204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800420e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	f000 8090 	beq.w	800433a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800421a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004222:	2b28      	cmp	r3, #40	; 0x28
 8004224:	d870      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004311 	.word	0x08004311
 8004230:	08004309 	.word	0x08004309
 8004234:	08004309 	.word	0x08004309
 8004238:	08004309 	.word	0x08004309
 800423c:	08004309 	.word	0x08004309
 8004240:	08004309 	.word	0x08004309
 8004244:	08004309 	.word	0x08004309
 8004248:	08004309 	.word	0x08004309
 800424c:	080042dd 	.word	0x080042dd
 8004250:	08004309 	.word	0x08004309
 8004254:	08004309 	.word	0x08004309
 8004258:	08004309 	.word	0x08004309
 800425c:	08004309 	.word	0x08004309
 8004260:	08004309 	.word	0x08004309
 8004264:	08004309 	.word	0x08004309
 8004268:	08004309 	.word	0x08004309
 800426c:	080042f3 	.word	0x080042f3
 8004270:	08004309 	.word	0x08004309
 8004274:	08004309 	.word	0x08004309
 8004278:	08004309 	.word	0x08004309
 800427c:	08004309 	.word	0x08004309
 8004280:	08004309 	.word	0x08004309
 8004284:	08004309 	.word	0x08004309
 8004288:	08004309 	.word	0x08004309
 800428c:	08004311 	.word	0x08004311
 8004290:	08004309 	.word	0x08004309
 8004294:	08004309 	.word	0x08004309
 8004298:	08004309 	.word	0x08004309
 800429c:	08004309 	.word	0x08004309
 80042a0:	08004309 	.word	0x08004309
 80042a4:	08004309 	.word	0x08004309
 80042a8:	08004309 	.word	0x08004309
 80042ac:	08004311 	.word	0x08004311
 80042b0:	08004309 	.word	0x08004309
 80042b4:	08004309 	.word	0x08004309
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004309 	.word	0x08004309
 80042c0:	08004309 	.word	0x08004309
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004309 	.word	0x08004309
 80042cc:	08004311 	.word	0x08004311
 80042d0:	58024400 	.word	0x58024400
 80042d4:	58024800 	.word	0x58024800
 80042d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e0:	3308      	adds	r3, #8
 80042e2:	2101      	movs	r1, #1
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 ffc5 	bl	8005274 <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042f0:	e00f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f6:	3328      	adds	r3, #40	; 0x28
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 f86c 	bl	80053d8 <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004312:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800431a:	4bc0      	ldr	r3, [pc, #768]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	4abc      	ldr	r2, [pc, #752]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6553      	str	r3, [r2, #84]	; 0x54
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004336:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800433a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f002 0302 	and.w	r3, r2, #2
 8004346:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004350:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004354:	460b      	mov	r3, r1
 8004356:	4313      	orrs	r3, r2
 8004358:	d043      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800435a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	2b05      	cmp	r3, #5
 8004364:	d824      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	080043b9 	.word	0x080043b9
 8004370:	08004385 	.word	0x08004385
 8004374:	0800439b 	.word	0x0800439b
 8004378:	080043b9 	.word	0x080043b9
 800437c:	080043b9 	.word	0x080043b9
 8004380:	080043b9 	.word	0x080043b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004388:	3308      	adds	r3, #8
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 ff71 	bl	8005274 <RCCEx_PLL2_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800439a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439e:	3328      	adds	r3, #40	; 0x28
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f818 	bl	80053d8 <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043c2:	4b96      	ldr	r3, [pc, #600]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f023 0107 	bic.w	r1, r3, #7
 80043ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d2:	4a92      	ldr	r2, [pc, #584]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6553      	str	r3, [r2, #84]	; 0x54
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f002 0304 	and.w	r3, r2, #4
 80043ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d043      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800440a:	2b05      	cmp	r3, #5
 800440c:	d824      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004461 	.word	0x08004461
 8004418:	0800442d 	.word	0x0800442d
 800441c:	08004443 	.word	0x08004443
 8004420:	08004461 	.word	0x08004461
 8004424:	08004461 	.word	0x08004461
 8004428:	08004461 	.word	0x08004461
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800442c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004430:	3308      	adds	r3, #8
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f000 ff1d 	bl	8005274 <RCCEx_PLL2_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004440:	e00f      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004446:	3328      	adds	r3, #40	; 0x28
 8004448:	2101      	movs	r1, #1
 800444a:	4618      	mov	r0, r3
 800444c:	f000 ffc4 	bl	80053d8 <RCCEx_PLL3_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004456:	e004      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004462:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10b      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800446a:	4b6c      	ldr	r3, [pc, #432]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f023 0107 	bic.w	r1, r3, #7
 8004472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800447a:	4a68      	ldr	r2, [pc, #416]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800447c:	430b      	orrs	r3, r1
 800447e:	6593      	str	r3, [r2, #88]	; 0x58
 8004480:	e003      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004482:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004486:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800448a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f002 0320 	and.w	r3, r2, #32
 8004496:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044a4:	460b      	mov	r3, r1
 80044a6:	4313      	orrs	r3, r2
 80044a8:	d055      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b6:	d033      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80044b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044bc:	d82c      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d02f      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d826      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044ce:	d02b      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80044d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044d4:	d820      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044da:	d012      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80044dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e0:	d81a      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d022      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80044e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ea:	d115      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f0:	3308      	adds	r3, #8
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 febd 	bl	8005274 <RCCEx_PLL2_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004500:	e015      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004506:	3328      	adds	r3, #40	; 0x28
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ff64 	bl	80053d8 <RCCEx_PLL3_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004516:	e00a      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800451e:	e006      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004520:	bf00      	nop
 8004522:	e004      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004524:	bf00      	nop
 8004526:	e002      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004528:	bf00      	nop
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800452c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800453e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004546:	4a35      	ldr	r2, [pc, #212]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004548:	430b      	orrs	r3, r1
 800454a:	6553      	str	r3, [r2, #84]	; 0x54
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004552:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800456c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d058      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800457e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004582:	d033      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004584:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004588:	d82c      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	d02f      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d826      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800459a:	d02b      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800459c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045a0:	d820      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d012      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80045a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ac:	d81a      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d022      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b6:	d115      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045bc:	3308      	adds	r3, #8
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fe57 	bl	8005274 <RCCEx_PLL2_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045cc:	e015      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d2:	3328      	adds	r3, #40	; 0x28
 80045d4:	2102      	movs	r1, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fefe 	bl	80053d8 <RCCEx_PLL3_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045e2:	e00a      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045ea:	e006      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045ec:	bf00      	nop
 80045ee:	e004      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045f0:	bf00      	nop
 80045f2:	e002      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10e      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800460a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004612:	4a02      	ldr	r2, [pc, #8]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004614:	430b      	orrs	r3, r1
 8004616:	6593      	str	r3, [r2, #88]	; 0x58
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004624:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800463e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004642:	460b      	mov	r3, r1
 8004644:	4313      	orrs	r3, r2
 8004646:	d055      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004650:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004654:	d033      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004656:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800465a:	d82c      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004660:	d02f      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004666:	d826      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004668:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800466c:	d02b      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800466e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004672:	d820      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004678:	d012      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800467a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467e:	d81a      	bhi.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d022      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d115      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800468a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468e:	3308      	adds	r3, #8
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fdee 	bl	8005274 <RCCEx_PLL2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800469e:	e015      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a4:	3328      	adds	r3, #40	; 0x28
 80046a6:	2102      	movs	r1, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fe95 	bl	80053d8 <RCCEx_PLL3_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046b4:	e00a      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046bc:	e006      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046be:	bf00      	nop
 80046c0:	e004      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046c2:	bf00      	nop
 80046c4:	e002      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046d4:	4ba1      	ldr	r3, [pc, #644]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80046dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046e4:	4a9d      	ldr	r2, [pc, #628]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6593      	str	r3, [r2, #88]	; 0x58
 80046ea:	e003      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f002 0308 	and.w	r3, r2, #8
 8004700:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004704:	2300      	movs	r3, #0
 8004706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800470a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800470e:	460b      	mov	r3, r1
 8004710:	4313      	orrs	r3, r2
 8004712:	d01e      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	d10c      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004726:	3328      	adds	r3, #40	; 0x28
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fe54 	bl	80053d8 <RCCEx_PLL3_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800473c:	4b87      	ldr	r3, [pc, #540]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474c:	4a83      	ldr	r2, [pc, #524]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800474e:	430b      	orrs	r3, r1
 8004750:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f002 0310 	and.w	r3, r2, #16
 800475e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004768:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800476c:	460b      	mov	r3, r1
 800476e:	4313      	orrs	r3, r2
 8004770:	d01e      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d10c      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004784:	3328      	adds	r3, #40	; 0x28
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fe25 	bl	80053d8 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800479a:	4b70      	ldr	r3, [pc, #448]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047aa:	4a6c      	ldr	r2, [pc, #432]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80047bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c0:	2300      	movs	r3, #0
 80047c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d03e      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047dc:	d022      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80047de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047e2:	d81b      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d00b      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80047ee:	e015      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f4:	3308      	adds	r3, #8
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fd3b 	bl	8005274 <RCCEx_PLL2_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004804:	e00f      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480a:	3328      	adds	r3, #40	; 0x28
 800480c:	2102      	movs	r1, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fde2 	bl	80053d8 <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004826:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800482e:	4b4b      	ldr	r3, [pc, #300]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800483e:	4a47      	ldr	r2, [pc, #284]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6593      	str	r3, [r2, #88]	; 0x58
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004846:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800484a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800484e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800485a:	67bb      	str	r3, [r7, #120]	; 0x78
 800485c:	2300      	movs	r3, #0
 800485e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004860:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d03b      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800486a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004876:	d01f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004878:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800487c:	d818      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800487e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004888:	d007      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800488a:	e011      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488c:	4b33      	ldr	r3, [pc, #204]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a32      	ldr	r2, [pc, #200]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004898:	e00f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489e:	3328      	adds	r3, #40	; 0x28
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fd98 	bl	80053d8 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80048ae:	e004      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048b6:	e000      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80048b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c2:	4b26      	ldr	r3, [pc, #152]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	4a22      	ldr	r2, [pc, #136]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6553      	str	r3, [r2, #84]	; 0x54
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80048ee:	673b      	str	r3, [r7, #112]	; 0x70
 80048f0:	2300      	movs	r3, #0
 80048f2:	677b      	str	r3, [r7, #116]	; 0x74
 80048f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d034      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d007      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800490e:	e011      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	4a11      	ldr	r2, [pc, #68]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800491c:	e00e      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800491e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004922:	3308      	adds	r3, #8
 8004924:	2102      	movs	r1, #2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fca4 	bl	8005274 <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004932:	e003      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800493a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10d      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800494c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	4a02      	ldr	r2, [pc, #8]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004954:	430b      	orrs	r3, r1
 8004956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800495a:	bf00      	nop
 800495c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004964:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004974:	66bb      	str	r3, [r7, #104]	; 0x68
 8004976:	2300      	movs	r3, #0
 8004978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800497a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d00c      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	3328      	adds	r3, #40	; 0x28
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fd23 	bl	80053d8 <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80049aa:	663b      	str	r3, [r7, #96]	; 0x60
 80049ac:	2300      	movs	r3, #0
 80049ae:	667b      	str	r3, [r7, #100]	; 0x64
 80049b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80049b4:	460b      	mov	r3, r1
 80049b6:	4313      	orrs	r3, r2
 80049b8:	d038      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c6:	d018      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80049c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049cc:	d811      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d2:	d014      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d80b      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d011      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80049de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e2:	d106      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e4:	4bc3      	ldr	r3, [pc, #780]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4ac2      	ldr	r2, [pc, #776]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049f0:	e008      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049f8:	e004      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a0c:	4bb9      	ldr	r3, [pc, #740]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	4ab5      	ldr	r2, [pc, #724]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	6553      	str	r3, [r2, #84]	; 0x54
 8004a22:	e003      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	d009      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a48:	4baa      	ldr	r3, [pc, #680]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a56:	4aa7      	ldr	r2, [pc, #668]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004a68:	653b      	str	r3, [r7, #80]	; 0x50
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004a72:	460b      	mov	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a78:	4b9e      	ldr	r3, [pc, #632]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a9b      	ldr	r2, [pc, #620]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	d009      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004aa8:	4b92      	ldr	r3, [pc, #584]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aac:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab6:	4a8f      	ldr	r2, [pc, #572]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	2300      	movs	r3, #0
 8004acc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ace:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ad8:	4b86      	ldr	r3, [pc, #536]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	4a85      	ldr	r2, [pc, #532]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ade:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ae2:	6113      	str	r3, [r2, #16]
 8004ae4:	4b83      	ldr	r3, [pc, #524]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ae6:	6919      	ldr	r1, [r3, #16]
 8004ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004af0:	4a80      	ldr	r2, [pc, #512]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b04:	2300      	movs	r3, #0
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b12:	4b78      	ldr	r3, [pc, #480]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	4a74      	ldr	r2, [pc, #464]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b22:	430b      	orrs	r3, r1
 8004b24:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
 8004b34:	2300      	movs	r3, #0
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
 8004b38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b42:	4b6c      	ldr	r3, [pc, #432]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b52:	4a68      	ldr	r2, [pc, #416]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	2100      	movs	r1, #0
 8004b62:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	d011      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b78:	3308      	adds	r3, #8
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fb79 	bl	8005274 <RCCEx_PLL2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004b88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6239      	str	r1, [r7, #32]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d011      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb8:	3308      	adds	r3, #8
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fb59 	bl	8005274 <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	2100      	movs	r1, #0
 8004be2:	61b9      	str	r1, [r7, #24]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	d011      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fb39 	bl	8005274 <RCCEx_PLL2_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	2100      	movs	r1, #0
 8004c22:	6139      	str	r1, [r7, #16]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d011      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c38:	3328      	adds	r3, #40	; 0x28
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fbcb 	bl	80053d8 <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004c48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	2100      	movs	r1, #0
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4313      	orrs	r3, r2
 8004c72:	d011      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c78:	3328      	adds	r3, #40	; 0x28
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fbab 	bl	80053d8 <RCCEx_PLL3_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6039      	str	r1, [r7, #0]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	d011      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb8:	3328      	adds	r3, #40	; 0x28
 8004cba:	2102      	movs	r1, #2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fb8b 	bl	80053d8 <RCCEx_PLL3_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004cd8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004cec:	46bd      	mov	sp, r7
 8004cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400

08004cf8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004cfc:	f7fe fde2 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	091b      	lsrs	r3, r3, #4
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	4904      	ldr	r1, [pc, #16]	; (8004d20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d0e:	5ccb      	ldrb	r3, [r1, r3]
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	08009a80 	.word	0x08009a80

08004d24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b089      	sub	sp, #36	; 0x24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d2c:	4ba1      	ldr	r3, [pc, #644]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d36:	4b9f      	ldr	r3, [pc, #636]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	0b1b      	lsrs	r3, r3, #12
 8004d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d42:	4b9c      	ldr	r3, [pc, #624]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d4e:	4b99      	ldr	r3, [pc, #612]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	08db      	lsrs	r3, r3, #3
 8004d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8111 	beq.w	8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	f000 8083 	beq.w	8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	f200 80a1 	bhi.w	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d056      	beq.n	8004e3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d8e:	e099      	b.n	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d90:	4b88      	ldr	r3, [pc, #544]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02d      	beq.n	8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d9c:	4b85      	ldr	r3, [pc, #532]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	4a84      	ldr	r2, [pc, #528]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b7b      	ldr	r3, [pc, #492]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004df6:	e087      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3a:	e065      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b59      	ldr	r3, [pc, #356]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7e:	e043      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b48      	ldr	r3, [pc, #288]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ec2:	e021      	b.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	0a5b      	lsrs	r3, r3, #9
 8004f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2e:	ee17 2a90 	vmov	r2, s15
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f36:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5c:	ee17 2a90 	vmov	r2, s15
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f64:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	0e1b      	lsrs	r3, r3, #24
 8004f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8a:	ee17 2a90 	vmov	r2, s15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f92:	e008      	b.n	8004fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	609a      	str	r2, [r3, #8]
}
 8004fa6:	bf00      	nop
 8004fa8:	3724      	adds	r7, #36	; 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	03d09000 	.word	0x03d09000
 8004fbc:	46000000 	.word	0x46000000
 8004fc0:	4c742400 	.word	0x4c742400
 8004fc4:	4a742400 	.word	0x4a742400
 8004fc8:	4af42400 	.word	0x4af42400

08004fcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fd4:	4ba1      	ldr	r3, [pc, #644]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fde:	4b9f      	ldr	r3, [pc, #636]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	0d1b      	lsrs	r3, r3, #20
 8004fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fea:	4b9c      	ldr	r3, [pc, #624]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ff6:	4b99      	ldr	r3, [pc, #612]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8111 	beq.w	800523c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b02      	cmp	r3, #2
 800501e:	f000 8083 	beq.w	8005128 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b02      	cmp	r3, #2
 8005026:	f200 80a1 	bhi.w	800516c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d056      	beq.n	80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005036:	e099      	b.n	800516c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005038:	4b88      	ldr	r3, [pc, #544]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d02d      	beq.n	80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005044:	4b85      	ldr	r3, [pc, #532]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	08db      	lsrs	r3, r3, #3
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	4a84      	ldr	r2, [pc, #528]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506e:	4b7b      	ldr	r3, [pc, #492]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005082:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800509e:	e087      	b.n	80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b2:	4b6a      	ldr	r3, [pc, #424]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050e2:	e065      	b.n	80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800526c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005106:	ed97 6a03 	vldr	s12, [r7, #12]
 800510a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800510e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005126:	e043      	b.n	80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b48      	ldr	r3, [pc, #288]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a03 	vldr	s12, [r7, #12]
 800514e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800516a:	e021      	b.n	80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800526c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005192:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	0a5b      	lsrs	r3, r3, #9
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d6:	ee17 2a90 	vmov	r2, s15
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005204:	ee17 2a90 	vmov	r2, s15
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	0e1b      	lsrs	r3, r3, #24
 8005212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005226:	edd7 6a07 	vldr	s13, [r7, #28]
 800522a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005232:	ee17 2a90 	vmov	r2, s15
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800523a:	e008      	b.n	800524e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	609a      	str	r2, [r3, #8]
}
 800524e:	bf00      	nop
 8005250:	3724      	adds	r7, #36	; 0x24
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	58024400 	.word	0x58024400
 8005260:	03d09000 	.word	0x03d09000
 8005264:	46000000 	.word	0x46000000
 8005268:	4c742400 	.word	0x4c742400
 800526c:	4a742400 	.word	0x4a742400
 8005270:	4af42400 	.word	0x4af42400

08005274 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005282:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d101      	bne.n	8005292 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e099      	b.n	80053c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005292:	4b4f      	ldr	r3, [pc, #316]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a4e      	ldr	r2, [pc, #312]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005298:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800529c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529e:	f7fc facd 	bl	800183c <HAL_GetTick>
 80052a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052a4:	e008      	b.n	80052b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052a6:	f7fc fac9 	bl	800183c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e086      	b.n	80053c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052b8:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052c4:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	031b      	lsls	r3, r3, #12
 80052d2:	493f      	ldr	r1, [pc, #252]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	628b      	str	r3, [r1, #40]	; 0x28
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	3b01      	subs	r3, #1
 80052de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	025b      	lsls	r3, r3, #9
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	3b01      	subs	r3, #1
 8005302:	061b      	lsls	r3, r3, #24
 8005304:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005308:	4931      	ldr	r1, [pc, #196]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800530e:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	492d      	ldr	r1, [pc, #180]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005320:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	f023 0220 	bic.w	r2, r3, #32
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	4928      	ldr	r1, [pc, #160]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005332:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005338:	f023 0310 	bic.w	r3, r3, #16
 800533c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <RCCEx_PLL2_Config+0x160>)
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	69d2      	ldr	r2, [r2, #28]
 800534a:	00d2      	lsls	r2, r2, #3
 800534c:	4920      	ldr	r1, [pc, #128]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005352:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005358:	f043 0310 	orr.w	r3, r3, #16
 800535c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005364:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800536a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005370:	e00f      	b.n	8005392 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d106      	bne.n	8005386 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800537e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005384:	e005      	b.n	8005392 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a11      	ldr	r2, [pc, #68]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 800538c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005390:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a0e      	ldr	r2, [pc, #56]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 8005398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800539c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539e:	f7fc fa4d 	bl	800183c <HAL_GetTick>
 80053a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053a4:	e008      	b.n	80053b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053a6:	f7fc fa49 	bl	800183c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e006      	b.n	80053c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	58024400 	.word	0x58024400
 80053d4:	ffff0007 	.word	0xffff0007

080053d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053e6:	4b53      	ldr	r3, [pc, #332]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d101      	bne.n	80053f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e099      	b.n	800552a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053f6:	4b4f      	ldr	r3, [pc, #316]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a4e      	ldr	r2, [pc, #312]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005402:	f7fc fa1b 	bl	800183c <HAL_GetTick>
 8005406:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005408:	e008      	b.n	800541c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800540a:	f7fc fa17 	bl	800183c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e086      	b.n	800552a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800541c:	4b45      	ldr	r3, [pc, #276]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f0      	bne.n	800540a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005428:	4b42      	ldr	r3, [pc, #264]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	051b      	lsls	r3, r3, #20
 8005436:	493f      	ldr	r1, [pc, #252]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 8005438:	4313      	orrs	r3, r2
 800543a:	628b      	str	r3, [r1, #40]	; 0x28
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	3b01      	subs	r3, #1
 8005442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	3b01      	subs	r3, #1
 800544c:	025b      	lsls	r3, r3, #9
 800544e:	b29b      	uxth	r3, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	3b01      	subs	r3, #1
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	3b01      	subs	r3, #1
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800546c:	4931      	ldr	r1, [pc, #196]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005472:	4b30      	ldr	r3, [pc, #192]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	492d      	ldr	r1, [pc, #180]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 8005480:	4313      	orrs	r3, r2
 8005482:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	4928      	ldr	r1, [pc, #160]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	4a26      	ldr	r2, [pc, #152]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 800549c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054a2:	4b24      	ldr	r3, [pc, #144]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <RCCEx_PLL3_Config+0x160>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	69d2      	ldr	r2, [r2, #28]
 80054ae:	00d2      	lsls	r2, r2, #3
 80054b0:	4920      	ldr	r1, [pc, #128]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054b6:	4b1f      	ldr	r3, [pc, #124]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054d4:	e00f      	b.n	80054f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d106      	bne.n	80054ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054dc:	4b15      	ldr	r3, [pc, #84]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054e8:	e005      	b.n	80054f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054ea:	4b12      	ldr	r3, [pc, #72]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	4a11      	ldr	r2, [pc, #68]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a0e      	ldr	r2, [pc, #56]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005502:	f7fc f99b 	bl	800183c <HAL_GetTick>
 8005506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005508:	e008      	b.n	800551c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800550a:	f7fc f997 	bl	800183c <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e006      	b.n	800552a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <RCCEx_PLL3_Config+0x15c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	58024400 	.word	0x58024400
 8005538:	ffff0007 	.word	0xffff0007

0800553c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e049      	b.n	80055e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fb fec6 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f000 fbb0 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e049      	b.n	8005690 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f841 	bl	8005698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f000 fb59 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <HAL_TIM_PWM_Start+0x24>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	bf14      	ite	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	e03c      	b.n	800574a <HAL_TIM_PWM_Start+0x9e>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d109      	bne.n	80056ea <HAL_TIM_PWM_Start+0x3e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	bf14      	ite	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	2300      	moveq	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	e02f      	b.n	800574a <HAL_TIM_PWM_Start+0x9e>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x58>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e022      	b.n	800574a <HAL_TIM_PWM_Start+0x9e>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d109      	bne.n	800571e <HAL_TIM_PWM_Start+0x72>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e015      	b.n	800574a <HAL_TIM_PWM_Start+0x9e>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b10      	cmp	r3, #16
 8005722:	d109      	bne.n	8005738 <HAL_TIM_PWM_Start+0x8c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e008      	b.n	800574a <HAL_TIM_PWM_Start+0x9e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	bf14      	ite	ne
 8005744:	2301      	movne	r3, #1
 8005746:	2300      	moveq	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0a1      	b.n	8005896 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start+0xb6>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005760:	e023      	b.n	80057aa <HAL_TIM_PWM_Start+0xfe>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d104      	bne.n	8005772 <HAL_TIM_PWM_Start+0xc6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	e01b      	b.n	80057aa <HAL_TIM_PWM_Start+0xfe>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Start+0xd6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005780:	e013      	b.n	80057aa <HAL_TIM_PWM_Start+0xfe>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b0c      	cmp	r3, #12
 8005786:	d104      	bne.n	8005792 <HAL_TIM_PWM_Start+0xe6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005790:	e00b      	b.n	80057aa <HAL_TIM_PWM_Start+0xfe>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b10      	cmp	r3, #16
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xf6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	e003      	b.n	80057aa <HAL_TIM_PWM_Start+0xfe>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fea2 	bl	80064fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <HAL_TIM_PWM_Start+0x1f4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_TIM_PWM_Start+0x13e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a37      	ldr	r2, [pc, #220]	; (80058a4 <HAL_TIM_PWM_Start+0x1f8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_TIM_PWM_Start+0x13e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a35      	ldr	r2, [pc, #212]	; (80058a8 <HAL_TIM_PWM_Start+0x1fc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_TIM_PWM_Start+0x13e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a34      	ldr	r2, [pc, #208]	; (80058ac <HAL_TIM_PWM_Start+0x200>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_TIM_PWM_Start+0x13e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a32      	ldr	r2, [pc, #200]	; (80058b0 <HAL_TIM_PWM_Start+0x204>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <HAL_TIM_PWM_Start+0x142>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_TIM_PWM_Start+0x144>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005802:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <HAL_TIM_PWM_Start+0x1f4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_TIM_PWM_Start+0x1a8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005816:	d01d      	beq.n	8005854 <HAL_TIM_PWM_Start+0x1a8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <HAL_TIM_PWM_Start+0x208>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_TIM_PWM_Start+0x1a8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <HAL_TIM_PWM_Start+0x20c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_TIM_PWM_Start+0x1a8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a22      	ldr	r2, [pc, #136]	; (80058bc <HAL_TIM_PWM_Start+0x210>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_TIM_PWM_Start+0x1a8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <HAL_TIM_PWM_Start+0x1f8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_TIM_PWM_Start+0x1a8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_TIM_PWM_Start+0x214>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_PWM_Start+0x1a8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <HAL_TIM_PWM_Start+0x1fc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d115      	bne.n	8005880 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <HAL_TIM_PWM_Start+0x218>)
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b06      	cmp	r3, #6
 8005864:	d015      	beq.n	8005892 <HAL_TIM_PWM_Start+0x1e6>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586c:	d011      	beq.n	8005892 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	e008      	b.n	8005892 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e000      	b.n	8005894 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00
 80058c0:	40001800 	.word	0x40001800
 80058c4:	00010007 	.word	0x00010007

080058c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0ff      	b.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b14      	cmp	r3, #20
 80058f2:	f200 80f0 	bhi.w	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005951 	.word	0x08005951
 8005900:	08005ad7 	.word	0x08005ad7
 8005904:	08005ad7 	.word	0x08005ad7
 8005908:	08005ad7 	.word	0x08005ad7
 800590c:	08005991 	.word	0x08005991
 8005910:	08005ad7 	.word	0x08005ad7
 8005914:	08005ad7 	.word	0x08005ad7
 8005918:	08005ad7 	.word	0x08005ad7
 800591c:	080059d3 	.word	0x080059d3
 8005920:	08005ad7 	.word	0x08005ad7
 8005924:	08005ad7 	.word	0x08005ad7
 8005928:	08005ad7 	.word	0x08005ad7
 800592c:	08005a13 	.word	0x08005a13
 8005930:	08005ad7 	.word	0x08005ad7
 8005934:	08005ad7 	.word	0x08005ad7
 8005938:	08005ad7 	.word	0x08005ad7
 800593c:	08005a55 	.word	0x08005a55
 8005940:	08005ad7 	.word	0x08005ad7
 8005944:	08005ad7 	.word	0x08005ad7
 8005948:	08005ad7 	.word	0x08005ad7
 800594c:	08005a95 	.word	0x08005a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fa5c 	bl	8005e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0204 	bic.w	r2, r2, #4
 800597a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6999      	ldr	r1, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	619a      	str	r2, [r3, #24]
      break;
 800598e:	e0a5      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 facc 	bl	8005f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6999      	ldr	r1, [r3, #24]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	619a      	str	r2, [r3, #24]
      break;
 80059d0:	e084      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fb35 	bl	8006048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0208 	orr.w	r2, r2, #8
 80059ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0204 	bic.w	r2, r2, #4
 80059fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69d9      	ldr	r1, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	61da      	str	r2, [r3, #28]
      break;
 8005a10:	e064      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fb9d 	bl	8006158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	021a      	lsls	r2, r3, #8
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	61da      	str	r2, [r3, #28]
      break;
 8005a52:	e043      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fbe6 	bl	800622c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0208 	orr.w	r2, r2, #8
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0204 	bic.w	r2, r2, #4
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a92:	e023      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fc2a 	bl	80062f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	021a      	lsls	r2, r3, #8
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ad4:	e002      	b.n	8005adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop

08005af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_ConfigClockSource+0x1c>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e0dc      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	4b6a      	ldr	r3, [pc, #424]	; (8005cd0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a64      	ldr	r2, [pc, #400]	; (8005cd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	f000 80a9 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b48:	4a62      	ldr	r2, [pc, #392]	; (8005cd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	f200 80ae 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005b50:	4a61      	ldr	r2, [pc, #388]	; (8005cd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	f000 80a1 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b58:	4a5f      	ldr	r2, [pc, #380]	; (8005cd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	f200 80a6 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005b60:	4a5e      	ldr	r2, [pc, #376]	; (8005cdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	f000 8099 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b68:	4a5c      	ldr	r2, [pc, #368]	; (8005cdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f200 809e 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005b70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b74:	f000 8091 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b7c:	f200 8096 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b84:	f000 8089 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b8c:	f200 808e 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d03e      	beq.n	8005c14 <HAL_TIM_ConfigClockSource+0x124>
 8005b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9a:	f200 8087 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	f000 8086 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1c2>
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d87f      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d01a      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0xf6>
 8005bb0:	2b70      	cmp	r3, #112	; 0x70
 8005bb2:	d87b      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d050      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x16a>
 8005bb8:	2b60      	cmp	r3, #96	; 0x60
 8005bba:	d877      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d03c      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x14a>
 8005bc0:	2b50      	cmp	r3, #80	; 0x50
 8005bc2:	d873      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d058      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x18a>
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d86f      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d064      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005bd0:	2b30      	cmp	r3, #48	; 0x30
 8005bd2:	d86b      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d060      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d867      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d05c      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d05a      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x1aa>
 8005be4:	e062      	b.n	8005cac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6899      	ldr	r1, [r3, #8]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f000 fc61 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	609a      	str	r2, [r3, #8]
      break;
 8005c12:	e04f      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6899      	ldr	r1, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f000 fc4a 	bl	80064bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c36:	609a      	str	r2, [r3, #8]
      break;
 8005c38:	e03c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f000 fbba 	bl	80063c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2150      	movs	r1, #80	; 0x50
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fc14 	bl	8006480 <TIM_ITRx_SetConfig>
      break;
 8005c58:	e02c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 fbd9 	bl	800641e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2160      	movs	r1, #96	; 0x60
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fc04 	bl	8006480 <TIM_ITRx_SetConfig>
      break;
 8005c78:	e01c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f000 fb9a 	bl	80063c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2140      	movs	r1, #64	; 0x40
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fbf4 	bl	8006480 <TIM_ITRx_SetConfig>
      break;
 8005c98:	e00c      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f000 fbeb 	bl	8006480 <TIM_ITRx_SetConfig>
      break;
 8005caa:	e003      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb0:	e000      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	ffceff88 	.word	0xffceff88
 8005cd4:	00100040 	.word	0x00100040
 8005cd8:	00100030 	.word	0x00100030
 8005cdc:	00100020 	.word	0x00100020

08005ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a40      	ldr	r2, [pc, #256]	; (8005df4 <TIM_Base_SetConfig+0x114>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d013      	beq.n	8005d20 <TIM_Base_SetConfig+0x40>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfe:	d00f      	beq.n	8005d20 <TIM_Base_SetConfig+0x40>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a3d      	ldr	r2, [pc, #244]	; (8005df8 <TIM_Base_SetConfig+0x118>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00b      	beq.n	8005d20 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a3c      	ldr	r2, [pc, #240]	; (8005dfc <TIM_Base_SetConfig+0x11c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d007      	beq.n	8005d20 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a3b      	ldr	r2, [pc, #236]	; (8005e00 <TIM_Base_SetConfig+0x120>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3a      	ldr	r2, [pc, #232]	; (8005e04 <TIM_Base_SetConfig+0x124>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d108      	bne.n	8005d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2f      	ldr	r2, [pc, #188]	; (8005df4 <TIM_Base_SetConfig+0x114>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01f      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d40:	d01b      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2c      	ldr	r2, [pc, #176]	; (8005df8 <TIM_Base_SetConfig+0x118>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d017      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2b      	ldr	r2, [pc, #172]	; (8005dfc <TIM_Base_SetConfig+0x11c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2a      	ldr	r2, [pc, #168]	; (8005e00 <TIM_Base_SetConfig+0x120>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a29      	ldr	r2, [pc, #164]	; (8005e04 <TIM_Base_SetConfig+0x124>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a28      	ldr	r2, [pc, #160]	; (8005e08 <TIM_Base_SetConfig+0x128>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <TIM_Base_SetConfig+0x12c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <TIM_Base_SetConfig+0x130>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d108      	bne.n	8005d8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a10      	ldr	r2, [pc, #64]	; (8005df4 <TIM_Base_SetConfig+0x114>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00f      	beq.n	8005dd8 <TIM_Base_SetConfig+0xf8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <TIM_Base_SetConfig+0x124>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_Base_SetConfig+0xf8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <TIM_Base_SetConfig+0x128>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0xf8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <TIM_Base_SetConfig+0x12c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0xf8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <TIM_Base_SetConfig+0x130>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d103      	bne.n	8005de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	615a      	str	r2, [r3, #20]
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	40010400 	.word	0x40010400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800

08005e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f023 0201 	bic.w	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4b37      	ldr	r3, [pc, #220]	; (8005f1c <TIM_OC1_SetConfig+0x108>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a2d      	ldr	r2, [pc, #180]	; (8005f20 <TIM_OC1_SetConfig+0x10c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC1_SetConfig+0x7c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2c      	ldr	r2, [pc, #176]	; (8005f24 <TIM_OC1_SetConfig+0x110>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC1_SetConfig+0x7c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a2b      	ldr	r2, [pc, #172]	; (8005f28 <TIM_OC1_SetConfig+0x114>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC1_SetConfig+0x7c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a2a      	ldr	r2, [pc, #168]	; (8005f2c <TIM_OC1_SetConfig+0x118>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC1_SetConfig+0x7c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <TIM_OC1_SetConfig+0x11c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10c      	bne.n	8005eaa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 0308 	bic.w	r3, r3, #8
 8005e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0304 	bic.w	r3, r3, #4
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <TIM_OC1_SetConfig+0x10c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00f      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xbe>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <TIM_OC1_SetConfig+0x110>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xbe>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <TIM_OC1_SetConfig+0x114>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xbe>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <TIM_OC1_SetConfig+0x118>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xbe>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <TIM_OC1_SetConfig+0x11c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d111      	bne.n	8005ef6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	fffeff8f 	.word	0xfffeff8f
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f023 0210 	bic.w	r2, r3, #16
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4b34      	ldr	r3, [pc, #208]	; (8006030 <TIM_OC2_SetConfig+0xfc>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0320 	bic.w	r3, r3, #32
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a29      	ldr	r2, [pc, #164]	; (8006034 <TIM_OC2_SetConfig+0x100>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC2_SetConfig+0x68>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a28      	ldr	r2, [pc, #160]	; (8006038 <TIM_OC2_SetConfig+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10d      	bne.n	8005fb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <TIM_OC2_SetConfig+0x100>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xac>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <TIM_OC2_SetConfig+0x104>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xac>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <TIM_OC2_SetConfig+0x108>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xac>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <TIM_OC2_SetConfig+0x10c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xac>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <TIM_OC2_SetConfig+0x110>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d113      	bne.n	8006008 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	feff8fff 	.word	0xfeff8fff
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800

08006048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4b33      	ldr	r3, [pc, #204]	; (8006140 <TIM_OC3_SetConfig+0xf8>)
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a28      	ldr	r2, [pc, #160]	; (8006144 <TIM_OC3_SetConfig+0xfc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC3_SetConfig+0x66>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a27      	ldr	r2, [pc, #156]	; (8006148 <TIM_OC3_SetConfig+0x100>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d10d      	bne.n	80060ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <TIM_OC3_SetConfig+0xfc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_OC3_SetConfig+0xaa>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <TIM_OC3_SetConfig+0x100>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_OC3_SetConfig+0xaa>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1b      	ldr	r2, [pc, #108]	; (800614c <TIM_OC3_SetConfig+0x104>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_OC3_SetConfig+0xaa>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1a      	ldr	r2, [pc, #104]	; (8006150 <TIM_OC3_SetConfig+0x108>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_OC3_SetConfig+0xaa>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <TIM_OC3_SetConfig+0x10c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d113      	bne.n	800611a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	fffeff8f 	.word	0xfffeff8f
 8006144:	40010000 	.word	0x40010000
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800

08006158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4b24      	ldr	r3, [pc, #144]	; (8006214 <TIM_OC4_SetConfig+0xbc>)
 8006184:	4013      	ands	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a19      	ldr	r2, [pc, #100]	; (8006218 <TIM_OC4_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00f      	beq.n	80061d8 <TIM_OC4_SetConfig+0x80>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a18      	ldr	r2, [pc, #96]	; (800621c <TIM_OC4_SetConfig+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_OC4_SetConfig+0x80>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a17      	ldr	r2, [pc, #92]	; (8006220 <TIM_OC4_SetConfig+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_OC4_SetConfig+0x80>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a16      	ldr	r2, [pc, #88]	; (8006224 <TIM_OC4_SetConfig+0xcc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0x80>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a15      	ldr	r2, [pc, #84]	; (8006228 <TIM_OC4_SetConfig+0xd0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d109      	bne.n	80061ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	019b      	lsls	r3, r3, #6
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	feff8fff 	.word	0xfeff8fff
 8006218:	40010000 	.word	0x40010000
 800621c:	40010400 	.word	0x40010400
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4b21      	ldr	r3, [pc, #132]	; (80062dc <TIM_OC5_SetConfig+0xb0>)
 8006258:	4013      	ands	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <TIM_OC5_SetConfig+0xb4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <TIM_OC5_SetConfig+0xb8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <TIM_OC5_SetConfig+0xbc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a15      	ldr	r2, [pc, #84]	; (80062ec <TIM_OC5_SetConfig+0xc0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC5_SetConfig+0x76>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <TIM_OC5_SetConfig+0xc4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d109      	bne.n	80062b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	fffeff8f 	.word	0xfffeff8f
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40014400 	.word	0x40014400
 80062f0:	40014800 	.word	0x40014800

080062f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4b22      	ldr	r3, [pc, #136]	; (80063a8 <TIM_OC6_SetConfig+0xb4>)
 8006320:	4013      	ands	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	051b      	lsls	r3, r3, #20
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a19      	ldr	r2, [pc, #100]	; (80063ac <TIM_OC6_SetConfig+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00f      	beq.n	800636c <TIM_OC6_SetConfig+0x78>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <TIM_OC6_SetConfig+0xbc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <TIM_OC6_SetConfig+0x78>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <TIM_OC6_SetConfig+0xc0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_OC6_SetConfig+0x78>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <TIM_OC6_SetConfig+0xc4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC6_SetConfig+0x78>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a15      	ldr	r2, [pc, #84]	; (80063bc <TIM_OC6_SetConfig+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d109      	bne.n	8006380 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	feff8fff 	.word	0xfeff8fff
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40010400 	.word	0x40010400
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800

080063c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 030a 	bic.w	r3, r3, #10
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0210 	bic.w	r2, r3, #16
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800645a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <TIM_ITRx_SetConfig+0x38>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	f043 0307 	orr.w	r3, r3, #7
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	609a      	str	r2, [r3, #8]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	ffcfff8f 	.word	0xffcfff8f

080064bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	021a      	lsls	r2, r3, #8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	431a      	orrs	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2201      	movs	r2, #1
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1a      	ldr	r2, [r3, #32]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	43db      	mvns	r3, r3
 800651e:	401a      	ands	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	431a      	orrs	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800655c:	2302      	movs	r3, #2
 800655e:	e06d      	b.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a30      	ldr	r2, [pc, #192]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2f      	ldr	r2, [pc, #188]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800659a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a20      	ldr	r2, [pc, #128]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d01d      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1d      	ldr	r2, [pc, #116]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1c      	ldr	r2, [pc, #112]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1a      	ldr	r2, [pc, #104]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	; (800665c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a15      	ldr	r2, [pc, #84]	; (8006660 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d10c      	bne.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	4313      	orrs	r3, r2
 8006620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40001800 	.word	0x40001800
 8006660:	40014000 	.word	0x40014000

08006664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e042      	b.n	80066fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fa ff23 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2224      	movs	r2, #36	; 0x24
 8006692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0201 	bic.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fce0 	bl	800706c <UART_SetConfig>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e022      	b.n	80066fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fb40 	bl	8007d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fbc7 	bl	8007e88 <UART_CheckIdleState>
 80066fa:	4603      	mov	r3, r0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	; 0x28
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671a:	2b20      	cmp	r3, #32
 800671c:	d17b      	bne.n	8006816 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <HAL_UART_Transmit+0x26>
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e074      	b.n	8006818 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2221      	movs	r2, #33	; 0x21
 800673a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800673e:	f7fb f87d 	bl	800183c <HAL_GetTick>
 8006742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675c:	d108      	bne.n	8006770 <HAL_UART_Transmit+0x6c>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	e003      	b.n	8006778 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006774:	2300      	movs	r3, #0
 8006776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006778:	e030      	b.n	80067dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	2180      	movs	r1, #128	; 0x80
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f001 fc29 	bl	8007fdc <UART_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e03d      	b.n	8006818 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	3302      	adds	r3, #2
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	e007      	b.n	80067ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	3301      	adds	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1c8      	bne.n	800677a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	2140      	movs	r1, #64	; 0x40
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f001 fbf2 	bl	8007fdc <UART_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e006      	b.n	8006818 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e000      	b.n	8006818 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006816:	2302      	movs	r3, #2
  }
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006834:	2b20      	cmp	r3, #32
 8006836:	d137      	bne.n	80068a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_UART_Receive_IT+0x24>
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e030      	b.n	80068aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <HAL_UART_Receive_IT+0x94>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d01f      	beq.n	8006898 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d018      	beq.n	8006898 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	613b      	str	r3, [r7, #16]
   return(result);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	623b      	str	r3, [r7, #32]
 8006886:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	61bb      	str	r3, [r7, #24]
   return(result);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	461a      	mov	r2, r3
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f001 fc04 	bl	80080ac <UART_Start_Receive_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	e000      	b.n	80068aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068a8:	2302      	movs	r3, #2
  }
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3728      	adds	r7, #40	; 0x28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	58000c00 	.word	0x58000c00

080068b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b0ba      	sub	sp, #232	; 0xe8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80068e6:	4013      	ands	r3, r2
 80068e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11b      	bne.n	800692c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d015      	beq.n	800692c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800690c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8377 	beq.w	8007010 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
      }
      return;
 800692a:	e371      	b.n	8007010 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800692c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8123 	beq.w	8006b7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006936:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800693a:	4b8d      	ldr	r3, [pc, #564]	; (8006b70 <HAL_UART_IRQHandler+0x2b8>)
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006946:	4b8b      	ldr	r3, [pc, #556]	; (8006b74 <HAL_UART_IRQHandler+0x2bc>)
 8006948:	4013      	ands	r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8116 	beq.w	8006b7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <HAL_UART_IRQHandler+0xc8>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2201      	movs	r2, #1
 800696e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006976:	f043 0201 	orr.w	r2, r3, #1
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d011      	beq.n	80069b0 <HAL_UART_IRQHandler+0xf8>
 800698c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2202      	movs	r2, #2
 800699e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d011      	beq.n	80069e0 <HAL_UART_IRQHandler+0x128>
 80069bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2204      	movs	r2, #4
 80069ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069fc:	4b5c      	ldr	r3, [pc, #368]	; (8006b70 <HAL_UART_IRQHandler+0x2b8>)
 80069fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2208      	movs	r2, #8
 8006a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f043 0208 	orr.w	r2, r3, #8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d012      	beq.n	8006a4e <HAL_UART_IRQHandler+0x196>
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a44:	f043 0220 	orr.w	r2, r3, #32
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 82dd 	beq.w	8007014 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d005      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d054      	beq.n	8006b5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fc1c 	bl	80082f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d146      	bne.n	8006b54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006af2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1d9      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <HAL_UART_IRQHandler+0x2c0>)
 8006b24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fb fae3 	bl	80020f8 <HAL_DMA_Abort_IT>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d019      	beq.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b46:	4610      	mov	r0, r2
 8006b48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4a:	e00f      	b.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa77 	bl	8007040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b52:	e00b      	b.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa73 	bl	8007040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5a:	e007      	b.n	8006b6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fa6f 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006b6a:	e253      	b.n	8007014 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6c:	bf00      	nop
    return;
 8006b6e:	e251      	b.n	8007014 <HAL_UART_IRQHandler+0x75c>
 8006b70:	10000001 	.word	0x10000001
 8006b74:	04000120 	.word	0x04000120
 8006b78:	080083bd 	.word	0x080083bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	f040 81e7 	bne.w	8006f54 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8a:	f003 0310 	and.w	r3, r3, #16
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 81e0 	beq.w	8006f54 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 81d9 	beq.w	8006f54 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	f040 8151 	bne.w	8006e5c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a96      	ldr	r2, [pc, #600]	; (8006e1c <HAL_UART_IRQHandler+0x564>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d068      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a93      	ldr	r2, [pc, #588]	; (8006e20 <HAL_UART_IRQHandler+0x568>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d061      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a91      	ldr	r2, [pc, #580]	; (8006e24 <HAL_UART_IRQHandler+0x56c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d05a      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a8e      	ldr	r2, [pc, #568]	; (8006e28 <HAL_UART_IRQHandler+0x570>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d053      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a8c      	ldr	r2, [pc, #560]	; (8006e2c <HAL_UART_IRQHandler+0x574>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d04c      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a89      	ldr	r2, [pc, #548]	; (8006e30 <HAL_UART_IRQHandler+0x578>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d045      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a87      	ldr	r2, [pc, #540]	; (8006e34 <HAL_UART_IRQHandler+0x57c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d03e      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a84      	ldr	r2, [pc, #528]	; (8006e38 <HAL_UART_IRQHandler+0x580>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d037      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a82      	ldr	r2, [pc, #520]	; (8006e3c <HAL_UART_IRQHandler+0x584>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d030      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a7f      	ldr	r2, [pc, #508]	; (8006e40 <HAL_UART_IRQHandler+0x588>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d029      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7d      	ldr	r2, [pc, #500]	; (8006e44 <HAL_UART_IRQHandler+0x58c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d022      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7a      	ldr	r2, [pc, #488]	; (8006e48 <HAL_UART_IRQHandler+0x590>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01b      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a78      	ldr	r2, [pc, #480]	; (8006e4c <HAL_UART_IRQHandler+0x594>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d014      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a75      	ldr	r2, [pc, #468]	; (8006e50 <HAL_UART_IRQHandler+0x598>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00d      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a73      	ldr	r2, [pc, #460]	; (8006e54 <HAL_UART_IRQHandler+0x59c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d006      	beq.n	8006c9a <HAL_UART_IRQHandler+0x3e2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a70      	ldr	r2, [pc, #448]	; (8006e58 <HAL_UART_IRQHandler+0x5a0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d106      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x3f0>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	e005      	b.n	8006cb4 <HAL_UART_IRQHandler+0x3fc>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 81ab 	beq.w	8007018 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	f080 81a3 	bcs.w	8007018 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce8:	f000 8087 	beq.w	8006dfa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1da      	bne.n	8006cec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e1      	bne.n	8006d36 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e3      	bne.n	8006d72 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc8:	f023 0310 	bic.w	r3, r3, #16
 8006dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dda:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ddc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e4      	bne.n	8006db8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fa fe61 	bl	8001abc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f91d 	bl	8007054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e1a:	e0fd      	b.n	8007018 <HAL_UART_IRQHandler+0x760>
 8006e1c:	40020010 	.word	0x40020010
 8006e20:	40020028 	.word	0x40020028
 8006e24:	40020040 	.word	0x40020040
 8006e28:	40020058 	.word	0x40020058
 8006e2c:	40020070 	.word	0x40020070
 8006e30:	40020088 	.word	0x40020088
 8006e34:	400200a0 	.word	0x400200a0
 8006e38:	400200b8 	.word	0x400200b8
 8006e3c:	40020410 	.word	0x40020410
 8006e40:	40020428 	.word	0x40020428
 8006e44:	40020440 	.word	0x40020440
 8006e48:	40020458 	.word	0x40020458
 8006e4c:	40020470 	.word	0x40020470
 8006e50:	40020488 	.word	0x40020488
 8006e54:	400204a0 	.word	0x400204a0
 8006e58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 80cf 	beq.w	800701c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80ca 	beq.w	800701c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8006eac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e4      	bne.n	8006e88 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ece:	6a3a      	ldr	r2, [r7, #32]
 8006ed0:	4b55      	ldr	r3, [pc, #340]	; (8007028 <HAL_UART_IRQHandler+0x770>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3308      	adds	r3, #8
 8006ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e3      	bne.n	8006ebe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0310 	bic.w	r3, r3, #16
 8006f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f2c:	61fb      	str	r3, [r7, #28]
 8006f2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	617b      	str	r3, [r7, #20]
   return(result);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e4      	bne.n	8006f0a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f881 	bl	8007054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f52:	e063      	b.n	800701c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <HAL_UART_IRQHandler+0x6c6>
 8006f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 ff7e 	bl	8008e78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f7c:	e051      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d014      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d105      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d03a      	beq.n	8007020 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
    }
    return;
 8006fb2:	e035      	b.n	8007020 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x71c>
 8006fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 fa0b 	bl	80083e8 <UART_EndTransmit_IT>
    return;
 8006fd2:	e026      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d009      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x73c>
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 ff57 	bl	8008ea0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ff2:	e016      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <HAL_UART_IRQHandler+0x76a>
 8007000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007004:	2b00      	cmp	r3, #0
 8007006:	da0c      	bge.n	8007022 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 ff3f 	bl	8008e8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800700e:	e008      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
      return;
 8007010:	bf00      	nop
 8007012:	e006      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
    return;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
      return;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
      return;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <HAL_UART_IRQHandler+0x76a>
    return;
 8007020:	bf00      	nop
  }
}
 8007022:	37e8      	adds	r7, #232	; 0xe8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	effffffe 	.word	0xeffffffe

0800702c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800706c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007070:	b092      	sub	sp, #72	; 0x48
 8007072:	af00      	add	r7, sp, #0
 8007074:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	431a      	orrs	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	431a      	orrs	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	4313      	orrs	r3, r2
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4bbe      	ldr	r3, [pc, #760]	; (8007394 <UART_SetConfig+0x328>)
 800709c:	4013      	ands	r3, r2
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4ab3      	ldr	r2, [pc, #716]	; (8007398 <UART_SetConfig+0x32c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d004      	beq.n	80070d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070d4:	4313      	orrs	r3, r2
 80070d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	4baf      	ldr	r3, [pc, #700]	; (800739c <UART_SetConfig+0x330>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	f023 010f 	bic.w	r1, r3, #15
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4aa6      	ldr	r2, [pc, #664]	; (80073a0 <UART_SetConfig+0x334>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d177      	bne.n	80071fc <UART_SetConfig+0x190>
 800710c:	4ba5      	ldr	r3, [pc, #660]	; (80073a4 <UART_SetConfig+0x338>)
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007114:	2b28      	cmp	r3, #40	; 0x28
 8007116:	d86d      	bhi.n	80071f4 <UART_SetConfig+0x188>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <UART_SetConfig+0xb4>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	080071c5 	.word	0x080071c5
 8007124:	080071f5 	.word	0x080071f5
 8007128:	080071f5 	.word	0x080071f5
 800712c:	080071f5 	.word	0x080071f5
 8007130:	080071f5 	.word	0x080071f5
 8007134:	080071f5 	.word	0x080071f5
 8007138:	080071f5 	.word	0x080071f5
 800713c:	080071f5 	.word	0x080071f5
 8007140:	080071cd 	.word	0x080071cd
 8007144:	080071f5 	.word	0x080071f5
 8007148:	080071f5 	.word	0x080071f5
 800714c:	080071f5 	.word	0x080071f5
 8007150:	080071f5 	.word	0x080071f5
 8007154:	080071f5 	.word	0x080071f5
 8007158:	080071f5 	.word	0x080071f5
 800715c:	080071f5 	.word	0x080071f5
 8007160:	080071d5 	.word	0x080071d5
 8007164:	080071f5 	.word	0x080071f5
 8007168:	080071f5 	.word	0x080071f5
 800716c:	080071f5 	.word	0x080071f5
 8007170:	080071f5 	.word	0x080071f5
 8007174:	080071f5 	.word	0x080071f5
 8007178:	080071f5 	.word	0x080071f5
 800717c:	080071f5 	.word	0x080071f5
 8007180:	080071dd 	.word	0x080071dd
 8007184:	080071f5 	.word	0x080071f5
 8007188:	080071f5 	.word	0x080071f5
 800718c:	080071f5 	.word	0x080071f5
 8007190:	080071f5 	.word	0x080071f5
 8007194:	080071f5 	.word	0x080071f5
 8007198:	080071f5 	.word	0x080071f5
 800719c:	080071f5 	.word	0x080071f5
 80071a0:	080071e5 	.word	0x080071e5
 80071a4:	080071f5 	.word	0x080071f5
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	080071f5 	.word	0x080071f5
 80071b0:	080071f5 	.word	0x080071f5
 80071b4:	080071f5 	.word	0x080071f5
 80071b8:	080071f5 	.word	0x080071f5
 80071bc:	080071f5 	.word	0x080071f5
 80071c0:	080071ed 	.word	0x080071ed
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e326      	b.n	800781a <UART_SetConfig+0x7ae>
 80071cc:	2304      	movs	r3, #4
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d2:	e322      	b.n	800781a <UART_SetConfig+0x7ae>
 80071d4:	2308      	movs	r3, #8
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e31e      	b.n	800781a <UART_SetConfig+0x7ae>
 80071dc:	2310      	movs	r3, #16
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e31a      	b.n	800781a <UART_SetConfig+0x7ae>
 80071e4:	2320      	movs	r3, #32
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e316      	b.n	800781a <UART_SetConfig+0x7ae>
 80071ec:	2340      	movs	r3, #64	; 0x40
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e312      	b.n	800781a <UART_SetConfig+0x7ae>
 80071f4:	2380      	movs	r3, #128	; 0x80
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fa:	e30e      	b.n	800781a <UART_SetConfig+0x7ae>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a69      	ldr	r2, [pc, #420]	; (80073a8 <UART_SetConfig+0x33c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d130      	bne.n	8007268 <UART_SetConfig+0x1fc>
 8007206:	4b67      	ldr	r3, [pc, #412]	; (80073a4 <UART_SetConfig+0x338>)
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	2b05      	cmp	r3, #5
 8007210:	d826      	bhi.n	8007260 <UART_SetConfig+0x1f4>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <UART_SetConfig+0x1ac>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007231 	.word	0x08007231
 800721c:	08007239 	.word	0x08007239
 8007220:	08007241 	.word	0x08007241
 8007224:	08007249 	.word	0x08007249
 8007228:	08007251 	.word	0x08007251
 800722c:	08007259 	.word	0x08007259
 8007230:	2300      	movs	r3, #0
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e2f0      	b.n	800781a <UART_SetConfig+0x7ae>
 8007238:	2304      	movs	r3, #4
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e2ec      	b.n	800781a <UART_SetConfig+0x7ae>
 8007240:	2308      	movs	r3, #8
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e2e8      	b.n	800781a <UART_SetConfig+0x7ae>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e2e4      	b.n	800781a <UART_SetConfig+0x7ae>
 8007250:	2320      	movs	r3, #32
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e2e0      	b.n	800781a <UART_SetConfig+0x7ae>
 8007258:	2340      	movs	r3, #64	; 0x40
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e2dc      	b.n	800781a <UART_SetConfig+0x7ae>
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e2d8      	b.n	800781a <UART_SetConfig+0x7ae>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4f      	ldr	r2, [pc, #316]	; (80073ac <UART_SetConfig+0x340>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d130      	bne.n	80072d4 <UART_SetConfig+0x268>
 8007272:	4b4c      	ldr	r3, [pc, #304]	; (80073a4 <UART_SetConfig+0x338>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b05      	cmp	r3, #5
 800727c:	d826      	bhi.n	80072cc <UART_SetConfig+0x260>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <UART_SetConfig+0x218>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	0800729d 	.word	0x0800729d
 8007288:	080072a5 	.word	0x080072a5
 800728c:	080072ad 	.word	0x080072ad
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072bd 	.word	0x080072bd
 8007298:	080072c5 	.word	0x080072c5
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e2ba      	b.n	800781a <UART_SetConfig+0x7ae>
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e2b6      	b.n	800781a <UART_SetConfig+0x7ae>
 80072ac:	2308      	movs	r3, #8
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e2b2      	b.n	800781a <UART_SetConfig+0x7ae>
 80072b4:	2310      	movs	r3, #16
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e2ae      	b.n	800781a <UART_SetConfig+0x7ae>
 80072bc:	2320      	movs	r3, #32
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e2aa      	b.n	800781a <UART_SetConfig+0x7ae>
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e2a6      	b.n	800781a <UART_SetConfig+0x7ae>
 80072cc:	2380      	movs	r3, #128	; 0x80
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e2a2      	b.n	800781a <UART_SetConfig+0x7ae>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a35      	ldr	r2, [pc, #212]	; (80073b0 <UART_SetConfig+0x344>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d130      	bne.n	8007340 <UART_SetConfig+0x2d4>
 80072de:	4b31      	ldr	r3, [pc, #196]	; (80073a4 <UART_SetConfig+0x338>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d826      	bhi.n	8007338 <UART_SetConfig+0x2cc>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x284>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007309 	.word	0x08007309
 80072f4:	08007311 	.word	0x08007311
 80072f8:	08007319 	.word	0x08007319
 80072fc:	08007321 	.word	0x08007321
 8007300:	08007329 	.word	0x08007329
 8007304:	08007331 	.word	0x08007331
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e284      	b.n	800781a <UART_SetConfig+0x7ae>
 8007310:	2304      	movs	r3, #4
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e280      	b.n	800781a <UART_SetConfig+0x7ae>
 8007318:	2308      	movs	r3, #8
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e27c      	b.n	800781a <UART_SetConfig+0x7ae>
 8007320:	2310      	movs	r3, #16
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e278      	b.n	800781a <UART_SetConfig+0x7ae>
 8007328:	2320      	movs	r3, #32
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e274      	b.n	800781a <UART_SetConfig+0x7ae>
 8007330:	2340      	movs	r3, #64	; 0x40
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e270      	b.n	800781a <UART_SetConfig+0x7ae>
 8007338:	2380      	movs	r3, #128	; 0x80
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e26c      	b.n	800781a <UART_SetConfig+0x7ae>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1b      	ldr	r2, [pc, #108]	; (80073b4 <UART_SetConfig+0x348>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d142      	bne.n	80073d0 <UART_SetConfig+0x364>
 800734a:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <UART_SetConfig+0x338>)
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	2b05      	cmp	r3, #5
 8007354:	d838      	bhi.n	80073c8 <UART_SetConfig+0x35c>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x2f0>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	08007375 	.word	0x08007375
 8007360:	0800737d 	.word	0x0800737d
 8007364:	08007385 	.word	0x08007385
 8007368:	0800738d 	.word	0x0800738d
 800736c:	080073b9 	.word	0x080073b9
 8007370:	080073c1 	.word	0x080073c1
 8007374:	2300      	movs	r3, #0
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737a:	e24e      	b.n	800781a <UART_SetConfig+0x7ae>
 800737c:	2304      	movs	r3, #4
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007382:	e24a      	b.n	800781a <UART_SetConfig+0x7ae>
 8007384:	2308      	movs	r3, #8
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738a:	e246      	b.n	800781a <UART_SetConfig+0x7ae>
 800738c:	2310      	movs	r3, #16
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007392:	e242      	b.n	800781a <UART_SetConfig+0x7ae>
 8007394:	cfff69f3 	.word	0xcfff69f3
 8007398:	58000c00 	.word	0x58000c00
 800739c:	11fff4ff 	.word	0x11fff4ff
 80073a0:	40011000 	.word	0x40011000
 80073a4:	58024400 	.word	0x58024400
 80073a8:	40004400 	.word	0x40004400
 80073ac:	40004800 	.word	0x40004800
 80073b0:	40004c00 	.word	0x40004c00
 80073b4:	40005000 	.word	0x40005000
 80073b8:	2320      	movs	r3, #32
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073be:	e22c      	b.n	800781a <UART_SetConfig+0x7ae>
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c6:	e228      	b.n	800781a <UART_SetConfig+0x7ae>
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ce:	e224      	b.n	800781a <UART_SetConfig+0x7ae>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4ab1      	ldr	r2, [pc, #708]	; (800769c <UART_SetConfig+0x630>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d176      	bne.n	80074c8 <UART_SetConfig+0x45c>
 80073da:	4bb1      	ldr	r3, [pc, #708]	; (80076a0 <UART_SetConfig+0x634>)
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073e2:	2b28      	cmp	r3, #40	; 0x28
 80073e4:	d86c      	bhi.n	80074c0 <UART_SetConfig+0x454>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0x380>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	08007491 	.word	0x08007491
 80073f0:	080074c1 	.word	0x080074c1
 80073f4:	080074c1 	.word	0x080074c1
 80073f8:	080074c1 	.word	0x080074c1
 80073fc:	080074c1 	.word	0x080074c1
 8007400:	080074c1 	.word	0x080074c1
 8007404:	080074c1 	.word	0x080074c1
 8007408:	080074c1 	.word	0x080074c1
 800740c:	08007499 	.word	0x08007499
 8007410:	080074c1 	.word	0x080074c1
 8007414:	080074c1 	.word	0x080074c1
 8007418:	080074c1 	.word	0x080074c1
 800741c:	080074c1 	.word	0x080074c1
 8007420:	080074c1 	.word	0x080074c1
 8007424:	080074c1 	.word	0x080074c1
 8007428:	080074c1 	.word	0x080074c1
 800742c:	080074a1 	.word	0x080074a1
 8007430:	080074c1 	.word	0x080074c1
 8007434:	080074c1 	.word	0x080074c1
 8007438:	080074c1 	.word	0x080074c1
 800743c:	080074c1 	.word	0x080074c1
 8007440:	080074c1 	.word	0x080074c1
 8007444:	080074c1 	.word	0x080074c1
 8007448:	080074c1 	.word	0x080074c1
 800744c:	080074a9 	.word	0x080074a9
 8007450:	080074c1 	.word	0x080074c1
 8007454:	080074c1 	.word	0x080074c1
 8007458:	080074c1 	.word	0x080074c1
 800745c:	080074c1 	.word	0x080074c1
 8007460:	080074c1 	.word	0x080074c1
 8007464:	080074c1 	.word	0x080074c1
 8007468:	080074c1 	.word	0x080074c1
 800746c:	080074b1 	.word	0x080074b1
 8007470:	080074c1 	.word	0x080074c1
 8007474:	080074c1 	.word	0x080074c1
 8007478:	080074c1 	.word	0x080074c1
 800747c:	080074c1 	.word	0x080074c1
 8007480:	080074c1 	.word	0x080074c1
 8007484:	080074c1 	.word	0x080074c1
 8007488:	080074c1 	.word	0x080074c1
 800748c:	080074b9 	.word	0x080074b9
 8007490:	2301      	movs	r3, #1
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007496:	e1c0      	b.n	800781a <UART_SetConfig+0x7ae>
 8007498:	2304      	movs	r3, #4
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749e:	e1bc      	b.n	800781a <UART_SetConfig+0x7ae>
 80074a0:	2308      	movs	r3, #8
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e1b8      	b.n	800781a <UART_SetConfig+0x7ae>
 80074a8:	2310      	movs	r3, #16
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e1b4      	b.n	800781a <UART_SetConfig+0x7ae>
 80074b0:	2320      	movs	r3, #32
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e1b0      	b.n	800781a <UART_SetConfig+0x7ae>
 80074b8:	2340      	movs	r3, #64	; 0x40
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074be:	e1ac      	b.n	800781a <UART_SetConfig+0x7ae>
 80074c0:	2380      	movs	r3, #128	; 0x80
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e1a8      	b.n	800781a <UART_SetConfig+0x7ae>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a75      	ldr	r2, [pc, #468]	; (80076a4 <UART_SetConfig+0x638>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d130      	bne.n	8007534 <UART_SetConfig+0x4c8>
 80074d2:	4b73      	ldr	r3, [pc, #460]	; (80076a0 <UART_SetConfig+0x634>)
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d826      	bhi.n	800752c <UART_SetConfig+0x4c0>
 80074de:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <UART_SetConfig+0x478>)
 80074e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e4:	080074fd 	.word	0x080074fd
 80074e8:	08007505 	.word	0x08007505
 80074ec:	0800750d 	.word	0x0800750d
 80074f0:	08007515 	.word	0x08007515
 80074f4:	0800751d 	.word	0x0800751d
 80074f8:	08007525 	.word	0x08007525
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e18a      	b.n	800781a <UART_SetConfig+0x7ae>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e186      	b.n	800781a <UART_SetConfig+0x7ae>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e182      	b.n	800781a <UART_SetConfig+0x7ae>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e17e      	b.n	800781a <UART_SetConfig+0x7ae>
 800751c:	2320      	movs	r3, #32
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e17a      	b.n	800781a <UART_SetConfig+0x7ae>
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e176      	b.n	800781a <UART_SetConfig+0x7ae>
 800752c:	2380      	movs	r3, #128	; 0x80
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e172      	b.n	800781a <UART_SetConfig+0x7ae>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a5b      	ldr	r2, [pc, #364]	; (80076a8 <UART_SetConfig+0x63c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d130      	bne.n	80075a0 <UART_SetConfig+0x534>
 800753e:	4b58      	ldr	r3, [pc, #352]	; (80076a0 <UART_SetConfig+0x634>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	2b05      	cmp	r3, #5
 8007548:	d826      	bhi.n	8007598 <UART_SetConfig+0x52c>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <UART_SetConfig+0x4e4>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007569 	.word	0x08007569
 8007554:	08007571 	.word	0x08007571
 8007558:	08007579 	.word	0x08007579
 800755c:	08007581 	.word	0x08007581
 8007560:	08007589 	.word	0x08007589
 8007564:	08007591 	.word	0x08007591
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e154      	b.n	800781a <UART_SetConfig+0x7ae>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e150      	b.n	800781a <UART_SetConfig+0x7ae>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e14c      	b.n	800781a <UART_SetConfig+0x7ae>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e148      	b.n	800781a <UART_SetConfig+0x7ae>
 8007588:	2320      	movs	r3, #32
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e144      	b.n	800781a <UART_SetConfig+0x7ae>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e140      	b.n	800781a <UART_SetConfig+0x7ae>
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e13c      	b.n	800781a <UART_SetConfig+0x7ae>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a41      	ldr	r2, [pc, #260]	; (80076ac <UART_SetConfig+0x640>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	f040 8082 	bne.w	80076b0 <UART_SetConfig+0x644>
 80075ac:	4b3c      	ldr	r3, [pc, #240]	; (80076a0 <UART_SetConfig+0x634>)
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075b4:	2b28      	cmp	r3, #40	; 0x28
 80075b6:	d86d      	bhi.n	8007694 <UART_SetConfig+0x628>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0x554>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	08007665 	.word	0x08007665
 80075c4:	08007695 	.word	0x08007695
 80075c8:	08007695 	.word	0x08007695
 80075cc:	08007695 	.word	0x08007695
 80075d0:	08007695 	.word	0x08007695
 80075d4:	08007695 	.word	0x08007695
 80075d8:	08007695 	.word	0x08007695
 80075dc:	08007695 	.word	0x08007695
 80075e0:	0800766d 	.word	0x0800766d
 80075e4:	08007695 	.word	0x08007695
 80075e8:	08007695 	.word	0x08007695
 80075ec:	08007695 	.word	0x08007695
 80075f0:	08007695 	.word	0x08007695
 80075f4:	08007695 	.word	0x08007695
 80075f8:	08007695 	.word	0x08007695
 80075fc:	08007695 	.word	0x08007695
 8007600:	08007675 	.word	0x08007675
 8007604:	08007695 	.word	0x08007695
 8007608:	08007695 	.word	0x08007695
 800760c:	08007695 	.word	0x08007695
 8007610:	08007695 	.word	0x08007695
 8007614:	08007695 	.word	0x08007695
 8007618:	08007695 	.word	0x08007695
 800761c:	08007695 	.word	0x08007695
 8007620:	0800767d 	.word	0x0800767d
 8007624:	08007695 	.word	0x08007695
 8007628:	08007695 	.word	0x08007695
 800762c:	08007695 	.word	0x08007695
 8007630:	08007695 	.word	0x08007695
 8007634:	08007695 	.word	0x08007695
 8007638:	08007695 	.word	0x08007695
 800763c:	08007695 	.word	0x08007695
 8007640:	08007685 	.word	0x08007685
 8007644:	08007695 	.word	0x08007695
 8007648:	08007695 	.word	0x08007695
 800764c:	08007695 	.word	0x08007695
 8007650:	08007695 	.word	0x08007695
 8007654:	08007695 	.word	0x08007695
 8007658:	08007695 	.word	0x08007695
 800765c:	08007695 	.word	0x08007695
 8007660:	0800768d 	.word	0x0800768d
 8007664:	2301      	movs	r3, #1
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e0d6      	b.n	800781a <UART_SetConfig+0x7ae>
 800766c:	2304      	movs	r3, #4
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e0d2      	b.n	800781a <UART_SetConfig+0x7ae>
 8007674:	2308      	movs	r3, #8
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e0ce      	b.n	800781a <UART_SetConfig+0x7ae>
 800767c:	2310      	movs	r3, #16
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e0ca      	b.n	800781a <UART_SetConfig+0x7ae>
 8007684:	2320      	movs	r3, #32
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e0c6      	b.n	800781a <UART_SetConfig+0x7ae>
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e0c2      	b.n	800781a <UART_SetConfig+0x7ae>
 8007694:	2380      	movs	r3, #128	; 0x80
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e0be      	b.n	800781a <UART_SetConfig+0x7ae>
 800769c:	40011400 	.word	0x40011400
 80076a0:	58024400 	.word	0x58024400
 80076a4:	40007800 	.word	0x40007800
 80076a8:	40007c00 	.word	0x40007c00
 80076ac:	40011800 	.word	0x40011800
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4aad      	ldr	r2, [pc, #692]	; (800796c <UART_SetConfig+0x900>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d176      	bne.n	80077a8 <UART_SetConfig+0x73c>
 80076ba:	4bad      	ldr	r3, [pc, #692]	; (8007970 <UART_SetConfig+0x904>)
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076c2:	2b28      	cmp	r3, #40	; 0x28
 80076c4:	d86c      	bhi.n	80077a0 <UART_SetConfig+0x734>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <UART_SetConfig+0x660>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	08007771 	.word	0x08007771
 80076d0:	080077a1 	.word	0x080077a1
 80076d4:	080077a1 	.word	0x080077a1
 80076d8:	080077a1 	.word	0x080077a1
 80076dc:	080077a1 	.word	0x080077a1
 80076e0:	080077a1 	.word	0x080077a1
 80076e4:	080077a1 	.word	0x080077a1
 80076e8:	080077a1 	.word	0x080077a1
 80076ec:	08007779 	.word	0x08007779
 80076f0:	080077a1 	.word	0x080077a1
 80076f4:	080077a1 	.word	0x080077a1
 80076f8:	080077a1 	.word	0x080077a1
 80076fc:	080077a1 	.word	0x080077a1
 8007700:	080077a1 	.word	0x080077a1
 8007704:	080077a1 	.word	0x080077a1
 8007708:	080077a1 	.word	0x080077a1
 800770c:	08007781 	.word	0x08007781
 8007710:	080077a1 	.word	0x080077a1
 8007714:	080077a1 	.word	0x080077a1
 8007718:	080077a1 	.word	0x080077a1
 800771c:	080077a1 	.word	0x080077a1
 8007720:	080077a1 	.word	0x080077a1
 8007724:	080077a1 	.word	0x080077a1
 8007728:	080077a1 	.word	0x080077a1
 800772c:	08007789 	.word	0x08007789
 8007730:	080077a1 	.word	0x080077a1
 8007734:	080077a1 	.word	0x080077a1
 8007738:	080077a1 	.word	0x080077a1
 800773c:	080077a1 	.word	0x080077a1
 8007740:	080077a1 	.word	0x080077a1
 8007744:	080077a1 	.word	0x080077a1
 8007748:	080077a1 	.word	0x080077a1
 800774c:	08007791 	.word	0x08007791
 8007750:	080077a1 	.word	0x080077a1
 8007754:	080077a1 	.word	0x080077a1
 8007758:	080077a1 	.word	0x080077a1
 800775c:	080077a1 	.word	0x080077a1
 8007760:	080077a1 	.word	0x080077a1
 8007764:	080077a1 	.word	0x080077a1
 8007768:	080077a1 	.word	0x080077a1
 800776c:	08007799 	.word	0x08007799
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e050      	b.n	800781a <UART_SetConfig+0x7ae>
 8007778:	2304      	movs	r3, #4
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e04c      	b.n	800781a <UART_SetConfig+0x7ae>
 8007780:	2308      	movs	r3, #8
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e048      	b.n	800781a <UART_SetConfig+0x7ae>
 8007788:	2310      	movs	r3, #16
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e044      	b.n	800781a <UART_SetConfig+0x7ae>
 8007790:	2320      	movs	r3, #32
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007796:	e040      	b.n	800781a <UART_SetConfig+0x7ae>
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779e:	e03c      	b.n	800781a <UART_SetConfig+0x7ae>
 80077a0:	2380      	movs	r3, #128	; 0x80
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e038      	b.n	800781a <UART_SetConfig+0x7ae>
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a71      	ldr	r2, [pc, #452]	; (8007974 <UART_SetConfig+0x908>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d130      	bne.n	8007814 <UART_SetConfig+0x7a8>
 80077b2:	4b6f      	ldr	r3, [pc, #444]	; (8007970 <UART_SetConfig+0x904>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d826      	bhi.n	800780c <UART_SetConfig+0x7a0>
 80077be:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <UART_SetConfig+0x758>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	080077dd 	.word	0x080077dd
 80077c8:	080077e5 	.word	0x080077e5
 80077cc:	080077ed 	.word	0x080077ed
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	2302      	movs	r3, #2
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e01a      	b.n	800781a <UART_SetConfig+0x7ae>
 80077e4:	2304      	movs	r3, #4
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e016      	b.n	800781a <UART_SetConfig+0x7ae>
 80077ec:	2308      	movs	r3, #8
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e012      	b.n	800781a <UART_SetConfig+0x7ae>
 80077f4:	2310      	movs	r3, #16
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e00e      	b.n	800781a <UART_SetConfig+0x7ae>
 80077fc:	2320      	movs	r3, #32
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e00a      	b.n	800781a <UART_SetConfig+0x7ae>
 8007804:	2340      	movs	r3, #64	; 0x40
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780a:	e006      	b.n	800781a <UART_SetConfig+0x7ae>
 800780c:	2380      	movs	r3, #128	; 0x80
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007812:	e002      	b.n	800781a <UART_SetConfig+0x7ae>
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a55      	ldr	r2, [pc, #340]	; (8007974 <UART_SetConfig+0x908>)
 8007820:	4293      	cmp	r3, r2
 8007822:	f040 80f8 	bne.w	8007a16 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007826:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800782a:	2b20      	cmp	r3, #32
 800782c:	dc46      	bgt.n	80078bc <UART_SetConfig+0x850>
 800782e:	2b02      	cmp	r3, #2
 8007830:	db75      	blt.n	800791e <UART_SetConfig+0x8b2>
 8007832:	3b02      	subs	r3, #2
 8007834:	2b1e      	cmp	r3, #30
 8007836:	d872      	bhi.n	800791e <UART_SetConfig+0x8b2>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <UART_SetConfig+0x7d4>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	080078c3 	.word	0x080078c3
 8007844:	0800791f 	.word	0x0800791f
 8007848:	080078cb 	.word	0x080078cb
 800784c:	0800791f 	.word	0x0800791f
 8007850:	0800791f 	.word	0x0800791f
 8007854:	0800791f 	.word	0x0800791f
 8007858:	080078db 	.word	0x080078db
 800785c:	0800791f 	.word	0x0800791f
 8007860:	0800791f 	.word	0x0800791f
 8007864:	0800791f 	.word	0x0800791f
 8007868:	0800791f 	.word	0x0800791f
 800786c:	0800791f 	.word	0x0800791f
 8007870:	0800791f 	.word	0x0800791f
 8007874:	0800791f 	.word	0x0800791f
 8007878:	080078eb 	.word	0x080078eb
 800787c:	0800791f 	.word	0x0800791f
 8007880:	0800791f 	.word	0x0800791f
 8007884:	0800791f 	.word	0x0800791f
 8007888:	0800791f 	.word	0x0800791f
 800788c:	0800791f 	.word	0x0800791f
 8007890:	0800791f 	.word	0x0800791f
 8007894:	0800791f 	.word	0x0800791f
 8007898:	0800791f 	.word	0x0800791f
 800789c:	0800791f 	.word	0x0800791f
 80078a0:	0800791f 	.word	0x0800791f
 80078a4:	0800791f 	.word	0x0800791f
 80078a8:	0800791f 	.word	0x0800791f
 80078ac:	0800791f 	.word	0x0800791f
 80078b0:	0800791f 	.word	0x0800791f
 80078b4:	0800791f 	.word	0x0800791f
 80078b8:	08007911 	.word	0x08007911
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d02a      	beq.n	8007916 <UART_SetConfig+0x8aa>
 80078c0:	e02d      	b.n	800791e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078c2:	f7fd fa19 	bl	8004cf8 <HAL_RCCEx_GetD3PCLK1Freq>
 80078c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078c8:	e02f      	b.n	800792a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fd fa28 	bl	8004d24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078d8:	e027      	b.n	800792a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fd fb74 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e8:	e01f      	b.n	800792a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078ea:	4b21      	ldr	r3, [pc, #132]	; (8007970 <UART_SetConfig+0x904>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078f6:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <UART_SetConfig+0x904>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	08db      	lsrs	r3, r3, #3
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	4a1d      	ldr	r2, [pc, #116]	; (8007978 <UART_SetConfig+0x90c>)
 8007902:	fa22 f303 	lsr.w	r3, r2, r3
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007908:	e00f      	b.n	800792a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800790a:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <UART_SetConfig+0x90c>)
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800790e:	e00c      	b.n	800792a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <UART_SetConfig+0x910>)
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007914:	e009      	b.n	800792a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800791c:	e005      	b.n	800792a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800792a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 81ee 	beq.w	8007d0e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	4a12      	ldr	r2, [pc, #72]	; (8007980 <UART_SetConfig+0x914>)
 8007938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793c:	461a      	mov	r2, r3
 800793e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007940:	fbb3 f3f2 	udiv	r3, r3, r2
 8007944:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	4613      	mov	r3, r2
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4413      	add	r3, r2
 8007950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007952:	429a      	cmp	r2, r3
 8007954:	d305      	bcc.n	8007962 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	429a      	cmp	r2, r3
 8007960:	d910      	bls.n	8007984 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007968:	e1d1      	b.n	8007d0e <UART_SetConfig+0xca2>
 800796a:	bf00      	nop
 800796c:	40011c00 	.word	0x40011c00
 8007970:	58024400 	.word	0x58024400
 8007974:	58000c00 	.word	0x58000c00
 8007978:	03d09000 	.word	0x03d09000
 800797c:	003d0900 	.word	0x003d0900
 8007980:	08009a90 	.word	0x08009a90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007986:	2200      	movs	r2, #0
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	60fa      	str	r2, [r7, #12]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	4ac0      	ldr	r2, [pc, #768]	; (8007c94 <UART_SetConfig+0xc28>)
 8007992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007996:	b29b      	uxth	r3, r3
 8007998:	2200      	movs	r2, #0
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079a6:	f7f8 fcf3 	bl	8000390 <__aeabi_uldivmod>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4610      	mov	r0, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	020b      	lsls	r3, r1, #8
 80079bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079c0:	0202      	lsls	r2, r0, #8
 80079c2:	6979      	ldr	r1, [r7, #20]
 80079c4:	6849      	ldr	r1, [r1, #4]
 80079c6:	0849      	lsrs	r1, r1, #1
 80079c8:	2000      	movs	r0, #0
 80079ca:	460c      	mov	r4, r1
 80079cc:	4605      	mov	r5, r0
 80079ce:	eb12 0804 	adds.w	r8, r2, r4
 80079d2:	eb43 0905 	adc.w	r9, r3, r5
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	469a      	mov	sl, r3
 80079de:	4693      	mov	fp, r2
 80079e0:	4652      	mov	r2, sl
 80079e2:	465b      	mov	r3, fp
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f8 fcd2 	bl	8000390 <__aeabi_uldivmod>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4613      	mov	r3, r2
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079fa:	d308      	bcc.n	8007a0e <UART_SetConfig+0x9a2>
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a02:	d204      	bcs.n	8007a0e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a0a:	60da      	str	r2, [r3, #12]
 8007a0c:	e17f      	b.n	8007d0e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a14:	e17b      	b.n	8007d0e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1e:	f040 80bd 	bne.w	8007b9c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007a22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	dc48      	bgt.n	8007abc <UART_SetConfig+0xa50>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	db7b      	blt.n	8007b26 <UART_SetConfig+0xaba>
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d879      	bhi.n	8007b26 <UART_SetConfig+0xaba>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <UART_SetConfig+0x9cc>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007ac3 	.word	0x08007ac3
 8007a3c:	08007acb 	.word	0x08007acb
 8007a40:	08007b27 	.word	0x08007b27
 8007a44:	08007b27 	.word	0x08007b27
 8007a48:	08007ad3 	.word	0x08007ad3
 8007a4c:	08007b27 	.word	0x08007b27
 8007a50:	08007b27 	.word	0x08007b27
 8007a54:	08007b27 	.word	0x08007b27
 8007a58:	08007ae3 	.word	0x08007ae3
 8007a5c:	08007b27 	.word	0x08007b27
 8007a60:	08007b27 	.word	0x08007b27
 8007a64:	08007b27 	.word	0x08007b27
 8007a68:	08007b27 	.word	0x08007b27
 8007a6c:	08007b27 	.word	0x08007b27
 8007a70:	08007b27 	.word	0x08007b27
 8007a74:	08007b27 	.word	0x08007b27
 8007a78:	08007af3 	.word	0x08007af3
 8007a7c:	08007b27 	.word	0x08007b27
 8007a80:	08007b27 	.word	0x08007b27
 8007a84:	08007b27 	.word	0x08007b27
 8007a88:	08007b27 	.word	0x08007b27
 8007a8c:	08007b27 	.word	0x08007b27
 8007a90:	08007b27 	.word	0x08007b27
 8007a94:	08007b27 	.word	0x08007b27
 8007a98:	08007b27 	.word	0x08007b27
 8007a9c:	08007b27 	.word	0x08007b27
 8007aa0:	08007b27 	.word	0x08007b27
 8007aa4:	08007b27 	.word	0x08007b27
 8007aa8:	08007b27 	.word	0x08007b27
 8007aac:	08007b27 	.word	0x08007b27
 8007ab0:	08007b27 	.word	0x08007b27
 8007ab4:	08007b27 	.word	0x08007b27
 8007ab8:	08007b19 	.word	0x08007b19
 8007abc:	2b40      	cmp	r3, #64	; 0x40
 8007abe:	d02e      	beq.n	8007b1e <UART_SetConfig+0xab2>
 8007ac0:	e031      	b.n	8007b26 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac2:	f7fb ff2f 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8007ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ac8:	e033      	b.n	8007b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aca:	f7fb ff41 	bl	8003950 <HAL_RCC_GetPCLK2Freq>
 8007ace:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ad0:	e02f      	b.n	8007b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fd f924 	bl	8004d24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae0:	e027      	b.n	8007b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ae2:	f107 0318 	add.w	r3, r7, #24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fa70 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af0:	e01f      	b.n	8007b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af2:	4b69      	ldr	r3, [pc, #420]	; (8007c98 <UART_SetConfig+0xc2c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007afe:	4b66      	ldr	r3, [pc, #408]	; (8007c98 <UART_SetConfig+0xc2c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	08db      	lsrs	r3, r3, #3
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	4a64      	ldr	r2, [pc, #400]	; (8007c9c <UART_SetConfig+0xc30>)
 8007b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b10:	e00f      	b.n	8007b32 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007b12:	4b62      	ldr	r3, [pc, #392]	; (8007c9c <UART_SetConfig+0xc30>)
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b16:	e00c      	b.n	8007b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b18:	4b61      	ldr	r3, [pc, #388]	; (8007ca0 <UART_SetConfig+0xc34>)
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1c:	e009      	b.n	8007b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b24:	e005      	b.n	8007b32 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80ea 	beq.w	8007d0e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	4a55      	ldr	r2, [pc, #340]	; (8007c94 <UART_SetConfig+0xc28>)
 8007b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b4c:	005a      	lsls	r2, r3, #1
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	085b      	lsrs	r3, r3, #1
 8007b54:	441a      	add	r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	2b0f      	cmp	r3, #15
 8007b64:	d916      	bls.n	8007b94 <UART_SetConfig+0xb28>
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6c:	d212      	bcs.n	8007b94 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f023 030f 	bic.w	r3, r3, #15
 8007b76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b86:	4313      	orrs	r3, r2
 8007b88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007b90:	60da      	str	r2, [r3, #12]
 8007b92:	e0bc      	b.n	8007d0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007b9a:	e0b8      	b.n	8007d0e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	dc4b      	bgt.n	8007c3c <UART_SetConfig+0xbd0>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f2c0 8087 	blt.w	8007cb8 <UART_SetConfig+0xc4c>
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	f200 8084 	bhi.w	8007cb8 <UART_SetConfig+0xc4c>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <UART_SetConfig+0xb4c>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007c43 	.word	0x08007c43
 8007bbc:	08007c4b 	.word	0x08007c4b
 8007bc0:	08007cb9 	.word	0x08007cb9
 8007bc4:	08007cb9 	.word	0x08007cb9
 8007bc8:	08007c53 	.word	0x08007c53
 8007bcc:	08007cb9 	.word	0x08007cb9
 8007bd0:	08007cb9 	.word	0x08007cb9
 8007bd4:	08007cb9 	.word	0x08007cb9
 8007bd8:	08007c63 	.word	0x08007c63
 8007bdc:	08007cb9 	.word	0x08007cb9
 8007be0:	08007cb9 	.word	0x08007cb9
 8007be4:	08007cb9 	.word	0x08007cb9
 8007be8:	08007cb9 	.word	0x08007cb9
 8007bec:	08007cb9 	.word	0x08007cb9
 8007bf0:	08007cb9 	.word	0x08007cb9
 8007bf4:	08007cb9 	.word	0x08007cb9
 8007bf8:	08007c73 	.word	0x08007c73
 8007bfc:	08007cb9 	.word	0x08007cb9
 8007c00:	08007cb9 	.word	0x08007cb9
 8007c04:	08007cb9 	.word	0x08007cb9
 8007c08:	08007cb9 	.word	0x08007cb9
 8007c0c:	08007cb9 	.word	0x08007cb9
 8007c10:	08007cb9 	.word	0x08007cb9
 8007c14:	08007cb9 	.word	0x08007cb9
 8007c18:	08007cb9 	.word	0x08007cb9
 8007c1c:	08007cb9 	.word	0x08007cb9
 8007c20:	08007cb9 	.word	0x08007cb9
 8007c24:	08007cb9 	.word	0x08007cb9
 8007c28:	08007cb9 	.word	0x08007cb9
 8007c2c:	08007cb9 	.word	0x08007cb9
 8007c30:	08007cb9 	.word	0x08007cb9
 8007c34:	08007cb9 	.word	0x08007cb9
 8007c38:	08007cab 	.word	0x08007cab
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	d037      	beq.n	8007cb0 <UART_SetConfig+0xc44>
 8007c40:	e03a      	b.n	8007cb8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c42:	f7fb fe6f 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8007c46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c48:	e03c      	b.n	8007cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c4a:	f7fb fe81 	bl	8003950 <HAL_RCC_GetPCLK2Freq>
 8007c4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007c50:	e038      	b.n	8007cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd f864 	bl	8004d24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c60:	e030      	b.n	8007cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd f9b0 	bl	8004fcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c70:	e028      	b.n	8007cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <UART_SetConfig+0xc2c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d012      	beq.n	8007ca4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c7e:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <UART_SetConfig+0xc2c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <UART_SetConfig+0xc30>)
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c90:	e018      	b.n	8007cc4 <UART_SetConfig+0xc58>
 8007c92:	bf00      	nop
 8007c94:	08009a90 	.word	0x08009a90
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	03d09000 	.word	0x03d09000
 8007ca0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007ca4:	4b24      	ldr	r3, [pc, #144]	; (8007d38 <UART_SetConfig+0xccc>)
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca8:	e00c      	b.n	8007cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007caa:	4b24      	ldr	r3, [pc, #144]	; (8007d3c <UART_SetConfig+0xcd0>)
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cae:	e009      	b.n	8007cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cb6:	e005      	b.n	8007cc4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007cc2:	bf00      	nop
    }

    if (pclk != 0U)
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d021      	beq.n	8007d0e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	4a1c      	ldr	r2, [pc, #112]	; (8007d40 <UART_SetConfig+0xcd4>)
 8007cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	085b      	lsrs	r3, r3, #1
 8007ce2:	441a      	add	r2, r3
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2b0f      	cmp	r3, #15
 8007cf2:	d909      	bls.n	8007d08 <UART_SetConfig+0xc9c>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfa:	d205      	bcs.n	8007d08 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60da      	str	r2, [r3, #12]
 8007d06:	e002      	b.n	8007d0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2200      	movs	r2, #0
 8007d22:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2200      	movs	r2, #0
 8007d28:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007d2a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3748      	adds	r7, #72	; 0x48
 8007d32:	46bd      	mov	sp, r7
 8007d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d38:	03d09000 	.word	0x03d09000
 8007d3c:	003d0900 	.word	0x003d0900
 8007d40:	08009a90 	.word	0x08009a90

08007d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01a      	beq.n	8007e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e42:	d10a      	bne.n	8007e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	605a      	str	r2, [r3, #4]
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b098      	sub	sp, #96	; 0x60
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e98:	f7f9 fcd0 	bl	800183c <HAL_GetTick>
 8007e9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d12f      	bne.n	8007f0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f88e 	bl	8007fdc <UART_WaitOnFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d022      	beq.n	8007f0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eda:	653b      	str	r3, [r7, #80]	; 0x50
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e6      	bne.n	8007ec6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2220      	movs	r2, #32
 8007efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e063      	b.n	8007fd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d149      	bne.n	8007fae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f22:	2200      	movs	r2, #0
 8007f24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f857 	bl	8007fdc <UART_WaitOnFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d03c      	beq.n	8007fae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	623b      	str	r3, [r7, #32]
   return(result);
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f52:	633b      	str	r3, [r7, #48]	; 0x30
 8007f54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e6      	bne.n	8007f34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3308      	adds	r3, #8
 8007f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f86:	61fa      	str	r2, [r7, #28]
 8007f88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	69b9      	ldr	r1, [r7, #24]
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	617b      	str	r3, [r7, #20]
   return(result);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e5      	bne.n	8007f66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e012      	b.n	8007fd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3758      	adds	r7, #88	; 0x58
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fec:	e049      	b.n	8008082 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ff4:	d045      	beq.n	8008082 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff6:	f7f9 fc21 	bl	800183c <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	429a      	cmp	r2, r3
 8008004:	d302      	bcc.n	800800c <UART_WaitOnFlagUntilTimeout+0x30>
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e048      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	d031      	beq.n	8008082 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b08      	cmp	r3, #8
 800802a:	d110      	bne.n	800804e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2208      	movs	r2, #8
 8008032:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f95b 	bl	80082f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2208      	movs	r2, #8
 800803e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e029      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800805c:	d111      	bne.n	8008082 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f941 	bl	80082f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e00f      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69da      	ldr	r2, [r3, #28]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4013      	ands	r3, r2
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	429a      	cmp	r2, r3
 8008090:	bf0c      	ite	eq
 8008092:	2301      	moveq	r3, #1
 8008094:	2300      	movne	r3, #0
 8008096:	b2db      	uxtb	r3, r3
 8008098:	461a      	mov	r2, r3
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	429a      	cmp	r2, r3
 800809e:	d0a6      	beq.n	8007fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b0a3      	sub	sp, #140	; 0x8c
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080de:	d10e      	bne.n	80080fe <UART_Start_Receive_IT+0x52>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <UART_Start_Receive_IT+0x48>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080f2:	e02d      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	22ff      	movs	r2, #255	; 0xff
 80080f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080fc:	e028      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10d      	bne.n	8008122 <UART_Start_Receive_IT+0x76>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d104      	bne.n	8008118 <UART_Start_Receive_IT+0x6c>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	22ff      	movs	r2, #255	; 0xff
 8008112:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008116:	e01b      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	227f      	movs	r2, #127	; 0x7f
 800811c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008120:	e016      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800812a:	d10d      	bne.n	8008148 <UART_Start_Receive_IT+0x9c>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <UART_Start_Receive_IT+0x92>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	227f      	movs	r2, #127	; 0x7f
 8008138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800813c:	e008      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	223f      	movs	r2, #63	; 0x3f
 8008142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008146:	e003      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2222      	movs	r2, #34	; 0x22
 800815c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3308      	adds	r3, #8
 8008166:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008184:	673a      	str	r2, [r7, #112]	; 0x70
 8008186:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800818a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e3      	bne.n	8008160 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a0:	d14f      	bne.n	8008242 <UART_Start_Receive_IT+0x196>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d349      	bcc.n	8008242 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b6:	d107      	bne.n	80081c8 <UART_Start_Receive_IT+0x11c>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a47      	ldr	r2, [pc, #284]	; (80082e0 <UART_Start_Receive_IT+0x234>)
 80081c4:	675a      	str	r2, [r3, #116]	; 0x74
 80081c6:	e002      	b.n	80081ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a46      	ldr	r2, [pc, #280]	; (80082e4 <UART_Start_Receive_IT+0x238>)
 80081cc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d01a      	beq.n	800820c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e4      	bne.n	80081d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3308      	adds	r3, #8
 8008212:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008222:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3308      	adds	r3, #8
 800822a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800822c:	64ba      	str	r2, [r7, #72]	; 0x48
 800822e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800823a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e5      	bne.n	800820c <UART_Start_Receive_IT+0x160>
 8008240:	e046      	b.n	80082d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d107      	bne.n	800825c <UART_Start_Receive_IT+0x1b0>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d103      	bne.n	800825c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4a24      	ldr	r2, [pc, #144]	; (80082e8 <UART_Start_Receive_IT+0x23c>)
 8008258:	675a      	str	r2, [r3, #116]	; 0x74
 800825a:	e002      	b.n	8008262 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4a23      	ldr	r2, [pc, #140]	; (80082ec <UART_Start_Receive_IT+0x240>)
 8008260:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d019      	beq.n	800829e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800827e:	677b      	str	r3, [r7, #116]	; 0x74
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008288:	637b      	str	r3, [r7, #52]	; 0x34
 800828a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800828e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e6      	bne.n	800826a <UART_Start_Receive_IT+0x1be>
 800829c:	e018      	b.n	80082d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	613b      	str	r3, [r7, #16]
   return(result);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f043 0320 	orr.w	r3, r3, #32
 80082b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082bc:	623b      	str	r3, [r7, #32]
 80082be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	69f9      	ldr	r1, [r7, #28]
 80082c2:	6a3a      	ldr	r2, [r7, #32]
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e6      	bne.n	800829e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	378c      	adds	r7, #140	; 0x8c
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	08008b11 	.word	0x08008b11
 80082e4:	080087b1 	.word	0x080087b1
 80082e8:	080085f9 	.word	0x080085f9
 80082ec:	08008441 	.word	0x08008441

080082f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b095      	sub	sp, #84	; 0x54
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800830c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008316:	643b      	str	r3, [r7, #64]	; 0x40
 8008318:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800831c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e6      	bne.n	80082f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	61fb      	str	r3, [r7, #28]
   return(result);
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	4b1e      	ldr	r3, [pc, #120]	; (80083b8 <UART_EndRxTransfer+0xc8>)
 800833e:	4013      	ands	r3, r2
 8008340:	64bb      	str	r3, [r7, #72]	; 0x48
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800834a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e5      	bne.n	800832a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008362:	2b01      	cmp	r3, #1
 8008364:	d118      	bne.n	8008398 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	60bb      	str	r3, [r7, #8]
   return(result);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f023 0310 	bic.w	r3, r3, #16
 800837a:	647b      	str	r3, [r7, #68]	; 0x44
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008384:	61bb      	str	r3, [r7, #24]
 8008386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6979      	ldr	r1, [r7, #20]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	613b      	str	r3, [r7, #16]
   return(result);
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e6      	bne.n	8008366 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80083ac:	bf00      	nop
 80083ae:	3754      	adds	r7, #84	; 0x54
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	effffffe 	.word	0xeffffffe

080083bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7fe fe30 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	61bb      	str	r3, [r7, #24]
 8008410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6979      	ldr	r1, [r7, #20]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	613b      	str	r3, [r7, #16]
   return(result);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fe fdfb 	bl	800702c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008436:	bf00      	nop
 8008438:	3720      	adds	r7, #32
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b09c      	sub	sp, #112	; 0x70
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800844e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008458:	2b22      	cmp	r3, #34	; 0x22
 800845a:	f040 80be 	bne.w	80085da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008468:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800846c:	b2d9      	uxtb	r1, r3
 800846e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008478:	400a      	ands	r2, r1
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f040 80a1 	bne.w	80085ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e6      	bne.n	80084a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	667b      	str	r3, [r7, #100]	; 0x64
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084fa:	647a      	str	r2, [r7, #68]	; 0x44
 80084fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e5      	bne.n	80084da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a33      	ldr	r2, [pc, #204]	; (80085f4 <UART_RxISR_8BIT+0x1b4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d01f      	beq.n	800856c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d018      	beq.n	800856c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	623b      	str	r3, [r7, #32]
   return(result);
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800854e:	663b      	str	r3, [r7, #96]	; 0x60
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008558:	633b      	str	r3, [r7, #48]	; 0x30
 800855a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800855e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e6      	bne.n	800853a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d12e      	bne.n	80085d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	60fb      	str	r3, [r7, #12]
   return(result);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0310 	bic.w	r3, r3, #16
 800858e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	69b9      	ldr	r1, [r7, #24]
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	617b      	str	r3, [r7, #20]
   return(result);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	f003 0310 	and.w	r3, r3, #16
 80085b6:	2b10      	cmp	r3, #16
 80085b8:	d103      	bne.n	80085c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2210      	movs	r2, #16
 80085c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7fe fd42 	bl	8007054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085d0:	e00b      	b.n	80085ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7f9 f864 	bl	80016a0 <HAL_UART_RxCpltCallback>
}
 80085d8:	e007      	b.n	80085ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699a      	ldr	r2, [r3, #24]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0208 	orr.w	r2, r2, #8
 80085e8:	619a      	str	r2, [r3, #24]
}
 80085ea:	bf00      	nop
 80085ec:	3770      	adds	r7, #112	; 0x70
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	58000c00 	.word	0x58000c00

080085f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b09c      	sub	sp, #112	; 0x70
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008606:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008610:	2b22      	cmp	r3, #34	; 0x22
 8008612:	f040 80be 	bne.w	8008792 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008624:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008626:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800862a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800862e:	4013      	ands	r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008634:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	f040 80a1 	bne.w	80087a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800866e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008674:	667b      	str	r3, [r7, #100]	; 0x64
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800867e:	657b      	str	r3, [r7, #84]	; 0x54
 8008680:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800868c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e6      	bne.n	8008660 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	f023 0301 	bic.w	r3, r3, #1
 80086a8:	663b      	str	r3, [r7, #96]	; 0x60
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086b2:	643a      	str	r2, [r7, #64]	; 0x40
 80086b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e5      	bne.n	8008692 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a33      	ldr	r2, [pc, #204]	; (80087ac <UART_RxISR_16BIT+0x1b4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d01f      	beq.n	8008724 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d018      	beq.n	8008724 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008712:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e6      	bne.n	80086f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008728:	2b01      	cmp	r3, #1
 800872a:	d12e      	bne.n	800878a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f023 0310 	bic.w	r3, r3, #16
 8008746:	65bb      	str	r3, [r7, #88]	; 0x58
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6979      	ldr	r1, [r7, #20]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	613b      	str	r3, [r7, #16]
   return(result);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e6      	bne.n	8008732 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f003 0310 	and.w	r3, r3, #16
 800876e:	2b10      	cmp	r3, #16
 8008770:	d103      	bne.n	800877a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2210      	movs	r2, #16
 8008778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fe fc66 	bl	8007054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008788:	e00b      	b.n	80087a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7f8 ff88 	bl	80016a0 <HAL_UART_RxCpltCallback>
}
 8008790:	e007      	b.n	80087a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0208 	orr.w	r2, r2, #8
 80087a0:	619a      	str	r2, [r3, #24]
}
 80087a2:	bf00      	nop
 80087a4:	3770      	adds	r7, #112	; 0x70
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	58000c00 	.word	0x58000c00

080087b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b0ac      	sub	sp, #176	; 0xb0
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087e6:	2b22      	cmp	r3, #34	; 0x22
 80087e8:	f040 8180 	bne.w	8008aec <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087f6:	e123      	b.n	8008a40 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008802:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008806:	b2d9      	uxtb	r1, r3
 8008808:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800880c:	b2da      	uxtb	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	400a      	ands	r2, r1
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800883e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	2b00      	cmp	r3, #0
 8008848:	d053      	beq.n	80088f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800884a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d011      	beq.n	800887a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800885a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2201      	movs	r2, #1
 8008868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008870:	f043 0201 	orr.w	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800887a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d011      	beq.n	80088aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2202      	movs	r2, #2
 8008898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a0:	f043 0204 	orr.w	r2, r3, #4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ae:	f003 0304 	and.w	r3, r3, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d011      	beq.n	80088da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80088b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2204      	movs	r2, #4
 80088c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d0:	f043 0202 	orr.w	r2, r3, #2
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d006      	beq.n	80088f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fe fbab 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 80a0 	bne.w	8008a40 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800890e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008922:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008924:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008928:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e4      	bne.n	8008900 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008948:	4b6e      	ldr	r3, [pc, #440]	; (8008b04 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800894a:	4013      	ands	r3, r2
 800894c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800895a:	66ba      	str	r2, [r7, #104]	; 0x68
 800895c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e3      	bne.n	8008936 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a60      	ldr	r2, [pc, #384]	; (8008b08 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d021      	beq.n	80089d0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d01a      	beq.n	80089d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80089a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089bc:	657b      	str	r3, [r7, #84]	; 0x54
 80089be:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e4      	bne.n	800899a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d130      	bne.n	8008a3a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e6:	e853 3f00 	ldrex	r3, [r3]
 80089ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	f023 0310 	bic.w	r3, r3, #16
 80089f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a00:	643b      	str	r3, [r7, #64]	; 0x40
 8008a02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a08:	e841 2300 	strex	r3, r2, [r1]
 8008a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e4      	bne.n	80089de <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f003 0310 	and.w	r3, r3, #16
 8008a1e:	2b10      	cmp	r3, #16
 8008a20:	d103      	bne.n	8008a2a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2210      	movs	r2, #16
 8008a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7fe fb0e 	bl	8007054 <HAL_UARTEx_RxEventCallback>
 8008a38:	e002      	b.n	8008a40 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7f8 fe30 	bl	80016a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d006      	beq.n	8008a56 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f47f aed1 	bne.w	80087f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d049      	beq.n	8008afc <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a6e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d242      	bcs.n	8008afc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3308      	adds	r3, #8
 8008a96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e3      	bne.n	8008a76 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a16      	ldr	r2, [pc, #88]	; (8008b0c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008ab2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f043 0320 	orr.w	r3, r3, #32
 8008ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6979      	ldr	r1, [r7, #20]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e4      	bne.n	8008ab4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aea:	e007      	b.n	8008afc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0208 	orr.w	r2, r2, #8
 8008afa:	619a      	str	r2, [r3, #24]
}
 8008afc:	bf00      	nop
 8008afe:	37b0      	adds	r7, #176	; 0xb0
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	effffffe 	.word	0xeffffffe
 8008b08:	58000c00 	.word	0x58000c00
 8008b0c:	08008441 	.word	0x08008441

08008b10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b0ae      	sub	sp, #184	; 0xb8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b46:	2b22      	cmp	r3, #34	; 0x22
 8008b48:	f040 8184 	bne.w	8008e54 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b52:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b56:	e127      	b.n	8008da8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008b6a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008b6e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008b72:	4013      	ands	r3, r2
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b80:	1c9a      	adds	r2, r3, #2
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d053      	beq.n	8008c56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d011      	beq.n	8008bde <UART_RxISR_16BIT_FIFOEN+0xce>
 8008bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00b      	beq.n	8008bde <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd4:	f043 0201 	orr.w	r2, r3, #1
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d011      	beq.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00b      	beq.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c04:	f043 0204 	orr.w	r2, r3, #4
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d011      	beq.n	8008c3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c34:	f043 0202 	orr.w	r2, r3, #2
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d006      	beq.n	8008c56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7fe f9f9 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f040 80a2 	bne.w	8008da8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c8a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e2      	bne.n	8008c64 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cb0:	4b6e      	ldr	r3, [pc, #440]	; (8008e6c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e3      	bne.n	8008c9e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a60      	ldr	r2, [pc, #384]	; (8008e70 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d021      	beq.n	8008d38 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01a      	beq.n	8008d38 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d24:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e4      	bne.n	8008d02 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d130      	bne.n	8008da2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d56:	f023 0310 	bic.w	r3, r3, #16
 8008d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d68:	647b      	str	r3, [r7, #68]	; 0x44
 8008d6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e4      	bne.n	8008d46 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	f003 0310 	and.w	r3, r3, #16
 8008d86:	2b10      	cmp	r3, #16
 8008d88:	d103      	bne.n	8008d92 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2210      	movs	r2, #16
 8008d90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7fe f95a 	bl	8007054 <HAL_UARTEx_RxEventCallback>
 8008da0:	e002      	b.n	8008da8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7f8 fc7c 	bl	80016a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008da8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008db0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f47f aecd 	bne.w	8008b58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dc4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008dc8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d049      	beq.n	8008e64 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dd6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d242      	bcs.n	8008e64 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	623b      	str	r3, [r7, #32]
   return(result);
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008e02:	633a      	str	r2, [r7, #48]	; 0x30
 8008e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e3      	bne.n	8008dde <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a16      	ldr	r2, [pc, #88]	; (8008e74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008e1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f043 0320 	orr.w	r3, r3, #32
 8008e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e3e:	61fb      	str	r3, [r7, #28]
 8008e40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	69b9      	ldr	r1, [r7, #24]
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e4      	bne.n	8008e1c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e52:	e007      	b.n	8008e64 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0208 	orr.w	r2, r2, #8
 8008e62:	619a      	str	r2, [r3, #24]
}
 8008e64:	bf00      	nop
 8008e66:	37b8      	adds	r7, #184	; 0xb8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	effffffe 	.word	0xeffffffe
 8008e70:	58000c00 	.word	0x58000c00
 8008e74:	080085f9 	.word	0x080085f9

08008e78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d101      	bne.n	8008eca <HAL_UARTEx_DisableFifoMode+0x16>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e027      	b.n	8008f1a <HAL_UARTEx_DisableFifoMode+0x66>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2224      	movs	r2, #36	; 0x24
 8008ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0201 	bic.w	r2, r2, #1
 8008ef0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ef8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e02d      	b.n	8008f9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2224      	movs	r2, #36	; 0x24
 8008f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0201 	bic.w	r2, r2, #1
 8008f64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f850 	bl	8009020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fb6:	2302      	movs	r3, #2
 8008fb8:	e02d      	b.n	8009016 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2224      	movs	r2, #36	; 0x24
 8008fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 0201 	bic.w	r2, r2, #1
 8008fe0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f812 	bl	8009020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2220      	movs	r2, #32
 8009008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902c:	2b00      	cmp	r3, #0
 800902e:	d108      	bne.n	8009042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009040:	e031      	b.n	80090a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009042:	2310      	movs	r3, #16
 8009044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009046:	2310      	movs	r3, #16
 8009048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	0e5b      	lsrs	r3, r3, #25
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	0f5b      	lsrs	r3, r3, #29
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	7b3a      	ldrb	r2, [r7, #12]
 800906e:	4911      	ldr	r1, [pc, #68]	; (80090b4 <UARTEx_SetNbDataToProcess+0x94>)
 8009070:	5c8a      	ldrb	r2, [r1, r2]
 8009072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009076:	7b3a      	ldrb	r2, [r7, #12]
 8009078:	490f      	ldr	r1, [pc, #60]	; (80090b8 <UARTEx_SetNbDataToProcess+0x98>)
 800907a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800907c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009080:	b29a      	uxth	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	7b7a      	ldrb	r2, [r7, #13]
 800908c:	4909      	ldr	r1, [pc, #36]	; (80090b4 <UARTEx_SetNbDataToProcess+0x94>)
 800908e:	5c8a      	ldrb	r2, [r1, r2]
 8009090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009094:	7b7a      	ldrb	r2, [r7, #13]
 8009096:	4908      	ldr	r1, [pc, #32]	; (80090b8 <UARTEx_SetNbDataToProcess+0x98>)
 8009098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800909a:	fb93 f3f2 	sdiv	r3, r3, r2
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80090a6:	bf00      	nop
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	08009aa8 	.word	0x08009aa8
 80090b8:	08009ab0 	.word	0x08009ab0

080090bc <__errno>:
 80090bc:	4b01      	ldr	r3, [pc, #4]	; (80090c4 <__errno+0x8>)
 80090be:	6818      	ldr	r0, [r3, #0]
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	24000020 	.word	0x24000020

080090c8 <__libc_init_array>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4d0d      	ldr	r5, [pc, #52]	; (8009100 <__libc_init_array+0x38>)
 80090cc:	4c0d      	ldr	r4, [pc, #52]	; (8009104 <__libc_init_array+0x3c>)
 80090ce:	1b64      	subs	r4, r4, r5
 80090d0:	10a4      	asrs	r4, r4, #2
 80090d2:	2600      	movs	r6, #0
 80090d4:	42a6      	cmp	r6, r4
 80090d6:	d109      	bne.n	80090ec <__libc_init_array+0x24>
 80090d8:	4d0b      	ldr	r5, [pc, #44]	; (8009108 <__libc_init_array+0x40>)
 80090da:	4c0c      	ldr	r4, [pc, #48]	; (800910c <__libc_init_array+0x44>)
 80090dc:	f000 fca2 	bl	8009a24 <_init>
 80090e0:	1b64      	subs	r4, r4, r5
 80090e2:	10a4      	asrs	r4, r4, #2
 80090e4:	2600      	movs	r6, #0
 80090e6:	42a6      	cmp	r6, r4
 80090e8:	d105      	bne.n	80090f6 <__libc_init_array+0x2e>
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f0:	4798      	blx	r3
 80090f2:	3601      	adds	r6, #1
 80090f4:	e7ee      	b.n	80090d4 <__libc_init_array+0xc>
 80090f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fa:	4798      	blx	r3
 80090fc:	3601      	adds	r6, #1
 80090fe:	e7f2      	b.n	80090e6 <__libc_init_array+0x1e>
 8009100:	08009af4 	.word	0x08009af4
 8009104:	08009af4 	.word	0x08009af4
 8009108:	08009af4 	.word	0x08009af4
 800910c:	08009af8 	.word	0x08009af8

08009110 <memset>:
 8009110:	4402      	add	r2, r0
 8009112:	4603      	mov	r3, r0
 8009114:	4293      	cmp	r3, r2
 8009116:	d100      	bne.n	800911a <memset+0xa>
 8009118:	4770      	bx	lr
 800911a:	f803 1b01 	strb.w	r1, [r3], #1
 800911e:	e7f9      	b.n	8009114 <memset+0x4>

08009120 <sniprintf>:
 8009120:	b40c      	push	{r2, r3}
 8009122:	b530      	push	{r4, r5, lr}
 8009124:	4b17      	ldr	r3, [pc, #92]	; (8009184 <sniprintf+0x64>)
 8009126:	1e0c      	subs	r4, r1, #0
 8009128:	681d      	ldr	r5, [r3, #0]
 800912a:	b09d      	sub	sp, #116	; 0x74
 800912c:	da08      	bge.n	8009140 <sniprintf+0x20>
 800912e:	238b      	movs	r3, #139	; 0x8b
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009136:	b01d      	add	sp, #116	; 0x74
 8009138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800913c:	b002      	add	sp, #8
 800913e:	4770      	bx	lr
 8009140:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009144:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009148:	bf14      	ite	ne
 800914a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800914e:	4623      	moveq	r3, r4
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	9307      	str	r3, [sp, #28]
 8009154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009158:	9002      	str	r0, [sp, #8]
 800915a:	9006      	str	r0, [sp, #24]
 800915c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009162:	ab21      	add	r3, sp, #132	; 0x84
 8009164:	a902      	add	r1, sp, #8
 8009166:	4628      	mov	r0, r5
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	f000 f869 	bl	8009240 <_svfiprintf_r>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	bfbc      	itt	lt
 8009172:	238b      	movlt	r3, #139	; 0x8b
 8009174:	602b      	strlt	r3, [r5, #0]
 8009176:	2c00      	cmp	r4, #0
 8009178:	d0dd      	beq.n	8009136 <sniprintf+0x16>
 800917a:	9b02      	ldr	r3, [sp, #8]
 800917c:	2200      	movs	r2, #0
 800917e:	701a      	strb	r2, [r3, #0]
 8009180:	e7d9      	b.n	8009136 <sniprintf+0x16>
 8009182:	bf00      	nop
 8009184:	24000020 	.word	0x24000020

08009188 <__ssputs_r>:
 8009188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	688e      	ldr	r6, [r1, #8]
 800918e:	429e      	cmp	r6, r3
 8009190:	4682      	mov	sl, r0
 8009192:	460c      	mov	r4, r1
 8009194:	4690      	mov	r8, r2
 8009196:	461f      	mov	r7, r3
 8009198:	d838      	bhi.n	800920c <__ssputs_r+0x84>
 800919a:	898a      	ldrh	r2, [r1, #12]
 800919c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091a0:	d032      	beq.n	8009208 <__ssputs_r+0x80>
 80091a2:	6825      	ldr	r5, [r4, #0]
 80091a4:	6909      	ldr	r1, [r1, #16]
 80091a6:	eba5 0901 	sub.w	r9, r5, r1
 80091aa:	6965      	ldr	r5, [r4, #20]
 80091ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b4:	3301      	adds	r3, #1
 80091b6:	444b      	add	r3, r9
 80091b8:	106d      	asrs	r5, r5, #1
 80091ba:	429d      	cmp	r5, r3
 80091bc:	bf38      	it	cc
 80091be:	461d      	movcc	r5, r3
 80091c0:	0553      	lsls	r3, r2, #21
 80091c2:	d531      	bpl.n	8009228 <__ssputs_r+0xa0>
 80091c4:	4629      	mov	r1, r5
 80091c6:	f000 fb63 	bl	8009890 <_malloc_r>
 80091ca:	4606      	mov	r6, r0
 80091cc:	b950      	cbnz	r0, 80091e4 <__ssputs_r+0x5c>
 80091ce:	230c      	movs	r3, #12
 80091d0:	f8ca 3000 	str.w	r3, [sl]
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e4:	6921      	ldr	r1, [r4, #16]
 80091e6:	464a      	mov	r2, r9
 80091e8:	f000 fabe 	bl	8009768 <memcpy>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	6126      	str	r6, [r4, #16]
 80091fa:	6165      	str	r5, [r4, #20]
 80091fc:	444e      	add	r6, r9
 80091fe:	eba5 0509 	sub.w	r5, r5, r9
 8009202:	6026      	str	r6, [r4, #0]
 8009204:	60a5      	str	r5, [r4, #8]
 8009206:	463e      	mov	r6, r7
 8009208:	42be      	cmp	r6, r7
 800920a:	d900      	bls.n	800920e <__ssputs_r+0x86>
 800920c:	463e      	mov	r6, r7
 800920e:	6820      	ldr	r0, [r4, #0]
 8009210:	4632      	mov	r2, r6
 8009212:	4641      	mov	r1, r8
 8009214:	f000 fab6 	bl	8009784 <memmove>
 8009218:	68a3      	ldr	r3, [r4, #8]
 800921a:	1b9b      	subs	r3, r3, r6
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	4433      	add	r3, r6
 8009222:	6023      	str	r3, [r4, #0]
 8009224:	2000      	movs	r0, #0
 8009226:	e7db      	b.n	80091e0 <__ssputs_r+0x58>
 8009228:	462a      	mov	r2, r5
 800922a:	f000 fba5 	bl	8009978 <_realloc_r>
 800922e:	4606      	mov	r6, r0
 8009230:	2800      	cmp	r0, #0
 8009232:	d1e1      	bne.n	80091f8 <__ssputs_r+0x70>
 8009234:	6921      	ldr	r1, [r4, #16]
 8009236:	4650      	mov	r0, sl
 8009238:	f000 fabe 	bl	80097b8 <_free_r>
 800923c:	e7c7      	b.n	80091ce <__ssputs_r+0x46>
	...

08009240 <_svfiprintf_r>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	4698      	mov	r8, r3
 8009246:	898b      	ldrh	r3, [r1, #12]
 8009248:	061b      	lsls	r3, r3, #24
 800924a:	b09d      	sub	sp, #116	; 0x74
 800924c:	4607      	mov	r7, r0
 800924e:	460d      	mov	r5, r1
 8009250:	4614      	mov	r4, r2
 8009252:	d50e      	bpl.n	8009272 <_svfiprintf_r+0x32>
 8009254:	690b      	ldr	r3, [r1, #16]
 8009256:	b963      	cbnz	r3, 8009272 <_svfiprintf_r+0x32>
 8009258:	2140      	movs	r1, #64	; 0x40
 800925a:	f000 fb19 	bl	8009890 <_malloc_r>
 800925e:	6028      	str	r0, [r5, #0]
 8009260:	6128      	str	r0, [r5, #16]
 8009262:	b920      	cbnz	r0, 800926e <_svfiprintf_r+0x2e>
 8009264:	230c      	movs	r3, #12
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800926c:	e0d1      	b.n	8009412 <_svfiprintf_r+0x1d2>
 800926e:	2340      	movs	r3, #64	; 0x40
 8009270:	616b      	str	r3, [r5, #20]
 8009272:	2300      	movs	r3, #0
 8009274:	9309      	str	r3, [sp, #36]	; 0x24
 8009276:	2320      	movs	r3, #32
 8009278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800927c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009280:	2330      	movs	r3, #48	; 0x30
 8009282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800942c <_svfiprintf_r+0x1ec>
 8009286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800928a:	f04f 0901 	mov.w	r9, #1
 800928e:	4623      	mov	r3, r4
 8009290:	469a      	mov	sl, r3
 8009292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009296:	b10a      	cbz	r2, 800929c <_svfiprintf_r+0x5c>
 8009298:	2a25      	cmp	r2, #37	; 0x25
 800929a:	d1f9      	bne.n	8009290 <_svfiprintf_r+0x50>
 800929c:	ebba 0b04 	subs.w	fp, sl, r4
 80092a0:	d00b      	beq.n	80092ba <_svfiprintf_r+0x7a>
 80092a2:	465b      	mov	r3, fp
 80092a4:	4622      	mov	r2, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7ff ff6d 	bl	8009188 <__ssputs_r>
 80092ae:	3001      	adds	r0, #1
 80092b0:	f000 80aa 	beq.w	8009408 <_svfiprintf_r+0x1c8>
 80092b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b6:	445a      	add	r2, fp
 80092b8:	9209      	str	r2, [sp, #36]	; 0x24
 80092ba:	f89a 3000 	ldrb.w	r3, [sl]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 80a2 	beq.w	8009408 <_svfiprintf_r+0x1c8>
 80092c4:	2300      	movs	r3, #0
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ce:	f10a 0a01 	add.w	sl, sl, #1
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	9307      	str	r3, [sp, #28]
 80092d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092da:	931a      	str	r3, [sp, #104]	; 0x68
 80092dc:	4654      	mov	r4, sl
 80092de:	2205      	movs	r2, #5
 80092e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e4:	4851      	ldr	r0, [pc, #324]	; (800942c <_svfiprintf_r+0x1ec>)
 80092e6:	f7f7 f803 	bl	80002f0 <memchr>
 80092ea:	9a04      	ldr	r2, [sp, #16]
 80092ec:	b9d8      	cbnz	r0, 8009326 <_svfiprintf_r+0xe6>
 80092ee:	06d0      	lsls	r0, r2, #27
 80092f0:	bf44      	itt	mi
 80092f2:	2320      	movmi	r3, #32
 80092f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f8:	0711      	lsls	r1, r2, #28
 80092fa:	bf44      	itt	mi
 80092fc:	232b      	movmi	r3, #43	; 0x2b
 80092fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009302:	f89a 3000 	ldrb.w	r3, [sl]
 8009306:	2b2a      	cmp	r3, #42	; 0x2a
 8009308:	d015      	beq.n	8009336 <_svfiprintf_r+0xf6>
 800930a:	9a07      	ldr	r2, [sp, #28]
 800930c:	4654      	mov	r4, sl
 800930e:	2000      	movs	r0, #0
 8009310:	f04f 0c0a 	mov.w	ip, #10
 8009314:	4621      	mov	r1, r4
 8009316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800931a:	3b30      	subs	r3, #48	; 0x30
 800931c:	2b09      	cmp	r3, #9
 800931e:	d94e      	bls.n	80093be <_svfiprintf_r+0x17e>
 8009320:	b1b0      	cbz	r0, 8009350 <_svfiprintf_r+0x110>
 8009322:	9207      	str	r2, [sp, #28]
 8009324:	e014      	b.n	8009350 <_svfiprintf_r+0x110>
 8009326:	eba0 0308 	sub.w	r3, r0, r8
 800932a:	fa09 f303 	lsl.w	r3, r9, r3
 800932e:	4313      	orrs	r3, r2
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	46a2      	mov	sl, r4
 8009334:	e7d2      	b.n	80092dc <_svfiprintf_r+0x9c>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	1d19      	adds	r1, r3, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	9103      	str	r1, [sp, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	bfbb      	ittet	lt
 8009342:	425b      	neglt	r3, r3
 8009344:	f042 0202 	orrlt.w	r2, r2, #2
 8009348:	9307      	strge	r3, [sp, #28]
 800934a:	9307      	strlt	r3, [sp, #28]
 800934c:	bfb8      	it	lt
 800934e:	9204      	strlt	r2, [sp, #16]
 8009350:	7823      	ldrb	r3, [r4, #0]
 8009352:	2b2e      	cmp	r3, #46	; 0x2e
 8009354:	d10c      	bne.n	8009370 <_svfiprintf_r+0x130>
 8009356:	7863      	ldrb	r3, [r4, #1]
 8009358:	2b2a      	cmp	r3, #42	; 0x2a
 800935a:	d135      	bne.n	80093c8 <_svfiprintf_r+0x188>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	1d1a      	adds	r2, r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	9203      	str	r2, [sp, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	bfb8      	it	lt
 8009368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800936c:	3402      	adds	r4, #2
 800936e:	9305      	str	r3, [sp, #20]
 8009370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800943c <_svfiprintf_r+0x1fc>
 8009374:	7821      	ldrb	r1, [r4, #0]
 8009376:	2203      	movs	r2, #3
 8009378:	4650      	mov	r0, sl
 800937a:	f7f6 ffb9 	bl	80002f0 <memchr>
 800937e:	b140      	cbz	r0, 8009392 <_svfiprintf_r+0x152>
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	eba0 000a 	sub.w	r0, r0, sl
 8009386:	fa03 f000 	lsl.w	r0, r3, r0
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	4303      	orrs	r3, r0
 800938e:	3401      	adds	r4, #1
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009396:	4826      	ldr	r0, [pc, #152]	; (8009430 <_svfiprintf_r+0x1f0>)
 8009398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800939c:	2206      	movs	r2, #6
 800939e:	f7f6 ffa7 	bl	80002f0 <memchr>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d038      	beq.n	8009418 <_svfiprintf_r+0x1d8>
 80093a6:	4b23      	ldr	r3, [pc, #140]	; (8009434 <_svfiprintf_r+0x1f4>)
 80093a8:	bb1b      	cbnz	r3, 80093f2 <_svfiprintf_r+0x1b2>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	3307      	adds	r3, #7
 80093ae:	f023 0307 	bic.w	r3, r3, #7
 80093b2:	3308      	adds	r3, #8
 80093b4:	9303      	str	r3, [sp, #12]
 80093b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b8:	4433      	add	r3, r6
 80093ba:	9309      	str	r3, [sp, #36]	; 0x24
 80093bc:	e767      	b.n	800928e <_svfiprintf_r+0x4e>
 80093be:	fb0c 3202 	mla	r2, ip, r2, r3
 80093c2:	460c      	mov	r4, r1
 80093c4:	2001      	movs	r0, #1
 80093c6:	e7a5      	b.n	8009314 <_svfiprintf_r+0xd4>
 80093c8:	2300      	movs	r3, #0
 80093ca:	3401      	adds	r4, #1
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	4619      	mov	r1, r3
 80093d0:	f04f 0c0a 	mov.w	ip, #10
 80093d4:	4620      	mov	r0, r4
 80093d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093da:	3a30      	subs	r2, #48	; 0x30
 80093dc:	2a09      	cmp	r2, #9
 80093de:	d903      	bls.n	80093e8 <_svfiprintf_r+0x1a8>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0c5      	beq.n	8009370 <_svfiprintf_r+0x130>
 80093e4:	9105      	str	r1, [sp, #20]
 80093e6:	e7c3      	b.n	8009370 <_svfiprintf_r+0x130>
 80093e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ec:	4604      	mov	r4, r0
 80093ee:	2301      	movs	r3, #1
 80093f0:	e7f0      	b.n	80093d4 <_svfiprintf_r+0x194>
 80093f2:	ab03      	add	r3, sp, #12
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	462a      	mov	r2, r5
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <_svfiprintf_r+0x1f8>)
 80093fa:	a904      	add	r1, sp, #16
 80093fc:	4638      	mov	r0, r7
 80093fe:	f3af 8000 	nop.w
 8009402:	1c42      	adds	r2, r0, #1
 8009404:	4606      	mov	r6, r0
 8009406:	d1d6      	bne.n	80093b6 <_svfiprintf_r+0x176>
 8009408:	89ab      	ldrh	r3, [r5, #12]
 800940a:	065b      	lsls	r3, r3, #25
 800940c:	f53f af2c 	bmi.w	8009268 <_svfiprintf_r+0x28>
 8009410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009412:	b01d      	add	sp, #116	; 0x74
 8009414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009418:	ab03      	add	r3, sp, #12
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	462a      	mov	r2, r5
 800941e:	4b06      	ldr	r3, [pc, #24]	; (8009438 <_svfiprintf_r+0x1f8>)
 8009420:	a904      	add	r1, sp, #16
 8009422:	4638      	mov	r0, r7
 8009424:	f000 f87a 	bl	800951c <_printf_i>
 8009428:	e7eb      	b.n	8009402 <_svfiprintf_r+0x1c2>
 800942a:	bf00      	nop
 800942c:	08009ab8 	.word	0x08009ab8
 8009430:	08009ac2 	.word	0x08009ac2
 8009434:	00000000 	.word	0x00000000
 8009438:	08009189 	.word	0x08009189
 800943c:	08009abe 	.word	0x08009abe

08009440 <_printf_common>:
 8009440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009444:	4616      	mov	r6, r2
 8009446:	4699      	mov	r9, r3
 8009448:	688a      	ldr	r2, [r1, #8]
 800944a:	690b      	ldr	r3, [r1, #16]
 800944c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009450:	4293      	cmp	r3, r2
 8009452:	bfb8      	it	lt
 8009454:	4613      	movlt	r3, r2
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800945c:	4607      	mov	r7, r0
 800945e:	460c      	mov	r4, r1
 8009460:	b10a      	cbz	r2, 8009466 <_printf_common+0x26>
 8009462:	3301      	adds	r3, #1
 8009464:	6033      	str	r3, [r6, #0]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	0699      	lsls	r1, r3, #26
 800946a:	bf42      	ittt	mi
 800946c:	6833      	ldrmi	r3, [r6, #0]
 800946e:	3302      	addmi	r3, #2
 8009470:	6033      	strmi	r3, [r6, #0]
 8009472:	6825      	ldr	r5, [r4, #0]
 8009474:	f015 0506 	ands.w	r5, r5, #6
 8009478:	d106      	bne.n	8009488 <_printf_common+0x48>
 800947a:	f104 0a19 	add.w	sl, r4, #25
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	6832      	ldr	r2, [r6, #0]
 8009482:	1a9b      	subs	r3, r3, r2
 8009484:	42ab      	cmp	r3, r5
 8009486:	dc26      	bgt.n	80094d6 <_printf_common+0x96>
 8009488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800948c:	1e13      	subs	r3, r2, #0
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	bf18      	it	ne
 8009492:	2301      	movne	r3, #1
 8009494:	0692      	lsls	r2, r2, #26
 8009496:	d42b      	bmi.n	80094f0 <_printf_common+0xb0>
 8009498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800949c:	4649      	mov	r1, r9
 800949e:	4638      	mov	r0, r7
 80094a0:	47c0      	blx	r8
 80094a2:	3001      	adds	r0, #1
 80094a4:	d01e      	beq.n	80094e4 <_printf_common+0xa4>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	68e5      	ldr	r5, [r4, #12]
 80094aa:	6832      	ldr	r2, [r6, #0]
 80094ac:	f003 0306 	and.w	r3, r3, #6
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	bf08      	it	eq
 80094b4:	1aad      	subeq	r5, r5, r2
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	6922      	ldr	r2, [r4, #16]
 80094ba:	bf0c      	ite	eq
 80094bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c0:	2500      	movne	r5, #0
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bfc4      	itt	gt
 80094c6:	1a9b      	subgt	r3, r3, r2
 80094c8:	18ed      	addgt	r5, r5, r3
 80094ca:	2600      	movs	r6, #0
 80094cc:	341a      	adds	r4, #26
 80094ce:	42b5      	cmp	r5, r6
 80094d0:	d11a      	bne.n	8009508 <_printf_common+0xc8>
 80094d2:	2000      	movs	r0, #0
 80094d4:	e008      	b.n	80094e8 <_printf_common+0xa8>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	4649      	mov	r1, r9
 80094dc:	4638      	mov	r0, r7
 80094de:	47c0      	blx	r8
 80094e0:	3001      	adds	r0, #1
 80094e2:	d103      	bne.n	80094ec <_printf_common+0xac>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ec:	3501      	adds	r5, #1
 80094ee:	e7c6      	b.n	800947e <_printf_common+0x3e>
 80094f0:	18e1      	adds	r1, r4, r3
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	2030      	movs	r0, #48	; 0x30
 80094f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094fa:	4422      	add	r2, r4
 80094fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009504:	3302      	adds	r3, #2
 8009506:	e7c7      	b.n	8009498 <_printf_common+0x58>
 8009508:	2301      	movs	r3, #1
 800950a:	4622      	mov	r2, r4
 800950c:	4649      	mov	r1, r9
 800950e:	4638      	mov	r0, r7
 8009510:	47c0      	blx	r8
 8009512:	3001      	adds	r0, #1
 8009514:	d0e6      	beq.n	80094e4 <_printf_common+0xa4>
 8009516:	3601      	adds	r6, #1
 8009518:	e7d9      	b.n	80094ce <_printf_common+0x8e>
	...

0800951c <_printf_i>:
 800951c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	7e0f      	ldrb	r7, [r1, #24]
 8009522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009524:	2f78      	cmp	r7, #120	; 0x78
 8009526:	4691      	mov	r9, r2
 8009528:	4680      	mov	r8, r0
 800952a:	460c      	mov	r4, r1
 800952c:	469a      	mov	sl, r3
 800952e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009532:	d807      	bhi.n	8009544 <_printf_i+0x28>
 8009534:	2f62      	cmp	r7, #98	; 0x62
 8009536:	d80a      	bhi.n	800954e <_printf_i+0x32>
 8009538:	2f00      	cmp	r7, #0
 800953a:	f000 80d8 	beq.w	80096ee <_printf_i+0x1d2>
 800953e:	2f58      	cmp	r7, #88	; 0x58
 8009540:	f000 80a3 	beq.w	800968a <_printf_i+0x16e>
 8009544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800954c:	e03a      	b.n	80095c4 <_printf_i+0xa8>
 800954e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009552:	2b15      	cmp	r3, #21
 8009554:	d8f6      	bhi.n	8009544 <_printf_i+0x28>
 8009556:	a101      	add	r1, pc, #4	; (adr r1, 800955c <_printf_i+0x40>)
 8009558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800955c:	080095b5 	.word	0x080095b5
 8009560:	080095c9 	.word	0x080095c9
 8009564:	08009545 	.word	0x08009545
 8009568:	08009545 	.word	0x08009545
 800956c:	08009545 	.word	0x08009545
 8009570:	08009545 	.word	0x08009545
 8009574:	080095c9 	.word	0x080095c9
 8009578:	08009545 	.word	0x08009545
 800957c:	08009545 	.word	0x08009545
 8009580:	08009545 	.word	0x08009545
 8009584:	08009545 	.word	0x08009545
 8009588:	080096d5 	.word	0x080096d5
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080096b7 	.word	0x080096b7
 8009594:	08009545 	.word	0x08009545
 8009598:	08009545 	.word	0x08009545
 800959c:	080096f7 	.word	0x080096f7
 80095a0:	08009545 	.word	0x08009545
 80095a4:	080095f9 	.word	0x080095f9
 80095a8:	08009545 	.word	0x08009545
 80095ac:	08009545 	.word	0x08009545
 80095b0:	080096bf 	.word	0x080096bf
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	602a      	str	r2, [r5, #0]
 80095bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0a3      	b.n	8009710 <_printf_i+0x1f4>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	6829      	ldr	r1, [r5, #0]
 80095cc:	0606      	lsls	r6, r0, #24
 80095ce:	f101 0304 	add.w	r3, r1, #4
 80095d2:	d50a      	bpl.n	80095ea <_printf_i+0xce>
 80095d4:	680e      	ldr	r6, [r1, #0]
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	2e00      	cmp	r6, #0
 80095da:	da03      	bge.n	80095e4 <_printf_i+0xc8>
 80095dc:	232d      	movs	r3, #45	; 0x2d
 80095de:	4276      	negs	r6, r6
 80095e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e4:	485e      	ldr	r0, [pc, #376]	; (8009760 <_printf_i+0x244>)
 80095e6:	230a      	movs	r3, #10
 80095e8:	e019      	b.n	800961e <_printf_i+0x102>
 80095ea:	680e      	ldr	r6, [r1, #0]
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095f2:	bf18      	it	ne
 80095f4:	b236      	sxthne	r6, r6
 80095f6:	e7ef      	b.n	80095d8 <_printf_i+0xbc>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	6820      	ldr	r0, [r4, #0]
 80095fc:	1d19      	adds	r1, r3, #4
 80095fe:	6029      	str	r1, [r5, #0]
 8009600:	0601      	lsls	r1, r0, #24
 8009602:	d501      	bpl.n	8009608 <_printf_i+0xec>
 8009604:	681e      	ldr	r6, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0xf2>
 8009608:	0646      	lsls	r6, r0, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0xe8>
 800960c:	881e      	ldrh	r6, [r3, #0]
 800960e:	4854      	ldr	r0, [pc, #336]	; (8009760 <_printf_i+0x244>)
 8009610:	2f6f      	cmp	r7, #111	; 0x6f
 8009612:	bf0c      	ite	eq
 8009614:	2308      	moveq	r3, #8
 8009616:	230a      	movne	r3, #10
 8009618:	2100      	movs	r1, #0
 800961a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800961e:	6865      	ldr	r5, [r4, #4]
 8009620:	60a5      	str	r5, [r4, #8]
 8009622:	2d00      	cmp	r5, #0
 8009624:	bfa2      	ittt	ge
 8009626:	6821      	ldrge	r1, [r4, #0]
 8009628:	f021 0104 	bicge.w	r1, r1, #4
 800962c:	6021      	strge	r1, [r4, #0]
 800962e:	b90e      	cbnz	r6, 8009634 <_printf_i+0x118>
 8009630:	2d00      	cmp	r5, #0
 8009632:	d04d      	beq.n	80096d0 <_printf_i+0x1b4>
 8009634:	4615      	mov	r5, r2
 8009636:	fbb6 f1f3 	udiv	r1, r6, r3
 800963a:	fb03 6711 	mls	r7, r3, r1, r6
 800963e:	5dc7      	ldrb	r7, [r0, r7]
 8009640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009644:	4637      	mov	r7, r6
 8009646:	42bb      	cmp	r3, r7
 8009648:	460e      	mov	r6, r1
 800964a:	d9f4      	bls.n	8009636 <_printf_i+0x11a>
 800964c:	2b08      	cmp	r3, #8
 800964e:	d10b      	bne.n	8009668 <_printf_i+0x14c>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07de      	lsls	r6, r3, #31
 8009654:	d508      	bpl.n	8009668 <_printf_i+0x14c>
 8009656:	6923      	ldr	r3, [r4, #16]
 8009658:	6861      	ldr	r1, [r4, #4]
 800965a:	4299      	cmp	r1, r3
 800965c:	bfde      	ittt	le
 800965e:	2330      	movle	r3, #48	; 0x30
 8009660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009668:	1b52      	subs	r2, r2, r5
 800966a:	6122      	str	r2, [r4, #16]
 800966c:	f8cd a000 	str.w	sl, [sp]
 8009670:	464b      	mov	r3, r9
 8009672:	aa03      	add	r2, sp, #12
 8009674:	4621      	mov	r1, r4
 8009676:	4640      	mov	r0, r8
 8009678:	f7ff fee2 	bl	8009440 <_printf_common>
 800967c:	3001      	adds	r0, #1
 800967e:	d14c      	bne.n	800971a <_printf_i+0x1fe>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009684:	b004      	add	sp, #16
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	4835      	ldr	r0, [pc, #212]	; (8009760 <_printf_i+0x244>)
 800968c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009690:	6829      	ldr	r1, [r5, #0]
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f851 6b04 	ldr.w	r6, [r1], #4
 8009698:	6029      	str	r1, [r5, #0]
 800969a:	061d      	lsls	r5, r3, #24
 800969c:	d514      	bpl.n	80096c8 <_printf_i+0x1ac>
 800969e:	07df      	lsls	r7, r3, #31
 80096a0:	bf44      	itt	mi
 80096a2:	f043 0320 	orrmi.w	r3, r3, #32
 80096a6:	6023      	strmi	r3, [r4, #0]
 80096a8:	b91e      	cbnz	r6, 80096b2 <_printf_i+0x196>
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	f023 0320 	bic.w	r3, r3, #32
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	2310      	movs	r3, #16
 80096b4:	e7b0      	b.n	8009618 <_printf_i+0xfc>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	f043 0320 	orr.w	r3, r3, #32
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	2378      	movs	r3, #120	; 0x78
 80096c0:	4828      	ldr	r0, [pc, #160]	; (8009764 <_printf_i+0x248>)
 80096c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096c6:	e7e3      	b.n	8009690 <_printf_i+0x174>
 80096c8:	0659      	lsls	r1, r3, #25
 80096ca:	bf48      	it	mi
 80096cc:	b2b6      	uxthmi	r6, r6
 80096ce:	e7e6      	b.n	800969e <_printf_i+0x182>
 80096d0:	4615      	mov	r5, r2
 80096d2:	e7bb      	b.n	800964c <_printf_i+0x130>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	6826      	ldr	r6, [r4, #0]
 80096d8:	6961      	ldr	r1, [r4, #20]
 80096da:	1d18      	adds	r0, r3, #4
 80096dc:	6028      	str	r0, [r5, #0]
 80096de:	0635      	lsls	r5, r6, #24
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	d501      	bpl.n	80096e8 <_printf_i+0x1cc>
 80096e4:	6019      	str	r1, [r3, #0]
 80096e6:	e002      	b.n	80096ee <_printf_i+0x1d2>
 80096e8:	0670      	lsls	r0, r6, #25
 80096ea:	d5fb      	bpl.n	80096e4 <_printf_i+0x1c8>
 80096ec:	8019      	strh	r1, [r3, #0]
 80096ee:	2300      	movs	r3, #0
 80096f0:	6123      	str	r3, [r4, #16]
 80096f2:	4615      	mov	r5, r2
 80096f4:	e7ba      	b.n	800966c <_printf_i+0x150>
 80096f6:	682b      	ldr	r3, [r5, #0]
 80096f8:	1d1a      	adds	r2, r3, #4
 80096fa:	602a      	str	r2, [r5, #0]
 80096fc:	681d      	ldr	r5, [r3, #0]
 80096fe:	6862      	ldr	r2, [r4, #4]
 8009700:	2100      	movs	r1, #0
 8009702:	4628      	mov	r0, r5
 8009704:	f7f6 fdf4 	bl	80002f0 <memchr>
 8009708:	b108      	cbz	r0, 800970e <_printf_i+0x1f2>
 800970a:	1b40      	subs	r0, r0, r5
 800970c:	6060      	str	r0, [r4, #4]
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	2300      	movs	r3, #0
 8009714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009718:	e7a8      	b.n	800966c <_printf_i+0x150>
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	462a      	mov	r2, r5
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	47d0      	blx	sl
 8009724:	3001      	adds	r0, #1
 8009726:	d0ab      	beq.n	8009680 <_printf_i+0x164>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	079b      	lsls	r3, r3, #30
 800972c:	d413      	bmi.n	8009756 <_printf_i+0x23a>
 800972e:	68e0      	ldr	r0, [r4, #12]
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	4298      	cmp	r0, r3
 8009734:	bfb8      	it	lt
 8009736:	4618      	movlt	r0, r3
 8009738:	e7a4      	b.n	8009684 <_printf_i+0x168>
 800973a:	2301      	movs	r3, #1
 800973c:	4632      	mov	r2, r6
 800973e:	4649      	mov	r1, r9
 8009740:	4640      	mov	r0, r8
 8009742:	47d0      	blx	sl
 8009744:	3001      	adds	r0, #1
 8009746:	d09b      	beq.n	8009680 <_printf_i+0x164>
 8009748:	3501      	adds	r5, #1
 800974a:	68e3      	ldr	r3, [r4, #12]
 800974c:	9903      	ldr	r1, [sp, #12]
 800974e:	1a5b      	subs	r3, r3, r1
 8009750:	42ab      	cmp	r3, r5
 8009752:	dcf2      	bgt.n	800973a <_printf_i+0x21e>
 8009754:	e7eb      	b.n	800972e <_printf_i+0x212>
 8009756:	2500      	movs	r5, #0
 8009758:	f104 0619 	add.w	r6, r4, #25
 800975c:	e7f5      	b.n	800974a <_printf_i+0x22e>
 800975e:	bf00      	nop
 8009760:	08009ac9 	.word	0x08009ac9
 8009764:	08009ada 	.word	0x08009ada

08009768 <memcpy>:
 8009768:	440a      	add	r2, r1
 800976a:	4291      	cmp	r1, r2
 800976c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009770:	d100      	bne.n	8009774 <memcpy+0xc>
 8009772:	4770      	bx	lr
 8009774:	b510      	push	{r4, lr}
 8009776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800977a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800977e:	4291      	cmp	r1, r2
 8009780:	d1f9      	bne.n	8009776 <memcpy+0xe>
 8009782:	bd10      	pop	{r4, pc}

08009784 <memmove>:
 8009784:	4288      	cmp	r0, r1
 8009786:	b510      	push	{r4, lr}
 8009788:	eb01 0402 	add.w	r4, r1, r2
 800978c:	d902      	bls.n	8009794 <memmove+0x10>
 800978e:	4284      	cmp	r4, r0
 8009790:	4623      	mov	r3, r4
 8009792:	d807      	bhi.n	80097a4 <memmove+0x20>
 8009794:	1e43      	subs	r3, r0, #1
 8009796:	42a1      	cmp	r1, r4
 8009798:	d008      	beq.n	80097ac <memmove+0x28>
 800979a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800979e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097a2:	e7f8      	b.n	8009796 <memmove+0x12>
 80097a4:	4402      	add	r2, r0
 80097a6:	4601      	mov	r1, r0
 80097a8:	428a      	cmp	r2, r1
 80097aa:	d100      	bne.n	80097ae <memmove+0x2a>
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097b6:	e7f7      	b.n	80097a8 <memmove+0x24>

080097b8 <_free_r>:
 80097b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ba:	2900      	cmp	r1, #0
 80097bc:	d044      	beq.n	8009848 <_free_r+0x90>
 80097be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097c2:	9001      	str	r0, [sp, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f1a1 0404 	sub.w	r4, r1, #4
 80097ca:	bfb8      	it	lt
 80097cc:	18e4      	addlt	r4, r4, r3
 80097ce:	f000 f913 	bl	80099f8 <__malloc_lock>
 80097d2:	4a1e      	ldr	r2, [pc, #120]	; (800984c <_free_r+0x94>)
 80097d4:	9801      	ldr	r0, [sp, #4]
 80097d6:	6813      	ldr	r3, [r2, #0]
 80097d8:	b933      	cbnz	r3, 80097e8 <_free_r+0x30>
 80097da:	6063      	str	r3, [r4, #4]
 80097dc:	6014      	str	r4, [r2, #0]
 80097de:	b003      	add	sp, #12
 80097e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097e4:	f000 b90e 	b.w	8009a04 <__malloc_unlock>
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	d908      	bls.n	80097fe <_free_r+0x46>
 80097ec:	6825      	ldr	r5, [r4, #0]
 80097ee:	1961      	adds	r1, r4, r5
 80097f0:	428b      	cmp	r3, r1
 80097f2:	bf01      	itttt	eq
 80097f4:	6819      	ldreq	r1, [r3, #0]
 80097f6:	685b      	ldreq	r3, [r3, #4]
 80097f8:	1949      	addeq	r1, r1, r5
 80097fa:	6021      	streq	r1, [r4, #0]
 80097fc:	e7ed      	b.n	80097da <_free_r+0x22>
 80097fe:	461a      	mov	r2, r3
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	b10b      	cbz	r3, 8009808 <_free_r+0x50>
 8009804:	42a3      	cmp	r3, r4
 8009806:	d9fa      	bls.n	80097fe <_free_r+0x46>
 8009808:	6811      	ldr	r1, [r2, #0]
 800980a:	1855      	adds	r5, r2, r1
 800980c:	42a5      	cmp	r5, r4
 800980e:	d10b      	bne.n	8009828 <_free_r+0x70>
 8009810:	6824      	ldr	r4, [r4, #0]
 8009812:	4421      	add	r1, r4
 8009814:	1854      	adds	r4, r2, r1
 8009816:	42a3      	cmp	r3, r4
 8009818:	6011      	str	r1, [r2, #0]
 800981a:	d1e0      	bne.n	80097de <_free_r+0x26>
 800981c:	681c      	ldr	r4, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	6053      	str	r3, [r2, #4]
 8009822:	4421      	add	r1, r4
 8009824:	6011      	str	r1, [r2, #0]
 8009826:	e7da      	b.n	80097de <_free_r+0x26>
 8009828:	d902      	bls.n	8009830 <_free_r+0x78>
 800982a:	230c      	movs	r3, #12
 800982c:	6003      	str	r3, [r0, #0]
 800982e:	e7d6      	b.n	80097de <_free_r+0x26>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf04      	itt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	bf04      	itt	eq
 8009840:	1949      	addeq	r1, r1, r5
 8009842:	6021      	streq	r1, [r4, #0]
 8009844:	6054      	str	r4, [r2, #4]
 8009846:	e7ca      	b.n	80097de <_free_r+0x26>
 8009848:	b003      	add	sp, #12
 800984a:	bd30      	pop	{r4, r5, pc}
 800984c:	24000274 	.word	0x24000274

08009850 <sbrk_aligned>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	4e0e      	ldr	r6, [pc, #56]	; (800988c <sbrk_aligned+0x3c>)
 8009854:	460c      	mov	r4, r1
 8009856:	6831      	ldr	r1, [r6, #0]
 8009858:	4605      	mov	r5, r0
 800985a:	b911      	cbnz	r1, 8009862 <sbrk_aligned+0x12>
 800985c:	f000 f8bc 	bl	80099d8 <_sbrk_r>
 8009860:	6030      	str	r0, [r6, #0]
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f000 f8b7 	bl	80099d8 <_sbrk_r>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d00a      	beq.n	8009884 <sbrk_aligned+0x34>
 800986e:	1cc4      	adds	r4, r0, #3
 8009870:	f024 0403 	bic.w	r4, r4, #3
 8009874:	42a0      	cmp	r0, r4
 8009876:	d007      	beq.n	8009888 <sbrk_aligned+0x38>
 8009878:	1a21      	subs	r1, r4, r0
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f8ac 	bl	80099d8 <_sbrk_r>
 8009880:	3001      	adds	r0, #1
 8009882:	d101      	bne.n	8009888 <sbrk_aligned+0x38>
 8009884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009888:	4620      	mov	r0, r4
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	24000278 	.word	0x24000278

08009890 <_malloc_r>:
 8009890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009894:	1ccd      	adds	r5, r1, #3
 8009896:	f025 0503 	bic.w	r5, r5, #3
 800989a:	3508      	adds	r5, #8
 800989c:	2d0c      	cmp	r5, #12
 800989e:	bf38      	it	cc
 80098a0:	250c      	movcc	r5, #12
 80098a2:	2d00      	cmp	r5, #0
 80098a4:	4607      	mov	r7, r0
 80098a6:	db01      	blt.n	80098ac <_malloc_r+0x1c>
 80098a8:	42a9      	cmp	r1, r5
 80098aa:	d905      	bls.n	80098b8 <_malloc_r+0x28>
 80098ac:	230c      	movs	r3, #12
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	2600      	movs	r6, #0
 80098b2:	4630      	mov	r0, r6
 80098b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b8:	4e2e      	ldr	r6, [pc, #184]	; (8009974 <_malloc_r+0xe4>)
 80098ba:	f000 f89d 	bl	80099f8 <__malloc_lock>
 80098be:	6833      	ldr	r3, [r6, #0]
 80098c0:	461c      	mov	r4, r3
 80098c2:	bb34      	cbnz	r4, 8009912 <_malloc_r+0x82>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4638      	mov	r0, r7
 80098c8:	f7ff ffc2 	bl	8009850 <sbrk_aligned>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	4604      	mov	r4, r0
 80098d0:	d14d      	bne.n	800996e <_malloc_r+0xde>
 80098d2:	6834      	ldr	r4, [r6, #0]
 80098d4:	4626      	mov	r6, r4
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d140      	bne.n	800995c <_malloc_r+0xcc>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	4631      	mov	r1, r6
 80098de:	4638      	mov	r0, r7
 80098e0:	eb04 0803 	add.w	r8, r4, r3
 80098e4:	f000 f878 	bl	80099d8 <_sbrk_r>
 80098e8:	4580      	cmp	r8, r0
 80098ea:	d13a      	bne.n	8009962 <_malloc_r+0xd2>
 80098ec:	6821      	ldr	r1, [r4, #0]
 80098ee:	3503      	adds	r5, #3
 80098f0:	1a6d      	subs	r5, r5, r1
 80098f2:	f025 0503 	bic.w	r5, r5, #3
 80098f6:	3508      	adds	r5, #8
 80098f8:	2d0c      	cmp	r5, #12
 80098fa:	bf38      	it	cc
 80098fc:	250c      	movcc	r5, #12
 80098fe:	4629      	mov	r1, r5
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff ffa5 	bl	8009850 <sbrk_aligned>
 8009906:	3001      	adds	r0, #1
 8009908:	d02b      	beq.n	8009962 <_malloc_r+0xd2>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	442b      	add	r3, r5
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	e00e      	b.n	8009930 <_malloc_r+0xa0>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	1b52      	subs	r2, r2, r5
 8009916:	d41e      	bmi.n	8009956 <_malloc_r+0xc6>
 8009918:	2a0b      	cmp	r2, #11
 800991a:	d916      	bls.n	800994a <_malloc_r+0xba>
 800991c:	1961      	adds	r1, r4, r5
 800991e:	42a3      	cmp	r3, r4
 8009920:	6025      	str	r5, [r4, #0]
 8009922:	bf18      	it	ne
 8009924:	6059      	strne	r1, [r3, #4]
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	bf08      	it	eq
 800992a:	6031      	streq	r1, [r6, #0]
 800992c:	5162      	str	r2, [r4, r5]
 800992e:	604b      	str	r3, [r1, #4]
 8009930:	4638      	mov	r0, r7
 8009932:	f104 060b 	add.w	r6, r4, #11
 8009936:	f000 f865 	bl	8009a04 <__malloc_unlock>
 800993a:	f026 0607 	bic.w	r6, r6, #7
 800993e:	1d23      	adds	r3, r4, #4
 8009940:	1af2      	subs	r2, r6, r3
 8009942:	d0b6      	beq.n	80098b2 <_malloc_r+0x22>
 8009944:	1b9b      	subs	r3, r3, r6
 8009946:	50a3      	str	r3, [r4, r2]
 8009948:	e7b3      	b.n	80098b2 <_malloc_r+0x22>
 800994a:	6862      	ldr	r2, [r4, #4]
 800994c:	42a3      	cmp	r3, r4
 800994e:	bf0c      	ite	eq
 8009950:	6032      	streq	r2, [r6, #0]
 8009952:	605a      	strne	r2, [r3, #4]
 8009954:	e7ec      	b.n	8009930 <_malloc_r+0xa0>
 8009956:	4623      	mov	r3, r4
 8009958:	6864      	ldr	r4, [r4, #4]
 800995a:	e7b2      	b.n	80098c2 <_malloc_r+0x32>
 800995c:	4634      	mov	r4, r6
 800995e:	6876      	ldr	r6, [r6, #4]
 8009960:	e7b9      	b.n	80098d6 <_malloc_r+0x46>
 8009962:	230c      	movs	r3, #12
 8009964:	603b      	str	r3, [r7, #0]
 8009966:	4638      	mov	r0, r7
 8009968:	f000 f84c 	bl	8009a04 <__malloc_unlock>
 800996c:	e7a1      	b.n	80098b2 <_malloc_r+0x22>
 800996e:	6025      	str	r5, [r4, #0]
 8009970:	e7de      	b.n	8009930 <_malloc_r+0xa0>
 8009972:	bf00      	nop
 8009974:	24000274 	.word	0x24000274

08009978 <_realloc_r>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	4680      	mov	r8, r0
 800997e:	4614      	mov	r4, r2
 8009980:	460e      	mov	r6, r1
 8009982:	b921      	cbnz	r1, 800998e <_realloc_r+0x16>
 8009984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009988:	4611      	mov	r1, r2
 800998a:	f7ff bf81 	b.w	8009890 <_malloc_r>
 800998e:	b92a      	cbnz	r2, 800999c <_realloc_r+0x24>
 8009990:	f7ff ff12 	bl	80097b8 <_free_r>
 8009994:	4625      	mov	r5, r4
 8009996:	4628      	mov	r0, r5
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	f000 f838 	bl	8009a10 <_malloc_usable_size_r>
 80099a0:	4284      	cmp	r4, r0
 80099a2:	4607      	mov	r7, r0
 80099a4:	d802      	bhi.n	80099ac <_realloc_r+0x34>
 80099a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099aa:	d812      	bhi.n	80099d2 <_realloc_r+0x5a>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4640      	mov	r0, r8
 80099b0:	f7ff ff6e 	bl	8009890 <_malloc_r>
 80099b4:	4605      	mov	r5, r0
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0ed      	beq.n	8009996 <_realloc_r+0x1e>
 80099ba:	42bc      	cmp	r4, r7
 80099bc:	4622      	mov	r2, r4
 80099be:	4631      	mov	r1, r6
 80099c0:	bf28      	it	cs
 80099c2:	463a      	movcs	r2, r7
 80099c4:	f7ff fed0 	bl	8009768 <memcpy>
 80099c8:	4631      	mov	r1, r6
 80099ca:	4640      	mov	r0, r8
 80099cc:	f7ff fef4 	bl	80097b8 <_free_r>
 80099d0:	e7e1      	b.n	8009996 <_realloc_r+0x1e>
 80099d2:	4635      	mov	r5, r6
 80099d4:	e7df      	b.n	8009996 <_realloc_r+0x1e>
	...

080099d8 <_sbrk_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d06      	ldr	r5, [pc, #24]	; (80099f4 <_sbrk_r+0x1c>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f7 fb56 	bl	8001094 <_sbrk>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_sbrk_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_sbrk_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	2400027c 	.word	0x2400027c

080099f8 <__malloc_lock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__malloc_lock+0x8>)
 80099fa:	f000 b811 	b.w	8009a20 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	24000280 	.word	0x24000280

08009a04 <__malloc_unlock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__malloc_unlock+0x8>)
 8009a06:	f000 b80c 	b.w	8009a22 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	24000280 	.word	0x24000280

08009a10 <_malloc_usable_size_r>:
 8009a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a14:	1f18      	subs	r0, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbc      	itt	lt
 8009a1a:	580b      	ldrlt	r3, [r1, r0]
 8009a1c:	18c0      	addlt	r0, r0, r3
 8009a1e:	4770      	bx	lr

08009a20 <__retarget_lock_acquire_recursive>:
 8009a20:	4770      	bx	lr

08009a22 <__retarget_lock_release_recursive>:
 8009a22:	4770      	bx	lr

08009a24 <_init>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr

08009a30 <_fini>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr
